var searchIndex = JSON.parse('{\
"ek":{"doc":"Zink’s package manager","t":"NEDLLLLLLLLLMLLLLLLLLLLLLLFLLLLLLLLLLLLM","n":["Build","Command","Ek","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","run","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verbose"],"q":[[0,"ek"]],"d":["","ek commands","Zink’s package manager","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Verbose mode (-v, -vv, -vvv, etc.)"],"i":[2,0,0,5,5,2,2,2,5,2,5,5,5,5,2,5,2,5,2,5,2,5,5,2,2,5,0,5,2,5,2,5,2,5,2,5,2,5,5,5],"f":[0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],[[2,3],4],[[5,3],4],[[]],[[]],[6,[[8,[2,7]]]],[6,[[8,[5,7]]]],[6,[[8,[2,7]]]],[6,[[8,[5,7]]]],[[],[[10,[9]]]],[11,12],[[]],[[]],[[],13],[5,14],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[2,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[[2,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[5,16],0],"c":[],"p":[[3,"Command"],[4,"Command"],[3,"Formatter"],[6,"Result"],[3,"Ek"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[6,"Result"],[6,"Result"],[3,"TypeId"],[15,"u8"]]},\
"evm_opcodes":{"doc":"Ethereum virtual machine opcode","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNENLLLLOLLKKLLOAKKKLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNLLLLLLLLLLLLLLLLL","n":["ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","Berlin","BlockInformation","Byzantium","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","ComparisonBitwiseLogic","Constantinople","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Duplication","EQ","EXP","EXTCODECOPY","EXTCODESIZE","EnvironmentalInformation","Exchange","Frontier","GAS","GASLIMIT","GASPRICE","GT","Group","INVALID","ISZERO","Istanbul","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","Logging","London","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","OpCode","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","Push","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SDIV","SELFDESTRUCT","SGT","SHA3","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","Sha3","ShangHai","Shanghai","StackMemoryStorageFlow","StopArithmetic","System","TIMESTAMP","Upgrade","XOR","borrow","borrow","borrow_mut","borrow_mut","for_each_shanghai_operator","from","from","gas","group","into","into","opcodes","shanghai","since","stack_in","stack_out","try_from","try_from","try_into","try_into","type_id","type_id","ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","EQ","EXP","EXTCODECOPY","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SDIV","SELFDESTRUCT","SGT","SHA3","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","ShangHai","TIMESTAMP","XOR","borrow","borrow_mut","clone","clone_into","fmt","from","from","gas","group","into","since","stack_in","stack_out","to_owned","try_from","try_into","type_id"],"q":[[0,"evm_opcodes"],[181,"evm_opcodes::shanghai"]],"d":["Addition operation.","Modulo addition operation.","Get address of currently executing account.","Bitwise AND operation.","Get balance of the given account.","Get the hash of one of the 256 most recent complete blocks.","Retrieve single byte from word.","Berlin","Block Information","Byzantium","Message-call into an account.","Message-call into this account with alternative …","Copy input data in current environment to memory.","Get input data of current environment.","Get size of input data in current environment.","Get caller address.","Get deposited value by the instruction/transaction …","Copy code running in current environment to memory.","Get size of code running in current environment.","Get the block’s beneficiary address.","Create a new account with associated","Create a new account with associated code at a specified …","Comparison &amp; Bitwise Logic Operations","Constantinople","Message-call into this account with an alternative …","Get the block’s difficulty.","Integer division operation.","Duplicate 1st stack item.","Duplicate 10th stack item.","Duplicate 11th stack item.","Duplicate 12th stack item.","Duplicate 13th stack item.","Duplicate 14th stack item.","Duplicate 15th stack item.","Duplicate 16th stack item.","Duplicate 2nd stack item.","Duplicate 3rd stack item.","Duplicate 4th stack item.","Duplicate 5th stack item.","Duplicate 6th stack item.","Duplicate 7th stack item.","Duplicate 8th stack item.","Duplicate 9th stack item.","Duplication Operations","Equality comparision.","Exponential operation.","Copy an account’s code to memory.","Get size of an account’s code.","Environmental Information","Exchange Operations","Frontier","Get the amount of available gas, including the …","Get the block’s gas limit.","Get price of gas in current environment","Greater-than comparision.","EVM opcode groups","Designated invalid instruction.","Simple not operator.","Istanbul","Alter the program counter.","Mark a valid destination for jumps.","Conditionally alter the program counter.","Append log record with no topics.","Append log record with one topic.","Append log record with two topics.","Append log record with three topics.","Append log record with four topics.","Less-than comparision.","Logging Operations","London","Load word from memory.","Modulo remainder operation.","Get the size of active memory in bytes.","Save word to memory.","Save byte to memory.","Multiplication operation.","Modulo multiplication operation.","Bitwise NOT operation.","Get the block’s number.","Bitwise OR operation.","Get execution origination address.","Ethereum virtual machine opcode.","Get the value of the program counter prior to the …","Remove item from stack.","Place 0 byte item on stack.","Place 1 byte item on stack.","Place 10-byte item on stack.","Place 11-byte item on stack.","Place 12-byte item on stack.","Place 13-byte item on stack.","Place 14-byte item on stack.","Place 15-byte item on stack.","Place 16-byte item on stack.","Place 17-byte item on stack.","Place 18-byte item on stack.","Place 19-byte item on stack.","Place 2-byte item on stack.","Place 20-byte item on stack.","Place 21-byte item on stack.","Place 22-byte item on stack.","Place 23-byte item on stack.","Place 24-byte item on stack.","Place 25-byte item on stack.","Place 26-byte item on stack.","Place 27-byte item on stack.","Place 28-byte item on stack.","Place 29-byte item on stack.","Place 3-byte item on stack.","Place 30-byte item on stack.","Place 31-byte item on stack.","Place 32-byte (full word) item on stack.","Place 4-byte item on stack.","Place 5-byte item on stack.","Place 6-byte item on stack.","Place 7-byte item on stack.","Place 8-byte item on stack.","Place 9-byte item on stack.","Push Operations","Halt execution returning output data.","Copy output data from the previous call to memory.","Get size of output data from the previous call from the …","Stop execution and revert state changes, without consuming …","Signed integer division operation (truncated).","Halt execution and register account for later deletion.","Signed greater-than comparision.","Compute Keccak-256 hash.","Extend length of two’s complement signed integer.","Load word from storage.","Signed less-than comparision.","Signed modulo remainder operation.","Save word to storage.","Static message-call into an account.","Halts execution.","Subtraction operation.","Exchange 1st and 2nd stack items.","Exchange 1st and 11th stack items.","Exchange 1st and 12th stack items.","Exchange 1st and 13th stack items.","Exchange 1st and 14th stack items.","Exchange 1st and 15th stack items.","Exchange 1st and 16th stack items.","Exchange 1st and 17th stack items.","Exchange 1st and 3rd stack items.","Exchange 1st and 4th stack items.","Exchange 1st and 5th stack items.","Exchange 1st and 6th stack items.","Exchange 1st and 7th stack items.","Exchange 1st and 8th stack items.","Exchange 1st and 9th stack items.","Exchange 1st and 10th stack items.","SHA3","Ethereum virtual machine opcode.","Shanghai","Stack, Memory, Storage and Flow Operations","Stop and Arithmetic Operations","System operations","Get the block’s timestamp.","Ethereum upgrades.","Bitwise XOR operation.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instructions for ShangHai (上海).","","","","","","","","","","Addition operation.","Modulo addition operation.","Get address of currently executing account.","Bitwise AND operation.","Get balance of the given account.","Get the hash of one of the 256 most recent complete blocks.","Retrieve single byte from word.","Message-call into an account.","Message-call into this account with alternative …","Copy input data in current environment to memory.","Get input data of current environment.","Get size of input data in current environment.","Get caller address.","Get deposited value by the instruction/transaction …","Copy code running in current environment to memory.","Get size of code running in current environment.","Get the block’s beneficiary address.","Create a new account with associated","Create a new account with associated code at a specified …","Message-call into this account with an alternative …","Get the block’s difficulty.","Integer division operation.","Duplicate 1st stack item.","Duplicate 10th stack item.","Duplicate 11th stack item.","Duplicate 12th stack item.","Duplicate 13th stack item.","Duplicate 14th stack item.","Duplicate 15th stack item.","Duplicate 16th stack item.","Duplicate 2nd stack item.","Duplicate 3rd stack item.","Duplicate 4th stack item.","Duplicate 5th stack item.","Duplicate 6th stack item.","Duplicate 7th stack item.","Duplicate 8th stack item.","Duplicate 9th stack item.","Equality comparision.","Exponential operation.","Copy an account’s code to memory.","Get size of an account’s code.","Get the amount of available gas, including the …","Get the block’s gas limit.","Get price of gas in current environment","Greater-than comparision.","Designated invalid instruction.","Simple not operator.","Alter the program counter.","Mark a valid destination for jumps.","Conditionally alter the program counter.","Append log record with no topics.","Append log record with one topic.","Append log record with two topics.","Append log record with three topics.","Append log record with four topics.","Less-than comparision.","Load word from memory.","Modulo remainder operation.","Get the size of active memory in bytes.","Save word to memory.","Save byte to memory.","Multiplication operation.","Modulo multiplication operation.","Bitwise NOT operation.","Get the block’s number.","Bitwise OR operation.","Get execution origination address.","Get the value of the program counter prior to the …","Remove item from stack.","Place 0 byte item on stack.","Place 1 byte item on stack.","Place 10-byte item on stack.","Place 11-byte item on stack.","Place 12-byte item on stack.","Place 13-byte item on stack.","Place 14-byte item on stack.","Place 15-byte item on stack.","Place 16-byte item on stack.","Place 17-byte item on stack.","Place 18-byte item on stack.","Place 19-byte item on stack.","Place 2-byte item on stack.","Place 20-byte item on stack.","Place 21-byte item on stack.","Place 22-byte item on stack.","Place 23-byte item on stack.","Place 24-byte item on stack.","Place 25-byte item on stack.","Place 26-byte item on stack.","Place 27-byte item on stack.","Place 28-byte item on stack.","Place 29-byte item on stack.","Place 3-byte item on stack.","Place 30-byte item on stack.","Place 31-byte item on stack.","Place 32-byte (full word) item on stack.","Place 4-byte item on stack.","Place 5-byte item on stack.","Place 6-byte item on stack.","Place 7-byte item on stack.","Place 8-byte item on stack.","Place 9-byte item on stack.","Halt execution returning output data.","Copy output data from the previous call to memory.","Get size of output data from the previous call from the …","Stop execution and revert state changes, without consuming …","Signed integer division operation (truncated).","Halt execution and register account for later deletion.","Signed greater-than comparision.","Compute Keccak-256 hash.","Extend length of two’s complement signed integer.","Load word from storage.","Signed less-than comparision.","Signed modulo remainder operation.","Save word to storage.","Static message-call into an account.","Halts execution.","Subtraction operation.","Exchange 1st and 2nd stack items.","Exchange 1st and 11th stack items.","Exchange 1st and 12th stack items.","Exchange 1st and 13th stack items.","Exchange 1st and 14th stack items.","Exchange 1st and 15th stack items.","Exchange 1st and 16th stack items.","Exchange 1st and 17th stack items.","Exchange 1st and 3rd stack items.","Exchange 1st and 4th stack items.","Exchange 1st and 5th stack items.","Exchange 1st and 6th stack items.","Exchange 1st and 7th stack items.","Exchange 1st and 8th stack items.","Exchange 1st and 9th stack items.","Exchange 1st and 10th stack items.","Ethereum virtual machine opcode.","Get the block’s timestamp.","Bitwise XOR operation.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[6,6,6,6,6,6,6,3,2,3,6,6,6,6,6,6,6,6,6,6,6,6,2,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,2,2,3,6,6,6,6,0,6,6,3,6,6,6,6,6,6,6,6,6,2,3,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,0,3,2,2,2,6,0,6,2,3,2,3,0,2,3,10,10,2,3,0,0,10,10,10,2,3,2,3,2,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[],1],[[],2],[[]],[[]],0,0,[[],3],[[],1],[[],1],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[6,6],[[]],[[6,7],8],[[]],[9,6],[6,1],[6,2],[[]],[6,3],[6,1],[6,1],[[]],[[],4],[[],4],[[],5]],"c":[],"p":[[15,"u16"],[4,"Group"],[4,"Upgrade"],[4,"Result"],[3,"TypeId"],[4,"ShangHai"],[3,"Formatter"],[6,"Result"],[15,"u8"],[8,"OpCode"]]},\
"zingen":{"doc":"Code generation library for zink.","t":"DRNNGNDDDENNNNENNNDNNDGNDNGNNNCCMMAAMMAAMMMMMMAMAMAMMMMFAMMMAARQIILOKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMOLLLLMLMLLLDLLMLLMLLLMLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDENNNMMLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLNEDNLLLLLLLLLLLMLLMLLLLLLLLLLLDLLLMLLMLLLLLDMLLLLLLLLLLLLLLLNNNNNENNNNNGNNNLLLLLLLLLLLLLIDLLLLKLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Assembler","BUFFER_LIMIT","BinaryReader","Block","Buffer","BufferOverflow","CodeGen","ControlStack","ControlStackFrame","ControlStackFrameType","ControlStackUnderflow","DuplicateFunc","DuplicateJump","Else","Error","FuncNotFound","If","InvalidPC","JumpTable","LabelMismatch","LocalIndexOutOfRange","LocalSlot","Locals","Loop","MacroAssembler","MemoryOutOfBounds","Result","StackIndexOutOfRange","StackOverflow","StackUnderflow","ToLSBytes","Type","_result","_ty","abi","asm","asm","buffer","codegen","control","control","env","func","gas","inner","is_main","jump","jump","local","locals","masm","masm","mp","offset","original_pc_offset","patch","result","sp","stack","table","validator","visitor","ALIGNMENT_MASK","Output","ToLSBytes","Type","align","offset","size","to_ls_bytes","Assembler","_add","_addmod","_address","_and","_balance","_blockhash","_byte","_call","_callcode","_calldatacopy","_calldataload","_calldatasize","_caller","_callvalue","_codecopy","_codesize","_coinbase","_create","_create2","_delegatecall","_difficulty","_div","_dup1","_dup10","_dup11","_dup12","_dup13","_dup14","_dup15","_dup16","_dup2","_dup3","_dup4","_dup5","_dup6","_dup7","_dup8","_dup9","_eq","_exp","_extcodecopy","_extcodesize","_gas","_gaslimit","_gasprice","_gt","_invalid","_iszero","_jump","_jumpdest","_jumpi","_log0","_log1","_log2","_log3","_log4","_lt","_mload","_mod","_msize","_mstore","_mstore8","_mul","_mulmod","_not","_number","_or","_origin","_pc","_pop","_push0","_push1","_push10","_push11","_push12","_push13","_push14","_push15","_push16","_push17","_push18","_push19","_push2","_push20","_push21","_push22","_push23","_push24","_push25","_push26","_push27","_push28","_push29","_push3","_push30","_push31","_push32","_push4","_push5","_push6","_push7","_push8","_push9","_return","_returndatacopy","_returndatasize","_revert","_sdiv","_selfdestruct","_sgt","_sha3","_signextend","_sload","_slt","_smod","_sstore","_staticcall","_stop","_sub","_swap1","_swap10","_swap11","_swap12","_swap13","_swap14","_swap15","_swap16","_swap2","_swap3","_swap4","_swap5","_swap6","_swap7","_swap8","_swap9","_timestamp","_xor","borrow","borrow_mut","buffer","buffer","buffer_mut","decrement_mp","decrement_sp","emit","emit_op","emitn","from","gas","impl_opcodes","increment_gas","increment_mp","increment_sp","into","mp","new","sp","try_from","try_into","type_id","CodeGen","borrow","borrow_mut","control","emit_locals","emit_operators","env","finish","from","into","is_main","is_reachable","locals","masm","new","table","try_from","try_into","type_id","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i31_new","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_ref_as_non_null","visit_ref_func","visit_ref_is_null","visit_ref_null","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_try","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","Block","ControlStack","ControlStackFrame","ControlStackFrameType","Else","If","Loop","_result","_ty","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","from","from","from","into","into","into","new","original_pc_offset","pc_offset","pop","push","stack","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Func","Jump","JumpTable","Label","borrow","borrow","borrow_mut","borrow_mut","call","call_offset","clone","clone_into","default","from","from","func","into","into","jump","label","merge","patch","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_pc","LocalSlot","borrow","borrow_mut","from","inner","into","new","offset","size","to_ls_bytes","try_from","try_into","type_id","MacroAssembler","asm","borrow","borrow_mut","deref","deref_mut","from","into","memory_write","new","pc_offset","push","shift_pc","swap","try_from","try_into","type_id","BinaryReader","BufferOverflow","ControlStackUnderflow","DuplicateFunc","DuplicateJump","Error","FuncNotFound","InvalidPC","LabelMismatch","LocalIndexOutOfRange","MemoryOutOfBounds","Result","StackIndexOutOfRange","StackOverflow","StackUnderflow","borrow","borrow_mut","fmt","fmt","from","from","into","provide","source","to_string","try_from","try_into","type_id","ReachableState","ValidateThenVisit","borrow","borrow_mut","from","into","is_reachable","try_from","try_into","type_id","validate_then_visit","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i31_new","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_op_when_unreachable","visit_ref_as_non_null","visit_ref_func","visit_ref_is_null","visit_ref_null","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_try","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","impl_visit_operator"],"q":[[0,"zingen"],[62,"zingen::abi"],[70,"zingen::asm"],[231,"zingen::codegen"],[791,"zingen::control"],[834,"zingen::jump"],[864,"zingen::local"],[877,"zingen::masm"],[894,"zingen::result"],[922,"zingen::validator"],[1475,"zingen::visitor"]],"d":["Low level assembler implementation for EVM.","Maximum size of a evm bytecode in bytes.","Failed to parse WASM with binary reader.","The block control stack frame.","Code generation buffer.","Failed to push more data to the buffer.","The code generation abstraction.","The control stack.","Holds the necessary metadata to support the smission of …","The type of the control stack frame.","Failed to pop control stack frame.","Failed to register program counter to function index.","Failed to merge jump table.","The else control stack frame.","Codegen error","Failed to find function index in jump table.","The if control stack frame.","Failed to construct program counter for jump.","Jump table implementation.","Failed to patch jump destination.","Failed to define local variable since the index is out of …","A local slot.","Solidity’s implementation uses 16 slots for locals. ref: …","The loop control stack frame.","EVM MacroAssembler.","Failed to index data on memory.","Codegen result","Failed to index data on stack.","Failed to increment stack pointer.","Failed to decrement stack pointer.","","","The return values of the block.","The type of the control stack frame.","WASM ABI","Low level assembler implementation for EVM.","Low level assembler.","Buffer of the assembler.","Code generation implementation.","Data structures for control flow emission.","Control stack frames.","The function environment.","Function table.","Gas counter.","The type contained by this local slot.","If this function is the main function.","Jump table implementation.","Jump table.","WASM local slot.","The defined locals for a function.","MacroAssembler used by the code generation.","The macro assembler.","Memory pointer, maximum 32, 64-bit words.","The offset of this local slot.","The program counter offset at the beginning of if.","Patch program counter to buffer.","Codegen results","Stack pointer, maximum 12 items.","Stack frames for control flow.","The jump table.","Pre-visitor for parsing WASM.","This module is the central place for machine code emission.","The alignment mask for 32 bytes (32 - 1).","Output buffer","Get the offset of this type in the lowest significant …","WASM type size for the stack representation of EVM.","Alignment the size of this type to bytes32 for the stack …","","Size in bytes.","Convert self to the lowest significant bytes.","Low level assembler implementation for EVM.","EmitADD","EmitADDMOD","EmitADDRESS","EmitAND","EmitBALANCE","EmitBLOCKHASH","EmitBYTE","EmitCALL","EmitCALLCODE","EmitCALLDATACOPY","EmitCALLDATALOAD","EmitCALLDATASIZE","EmitCALLER","EmitCALLVALUE","EmitCODECOPY","EmitCODESIZE","EmitCOINBASE","EmitCREATE","EmitCREATE2","EmitDELEGATECALL","EmitDIFFICULTY","EmitDIV","EmitDUP1","EmitDUP10","EmitDUP11","EmitDUP12","EmitDUP13","EmitDUP14","EmitDUP15","EmitDUP16","EmitDUP2","EmitDUP3","EmitDUP4","EmitDUP5","EmitDUP6","EmitDUP7","EmitDUP8","EmitDUP9","EmitEQ","EmitEXP","EmitEXTCODECOPY","EmitEXTCODESIZE","EmitGAS","EmitGASLIMIT","EmitGASPRICE","EmitGT","EmitINVALID","EmitISZERO","EmitJUMP","EmitJUMPDEST","EmitJUMPI","EmitLOG0","EmitLOG1","EmitLOG2","EmitLOG3","EmitLOG4","EmitLT","EmitMLOAD","EmitMOD","EmitMSIZE","EmitMSTORE","EmitMSTORE8","EmitMUL","EmitMULMOD","EmitNOT","EmitNUMBER","EmitOR","EmitORIGIN","EmitPC","EmitPOP","EmitPUSH0","EmitPUSH1","EmitPUSH10","EmitPUSH11","EmitPUSH12","EmitPUSH13","EmitPUSH14","EmitPUSH15","EmitPUSH16","EmitPUSH17","EmitPUSH18","EmitPUSH19","EmitPUSH2","EmitPUSH20","EmitPUSH21","EmitPUSH22","EmitPUSH23","EmitPUSH24","EmitPUSH25","EmitPUSH26","EmitPUSH27","EmitPUSH28","EmitPUSH29","EmitPUSH3","EmitPUSH30","EmitPUSH31","EmitPUSH32","EmitPUSH4","EmitPUSH5","EmitPUSH6","EmitPUSH7","EmitPUSH8","EmitPUSH9","EmitRETURN","EmitRETURNDATACOPY","EmitRETURNDATASIZE","EmitREVERT","EmitSDIV","EmitSELFDESTRUCT","EmitSGT","EmitSHA3","EmitSIGNEXTEND","EmitSLOAD","EmitSLT","EmitSMOD","EmitSSTORE","EmitSTATICCALL","EmitSTOP","EmitSUB","EmitSWAP1","EmitSWAP10","EmitSWAP11","EmitSWAP12","EmitSWAP13","EmitSWAP14","EmitSWAP15","EmitSWAP16","EmitSWAP2","EmitSWAP3","EmitSWAP4","EmitSWAP5","EmitSWAP6","EmitSWAP7","EmitSWAP8","EmitSWAP9","EmitTIMESTAMP","EmitXOR","","","Buffer of the assembler.","Buffer of the assembler.","Mutable buffer of the assembler.","Decrement memory pointer","Decrement stack pointer","Emit a byte.","Emit a single opcode.","Emit n bytes.","Returns the argument unchanged.","Gas counter.","","Increment the gas counter.","Increment memory pointer","Increment stack pointer","Calls <code>U::from(self)</code>.","Memory pointer, maximum 32, 64-bit words.","New assembler","Stack pointer, maximum 12 items.","","","","The code generation abstraction.","","","Control stack frames.","Emit function locals","Emit function operators","The function environment.","Finish code generation.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","If this function is the main function.","","The defined locals for a function.","The macro assembler.","Create a new code generator.","The jump table.","","","","","","","","","","","","","","","","","","","","","Handle instruction end for different situationshe block control stack frame.","The control stack.","Holds the necessary metadata to support the smission of …","The type of the control stack frame.","The else control stack frame.","The if control stack frame.","The loop control stack frame.","The return values of the block.","The type of the control stack frame.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new control stack frame.","The program counter offset at the beginning of if.","Get the offset of the orginal program counter.","Pop a control stack frame.","Push a block control stack frame.","Stack frames for control flow.","","","","","","","","","","","","Jump to function.","Jump types","Jump table implementation.","Jump to the given label, the label here is the original …","","","","","Register a function.","Register program counter to the function table.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Function table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Jump table.","Register a label.","Merge two jump tables.","Patch program counter to all registered labels.","","","","","","","","Update program counter for all items.","A local slot.","","","Returns the argument unchanged.","The type contained by this local slot.","Calls <code>U::from(self)</code>.","Create a new local slot.","The offset of this local slot.","","Get the offset of this local slot in the lowest …","","","","EVM MacroAssembler.","Low level assembler.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Store data in memory.","New macro assembler.","Get the current program counter offset.","Place n bytes on stack.","Shift the program counter to the bottom or the top of the …","Swap memory by target index.","","","","Failed to parse WASM with binary reader.","Failed to push more data to the buffer.","Failed to pop control stack frame.","Failed to register program counter to function index.","Failed to merge jump table.","Codegen error","Failed to find function index in jump table.","Failed to construct program counter for jump.","Failed to patch jump destination.","Failed to define local variable since the index is out of …","Failed to index data on memory.","Codegen result","Failed to index data on stack.","Failed to increment stack pointer.","Failed to decrement stack pointer.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Trait to handle reachability state.","A pre-visitor that validates the WASM and then visits it.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if the current state of the program is …macro to define unsupported WebAssembly operators."],"i":[0,0,40,32,0,40,0,0,0,0,40,40,40,32,0,40,32,40,0,40,40,0,0,32,0,40,0,40,40,40,0,0,33,33,0,0,38,4,0,0,11,11,16,4,36,11,0,16,0,11,0,11,4,36,33,0,0,4,34,11,0,0,0,39,0,0,51,0,51,39,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,32,0,0,0,32,32,32,33,33,32,33,34,32,33,34,32,33,32,33,34,32,33,34,32,33,34,33,33,33,34,34,34,32,33,32,33,34,32,33,34,32,33,34,35,0,0,35,35,16,35,16,16,16,35,35,16,35,16,16,35,16,16,16,16,16,35,35,16,35,16,35,16,16,0,36,36,36,36,36,36,36,36,36,36,36,36,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,40,40,40,40,40,0,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,49,49,49,49,52,49,49,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2],[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,[[],2],0,[[],2],[[]],0,[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[[]],[[]],[4,[[6,[5]]]],0,[4,1],[[4,5],3],[[4,5],3],[[4,5]],[[4,7],3],[[4,[6,[5]]]],[[]],0,0,[[4,8]],[[4,5],3],[[4,5],3],[[]],0,[5,4],0,[[],9],[[],9],[[],10],0,[[]],[[]],0,[[11,12,[14,[13]]],3],[[11,15,[14,[13]]],3],0,[[11,16,17],[[3,[1]]]],[[]],[[]],0,[11,18],0,0,[[19,18],[[3,[11]]]],0,[[],9],[[],9],[[],10],[11],[[11,20]],[[11,21]],[[11,21]],[[11,21]],[[11,21]],[[11,22]],[[11,21]],[[11,21,21,5]],[[11,21]],[[11,21]],[11],[[11,21]],[[11,21]],[11],[[11,21]],[11],[11],[11],[11],[11],[[11,23]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[[11,21]],[[11,21]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[11],[[11,26]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[11],[[11,27]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[[11,5]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,5]],[11],[11],[11],[[11,[28,[5]]]],[11],[11],[11],[11],[11],[[11,20]],[[11,21]],[[11,21]],[[11,21]],[[11,20]],[[11,24]],[[11,24]],[[11,24]],[[11,21,21]],[[11,21]],[[11,21]],[[11,21,5]],[[11,21,21]],[[11,21,5]],[11],[11],[[11,21]],[11],[[11,29]],[[11,21]],[11],[[11,21]],[[11,21,21]],[[11,21]],[11],[[11,21,21]],[[11,21]],[[11,21]],[[11,21]],[[11,21,21]],[[11,21]],[[11,21]],[[11,21]],[[11,20]],[[11,30]],[11],[11],[11],[11],[11],[[11,31]],[[11,24]],[[11,24,5]],[[11,24]],[[11,24]],[[11,24]],[[11,24,5]],[[11,24]],[[11,24]],[[11,24]],[[11,24]],[[11,24,5]],[[11,24]],[[11,24]],[[11,24,5]],[[11,24]],[[11,24]],[[11,24]],[11],[11],[[11,24]],[[11,24,5]],[[11,24,5]],[[11,24,5]],[[11,24,5]],[11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[[]],[[]],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[32,17,20],33],0,[33,17],[34,[[3,[33]]]],[[34,33]],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[16,17,21],3],[[16,21,17],3],[35,35],[[]],[[],16],[[]],[[]],0,[[]],[[]],0,[[16,17,17],3],[[16,16,17],3],[[16,1],3],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[16,2],3],0,[[]],[[]],[[]],0,[[]],[[2,30],36],0,[36,2],[36,[[37,[[28,[5]]]]]],[[],9],[[],9],[[],10],0,0,[[]],[[]],[38],[38],[[]],[[]],[[38,39],3],[5,[[3,[38]]]],[38,17],[[38,[6,[5]]],3],[[38,5,18],3],[[38,5],3],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[40,41],42],[[40,41],42],[[]],[43,40],[[]],[44],[40,[[46,[45]]]],[[],47],[[],9],[[],9],[[],10],0,0,[[]],[[]],[[]],[[]],[[],18],[[],9],[[],9],[[],10],0,[[[49,[48]]]],[[[49,[48]],20]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],22]],[[[49,[48]],21]],[[[49,[48]],21,21,5]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],23]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],25]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]],26]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]],27]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],5]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],[28,[5]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],20]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],20]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],21,21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21,5]],[[[49,[48]],21,21]],[[[49,[48]],21,5]],[[[49,[48]]]],[50,18],[[[49,[48]]]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]],29]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]],21]],[[[49,[48]],21,21]],[[[49,[48]],21]],[[[49,[48]]]],[[[49,[48]],21,21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21,21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],21]],[[[49,[48]],20]],[[[49,[48]],30]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],31]],[[[49,[48]],24]],[[[49,[48]],24,5]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24,5]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24,5]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24,5]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]],24]],[[[49,[48]]]],[[[49,[48]]]],[[[49,[48]],24]],[[[49,[48]],24,5]],[[[49,[48]],24,5]],[[[49,[48]],24,5]],[[[49,[48]],24,5]],[[[49,[48]]]],0],"c":[],"p":[[6,"Buffer"],[15,"usize"],[6,"Result"],[3,"Assembler"],[15,"u8"],[15,"slice"],[4,"ShangHai"],[15,"u128"],[4,"Result"],[3,"TypeId"],[3,"CodeGen"],[3,"LocalsReader"],[3,"ValidatorResources"],[3,"FuncValidator"],[3,"OperatorsReader"],[3,"JumpTable"],[15,"u16"],[15,"bool"],[3,"FuncType"],[4,"BlockType"],[15,"u32"],[3,"BrTable"],[3,"Ieee32"],[3,"MemArg"],[3,"Ieee64"],[15,"i32"],[15,"i64"],[15,"array"],[4,"HeapType"],[4,"ValType"],[3,"V128"],[4,"ControlStackFrameType"],[3,"ControlStackFrame"],[3,"ControlStack"],[4,"Jump"],[3,"LocalSlot"],[3,"SmallVec"],[3,"MacroAssembler"],[8,"ToLSBytes"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"BinaryReaderError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[8,"VisitOperator"],[3,"ValidateThenVisit"],[4,"Operator"],[8,"Type"],[8,"ReachableState"]]},\
"zink":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"zinkc":{"doc":"Zink compiler.","t":"NNNNDENGMAAMDLLMLLLLLLLMLLLNNNNENGLLLLLLLLLLLLLLL","n":["Anyhow","BinaryReader","BufferOverflow","Codegen","Compiler","Error","InvalidFunctionSignature","Result","buffer","compiler","result","table","Compiler","borrow","borrow_mut","buffer","compile","compile_func","default","emit_buffer","finish","from","into","table","try_from","try_into","type_id","Anyhow","BinaryReader","BufferOverflow","Codegen","Error","InvalidFunctionSignature","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id"],"q":[[0,"zinkc"],[12,"zinkc::compiler"],[27,"zinkc::result"]],"d":["Failed to do sth.","Failed to parse WASM with binary reader.","Failed to push more data to the buffer.","Failed in code generation.","Zink Compiler","Zinkc errors","Failed parse function signature.","Zinkc result","","Zink compiler","Zinkc result","","Zink Compiler","","","","Compile wasm moudle to evm bytecode.","Compile WASM function.","","Emit buffer to the inner buffer.","Finish compilation.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Failed to do sth.","Failed to parse WASM with binary reader.","Failed to push more data to the buffer.","Failed in code generation.","Zinkc errors","Failed parse function signature.","Zinkc result","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[13,13,13,13,0,0,13,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,13,13,13,0,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[[1,[3,[2]]],[[5,[4]]]],[[1,6,[8,[7]],9],5],[[],1],[[1,6,10],5],[1,[[5,[4]]]],[[]],[[]],0,[[],11],[[],11],[[],12],0,0,0,0,0,0,0,[[]],[[]],[[13,14],15],[[13,14],15],[[]],[16,13],[17,13],[18,13],[[]],[19],[13,[[21,[20]]]],[[],22],[[],11],[[],11],[[],12]],"c":[],"p":[[3,"Compiler"],[15,"u8"],[15,"slice"],[6,"Buffer"],[6,"Result"],[15,"u32"],[3,"ValidatorResources"],[3,"FuncToValidate"],[3,"FunctionBody"],[3,"CodeGen"],[4,"Result"],[3,"TypeId"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"BinaryReaderError"],[4,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"]]},\
"zinkup":{"doc":"Zink CLI","t":"IDAMMMMKLAKDLLLLLLLLLLLMLMMMLLLLLLNCENCCLLLLLLLLALLLANNENNGLLLLLLLLLLLLLLLLLLDLLLLLLMLLMLMMLLMLLL","n":["App","Build","build","input","out_dir","output","release","run","start","utils","verbose","Build","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","out_dir","output","release","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Debug","Error","Profile","Release","Result","WasmBuilder","as_ref","borrow","borrow_mut","eq","equivalent","from","from","into","result","try_from","try_into","type_id","wasm","Anyhow","CargoMetadata","Error","Etc","Io","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","header","in_current_span","into","provide","source","to_string","try_from","try_into","type_id","WasmBuilder","borrow","borrow_mut","build","compile","from","into","metadata","new","out_dir","out_dir","output","output","package","post","profile","profile","try_from","try_into","type_id"],"q":[[0,"zinkup"],[11,"zinkup::build"],[34,"zinkup::utils"],[53,"zinkup::utils::result"],[77,"zinkup::utils::wasm"]],"d":["Shared application interface.","Build contract","Zinkc cli","The path to the wasm file or the rust project directory. ( …","Write output to compiler-chosen filename in ","Write output to ","Optimize with default optimizations","Run application.","Start application.","","Verbose logging level.","Build contract","","","","","","","","Returns the argument unchanged.","","","","The path to the wasm file or the rust project directory. ( …","Calls <code>U::from(self)</code>.","Write output to compiler-chosen filename in ","Write output to ","Optimize with default optimizations","Run build","","","","","","","","Compliation profile.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Zinkup result","","","","WASM Builder","","","Zinkc errors","","","Zinkc result","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","WASM Builder","","","Run the WASM Builder.","Compile project to WASM.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new WASM Builder.","Set the output directory.","","Set the output file.","","","Post processing the built WASM files.","Set the profile.","","","",""],"i":[0,0,0,6,6,6,6,32,32,0,32,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,15,0,0,15,0,0,15,15,15,15,15,15,15,15,0,15,15,15,0,18,18,0,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],3],0,[[],4],0,[5,5],[5,5],[[]],[[]],[[],5],[[],5],[[6,7],8],[[]],[9,[[2,[6,10]]]],[9,[[2,[6,10]]]],[[],[[12,[11]]]],0,[[]],0,0,0,[6,13],[[],2],[[],2],[[],14],[[6,9],[[2,[10]]]],[[6,9],[[2,[10]]]],0,0,0,0,0,0,[15,16],[[]],[[]],[[15,15],17],[[],17],[16,15],[[]],[[]],0,[[],2],[[],2],[[],14],0,0,0,0,0,0,0,[[]],[[]],[[18,7],8],[[18,7],8],[19,18],[1,18],[[]],[20,18],[21,18],[[[0,[22,23,24]]],[[25,[[0,[22,23,24]]]]]],[[]],[[]],[26],[18,[[12,[27]]]],[[],28],[[],2],[[],2],[[],14],0,[[]],[[]],[29,[[2,[18]]]],[29,[[2,[18]]]],[[]],[[]],0,[[[31,[30]]],[[2,[29,18]]]],[[29,[31,[30]]],29],0,[[29,[31,[30]]],29],0,0,[29,[[2,[18]]]],[[29,[31,[15]]],29],0,[[],2],[[],2],[[],14]],"c":[],"p":[[3,"Error"],[4,"Result"],[6,"Result"],[15,"u8"],[3,"Command"],[3,"Build"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"],[4,"Profile"],[15,"str"],[15,"bool"],[4,"Error"],[4,"Error"],[3,"Error"],[4,"Error"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"Demand"],[8,"Error"],[3,"String"],[3,"WasmBuilder"],[3,"PathBuf"],[8,"Into"],[8,"App"]]},\
"zint":{"doc":"Zink testing framework.","t":"CADLLLLMMLLLLLL","n":["EVM","evm","EVM","borrow","borrow_mut","execute","from","host","interpreter","into","new","run","try_from","try_into","type_id"],"q":[[0,"zint"],[2,"zint::evm"]],"d":["","Re-export REVM intepreter for testing usages.","EVM interpreter.","","","Execute a contract.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new EVM instance.","Run a contract.","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],[1],[[]],0,0,[[]],[[[3,[2]],[3,[2]]],1],[[[3,[2]],[3,[2]]]],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"EVM"],[15,"u8"],[15,"slice"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

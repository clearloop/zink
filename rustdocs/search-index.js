var searchIndex = new Map(JSON.parse('[["elko",{"t":"FFFONNNNCNNOONNNNNOONOCOOOONNNNNNCFNNNNNNONNNNNONOONNNNNNSSFSNNNNNNNNNNNNNOONNNNNNPPPGPPFPIFOOCOOOOOCCFFFFONNNNNNNNNNNNNNNNNNNNONNNNONNNNONNNNNNNNNNNNONOONNNNNNNNNNNNNNNNNNNNOOPPPGPPPINNNNNNNNNNNNNNNNNFNNNNNNONNONOONNNNNN","n":["Build","Compile","New","abi","augment_args","augment_args_for_update","borrow","borrow_mut","build","command","command_for_update","config","dispatcher","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","","into","name","new","out_dir","output","","path","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","Build","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","config","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","out_dir","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","ADDITION","NAME","New","README","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","name","","path","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Anyhow","CargoMetadata","Err","Error","Etc","Io","Manifest","Ok","Result","WasmBuilder","dependencies","lib","manifest","metadata","out_dir","output","package","","result","wasm","Dependencies","Lib","Manifest","Package","authors","borrow","","","","borrow_mut","","","","clone","","","","clone_into","","","","clone_to_uninit","","","","crate_type","default","","","","dependencies","deserialize","","","","edition","fmt","","","","from","","","","into","","","","lib","name","","package","serialize","","","","to_owned","","","","try_from","","","","try_into","","","","type_id","","","","version","zink","Anyhow","CargoMetadata","Err","Error","Etc","Io","Ok","Result","borrow","borrow_mut","fmt","","from","","","","","header","in_current_span","into","source","to_string","try_from","try_into","type_id","WasmBuilder","borrow","borrow_mut","build","compile","from","into","metadata","new","out_dir","","output","","package","post","try_from","try_into","type_id","with_out_dir","with_output"],"q":[[0,"elko"],[34,"elko::build"],[57,"elko::new"],[82,"elko::utils"],[102,"elko::utils::manifest"],[176,"elko::utils::result"],[201,"elko::utils::wasm"],[221,"clap_builder::builder::command"],[222,"zinkc::cli"],[223,"core::fmt"],[224,"core::result"],[225,"clap_builder::parser::matches::arg_matches"],[226,"clap_builder::error"],[227,"clap_builder::util::id"],[228,"core::option"],[229,"anyhow"],[230,"core::any"],[231,"clap_builder"],[232,"alloc::string"],[233,"serde::de"],[234,"serde::ser"],[235,"std::io::error"],[236,"etc::error"],[237,"cargo_metadata::errors"],[238,"color_eyre::section"],[239,"core::marker"],[240,"core::error"],[241,"std::path"],[242,"core::convert"]],"i":"```h0000`00An111111011Bf`1120222222``1111111111111111111111````000000000000000000000Ch0Dl`11`0``C`0`Dj0001``````Bj0BlBn421042104210421041210442104221042104210444242104210421042104210420665`665`66666666666666666`3333333333333333333","f":"````{bb}0{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}`{{}b}0``{{{d{h}}{d{fj}}}{{A`{ln}}}}{cc{}}{{{d{Ab}}}{{A`{hAd}}}}{{{d{fAb}}}{{A`{hAd}}}}{{}{{Ah{Af}}}}``{{}c{}}``````{{{d{h}}}{{A`{lAj}}}}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fh}}{d{Ab}}}{{A`{lAd}}}}{{{d{fh}}{d{fAb}}}{{A`{lAd}}}}``??>=<<`{{{d{An}}{d{fj}}}B`};{{{d{Ab}}}{{A`{AnBb}}}}{{{d{fAb}}}{{A`{AnBb}}}}:`9``{{{d{An}}}{{Bd{l}}}}876{{{d{fAn}}{d{Ab}}}{{A`{lBb}}}}{{{d{fAn}}{d{fAb}}}{{A`{lBb}}}}````{bb}0{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{}b}0{{{d{Bf}}{d{fj}}}B`}{cc{}}{{{d{Ab}}}{{A`{BfBb}}}}{{{d{fAb}}}{{A`{BfBb}}}}{{}{{Ah{Af}}}}{{}c{}}{{{d{Bf}}}{{Bd{Bh}}}}``{{{d{Bf}}}{{Bd{l}}}}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fBf}}{d{Ab}}}{{A`{lBb}}}}{{{d{fBf}}{d{fAb}}}{{A`{lBb}}}}`````````````````````````????>>>>{{{d{Bj}}}Bj}{{{d{Bl}}}Bl}{{{d{Bn}}}Bn}{{{d{C`}}}C`}{{d{d{fc}}}l{}}000{dl}000`{{}Bj}{{}Bl}{{}Bn}{{}C`}`{c{{A`{Bj}}}Cb}{c{{A`{Bl}}}Cb}{c{{A`{Bn}}}Cb}{c{{A`{C`}}}Cb}`{{{d{Bj}}{d{fj}}}B`}{{{d{Bl}}{d{fj}}}B`}{{{d{Bn}}{d{fj}}}B`}{{{d{C`}}{d{fj}}}B`}{cc{}}000{{}c{}}000`{{{d{fC`}}{d{Cd}}}{{d{fC`}}}}``{{{d{Bj}}c}A`Cf}{{{d{Bl}}c}A`Cf}{{{d{Bn}}c}A`Cf}{{{d{C`}}c}A`Cf}{dc{}}000{c{{A`{e}}}{}{}}000{{}{{A`{c}}}{}}000{dAl}000``````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ch}}{d{fj}}}B`}0={CjCh}{ClCh}{CnCh}{AjCh}{c{{D`{ce}}}{DbDdDf}{}}{{}}{{}c{}}{{{d{Ch}}}{{Ah{{d{Dh}}}}}}{dBh}>=<`;:{{{d{Dj}}}{{Dl{l}}}}0{cc{}}4`{c{{Dl{Dj}}}{{E`{Dn}}}}{{{d{Dj}}}{{Dl{Dn}}}}`0``3{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fDj}}c}{{d{fDj}}}{{E`{Dn}}}}0","D":"K`","p":[[5,"Command",221],[1,"reference",null,null,1],[0,"mut"],[5,"Compile",0,222],[5,"Formatter",223],[1,"unit"],[5,"Error",223],[6,"Result",224,null,1],[5,"ArgMatches",225],[5,"Error",226],[5,"Id",227],[6,"Option",228,null,1],[5,"Error",229],[5,"TypeId",230],[5,"Build",34],[8,"Result",223],[8,"Error",231],[8,"Result",229],[5,"New",57],[5,"String",232],[5,"Package",102],[5,"Lib",102],[5,"Dependencies",102],[5,"Manifest",102],[10,"Deserializer",233],[1,"str"],[10,"Serializer",234],[6,"Error",176],[5,"Error",235],[6,"Error",236],[6,"Error",237],[5,"IndentedSection",238],[10,"Display",223],[10,"Send",239],[10,"Sync",239],[10,"Error",240],[5,"WasmBuilder",201],[8,"Result",176],[5,"PathBuf",241],[10,"Into",242]],"r":[[0,34],[1,222],[2,57],[85,176],[88,102],[90,176],[91,201]],"b":[[186,"impl-Display-for-Error"],[187,"impl-Debug-for-Error"],[189,"impl-From%3CError%3E-for-Error"],[190,"impl-From%3CError%3E-for-Error"],[191,"impl-From%3CError%3E-for-Error"],[192,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIUAHQAEAAQACgABAA0AAQAQAAIAFAAAABoAAQAdAAQAJAAFACsAAAAtAAIANQAGAD0ABwBGAAIATAAAAE4ABABgAAMAbAATAIEAAwCGAAMAiwADAJsAEwC5AAMAvgAFAMUABADLAAEA0QAAANQAAADWAAEA2QACAA==","P":[[6,"T"],[9,""],[14,"T"],[15,""],[20,"U"],[27,""],[28,"U,T"],[29,"U"],[30,""],[37,"T"],[39,""],[43,"T"],[44,""],[48,"U"],[51,""],[52,"U,T"],[53,"U"],[54,""],[63,"T"],[65,""],[68,"T"],[69,""],[72,"U"],[73,""],[77,"U,T"],[78,"U"],[79,""],[107,"T"],[115,""],[119,"T"],[123,""],[133,"__D"],[138,""],[142,"T"],[146,"U"],[151,""],[154,"__S"],[158,"T"],[162,"U,T"],[166,"U"],[170,""],[184,"T"],[186,""],[188,"T"],[189,""],[193,"C,T"],[194,""],[195,"U"],[196,""],[198,"U,T"],[199,"U"],[200,""],[202,"T"],[204,""],[206,"T"],[207,"U"],[209,""],[210,""],[216,"U,T"],[217,"U"],[218,""],[219,""]]}],["evm_opcodes",{"t":"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPKPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPGPNNNNNNNNNNNNNNNNQNNMMNNQNNCMMMNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNNNNN","n":["ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","Berlin","BlockInformation","Byzantium","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","ComparisonBitwiseLogic","Constantinople","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Data","Duplication","EQ","EXP","EXTCODECOPY","EXTCODESIZE","EnvironmentalInformation","Exchange","Frontier","GAS","GASLIMIT","GASPRICE","GT","Group","INVALID","ISZERO","Istanbul","JUMP","JUMPDEST","JUMPI","KECCAK256","LOG0","LOG1","LOG2","LOG3","LOG4","LT","Logging","London","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","OpCode","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","Push","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","Sha3","ShangHai","Shanghai","StackMemoryStorageFlow","StopArithmetic","System","TIMESTAMP","Upgrade","XOR","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","cmp","","eq","","fmt","","for_each_shanghai_operator","from","","gas","group","into","","opcodes","partial_cmp","","shanghai","since","stack_in","stack_out","to_owned","","try_from","","try_into","","type_id","","ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Data","EQ","EXP","EXTCODECOPY","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","KECCAK256","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","ShangHai","TIMESTAMP","XOR","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","eq","fmt","from","","from_str","gas","group","into","partial_cmp","since","stack_in","stack_out","to_owned","try_from","try_into","type_id"],"q":[[0,"evm_opcodes"],[201,"evm_opcodes::shanghai"],[365,"core::cmp"],[366,"core::fmt"],[367,"core::option"],[368,"core::result"],[369,"core::any"]],"i":"An000000hf12222222222220122222222222222222222022220012222`22122222222220122222222222`22222222222222222222222222222222222022222222222222222222222222222222220`10002`20101010101010101`01Ad012`12`000121212123333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333`333333333333333333333333","f":"```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}0{{{b{f}}{b{f}}}l}{{{b{h}}{b{h}}}l}{{{b{f}}{b{f}}}n}{{{b{h}}{b{h}}}n}{{{b{f}}{b{dA`}}}Ab}{{{b{h}}{b{dA`}}}Ab}`{cc{}}0{{{b{Ad}}}Af}{{{b{Ad}}}f}{{}c{}}0`{{{b{f}}{b{f}}}{{Ah{l}}}}{{{b{h}}{b{h}}}{{Ah{l}}}}`{{{b{Ad}}}h}55{bc{}}0{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{bAl}0``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{An}}}An}{{b{b{dc}}}j{}}{bj}{{{b{An}}{b{An}}}l}{{{b{An}}{b{An}}}n}{{{b{An}}{b{dA`}}}Ab}{B`An}{cc{}}{{{b{Bb}}}{{Aj{Anc}}}{}}{{{b{An}}}Af}{{{b{An}}}f}{{}c{}}{{{b{An}}{b{An}}}{{Ah{l}}}}{{{b{An}}}h}44{bc{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}","D":"BH`","p":[[1,"reference",null,null,1],[0,"mut"],[6,"Group",0],[6,"Upgrade",0],[1,"unit"],[6,"Ordering",365],[1,"bool"],[5,"Formatter",366],[8,"Result",366],[10,"OpCode",0],[1,"u16"],[6,"Option",367,null,1],[6,"Result",368,null,1],[5,"TypeId",369],[6,"ShangHai",201],[1,"u8"],[1,"str"]],"r":[[155,201]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC0ABgCkAA8AvAABAMIABwBYAQgAYgECAGYBBwA=","P":[[163,"T"],[167,""],[169,"T"],[171,""],[180,"T"],[182,""],[184,"U"],[187,""],[193,"T"],[195,"U,T"],[197,"U"],[199,""],[343,"T"],[345,""],[346,"T"],[347,""],[352,"T"],[353,"FromStr::Err"],[354,""],[356,"U"],[357,""],[361,"T"],[362,"U,T"],[363,"U"],[364,""]]}],["sol_abi",{"t":"FPFPPPPPPGPPPPPPPCCOOOOOOFPPGNNNNNNNNNNNNNNNNNNNNNNNONNOONNNNNNNNNONNPFPPPPPPGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONN","n":["Abi","Address","Arg","Bool","Bytes","Int16","Int32","Int64","Int8","Param","String","UInt16","UInt256","UInt32","UInt64","UInt8","Unknown","abi","arg","inputs","name","","outputs","ty","","Abi","Constructor","Function","Type","as_ref","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","deserialize","","fmt","","","from","","","","from_str","inputs","into","","name","outputs","serialize","","to_owned","","to_string","try_from","","try_into","","ty","type_id","","Address","Arg","Bool","Bytes","Int16","Int32","Int64","Int8","Param","String","UInt16","UInt256","UInt32","UInt64","UInt8","Unknown","as_ref","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","deserialize","","fmt","","","from","","","","from_str","into","","name","serialize","","to_owned","","to_string","try_from","","try_into","","ty","type_id",""],"q":[[0,"sol_abi"],[25,"sol_abi::abi"],[69,"sol_abi::arg"],[123,"core::result"],[124,"serde::de"],[125,"core::fmt"],[126,"syn::item"],[127,"serde::ser"],[128,"alloc::string"],[129,"core::any"],[130,"syn::ty"],[131,"alloc::boxed"]],"i":"`An`000000`0000000``j0B`110`b0`02020202020202020022000220222020020202203`333333`333333331313131313131313313333131131331313113","f":"`````````````````````````````{{{d{b}}}{{d{f}}}}{d{{d{c}}}{}}0{{{d{h}}}{{d{hc}}}{}}0{{{d{j}}}j}{{{d{b}}}b}{{d{d{hc}}}l{}}0{dl}0{{}j}{{}b}{c{{n{j}}}A`}{c{{n{b}}}A`}{{{d{j}}{d{hAb}}}Ad}{{{d{b}}{d{hAb}}}Ad}0{cc{}}{{{d{Af}}}j}1{{{d{f}}}b}{{{d{f}}}{{n{bc}}}{}}`{{}c{}}0``{{{d{j}}c}nAh}{{{d{b}}c}nAh}{dc{}}0{dAj}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0`{dAl}0````````````````{{{d{An}}}{{d{f}}}}{d{{d{c}}}{}}0{{{d{h}}}{{d{hc}}}{}}0{{{d{B`}}}B`}{{{d{An}}}An}{{d{d{hc}}}l{}}0{dl}0{{}B`}{{}An}{c{{n{B`}}}A`}{c{{n{An}}}A`}{{{d{B`}}{d{hAb}}}Ad}{{{d{An}}{d{hAb}}}Ad}0{cc{}}0{{{d{{Bd{Bb}}}}}An}{{{d{f}}}An}{{{d{f}}}{{n{Anc}}}{}}{{}c{}}0`{{{d{B`}}c}nAh}{{{d{An}}c}nAh}{dc{}}0{dAj}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0`{dAl}0","D":"Gh","p":[[6,"Type",25],[1,"reference",null,null,1],[1,"str"],[0,"mut"],[5,"Abi",25],[1,"unit"],[6,"Result",123,null,1],[10,"Deserializer",124],[5,"Formatter",125],[8,"Result",125],[5,"Signature",126],[10,"Serializer",127],[5,"String",128],[5,"TypeId",129],[6,"Param",69],[5,"Arg",69],[6,"Type",130],[5,"Box",131,null,1]],"r":[[0,25],[2,69],[9,69]],"b":[[45,"impl-Debug-for-Type"],[46,"impl-Display-for-Type"],[101,"impl-Display-for-Param"],[102,"impl-Debug-for-Param"],[105,"impl-From%3C%26Box%3CType%3E%3E-for-Param"],[106,"impl-From%3C%26str%3E-for-Param"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAD8ACQAeABEAMQAAADMAAQA6AAgARAABAFYAEQBqAAIAcAAIAHoAAQA=","P":[[30,"T"],[34,""],[36,"T"],[38,""],[42,"__D"],[44,""],[47,"T"],[48,""],[49,"T"],[50,""],[51,"FromStr::Err"],[53,"U"],[57,"__S"],[59,"T"],[61,""],[62,"U,T"],[64,"U"],[67,""],[86,"T"],[90,""],[92,"T"],[94,""],[98,"__D"],[100,""],[103,"T"],[105,""],[107,"FromStr::Err"],[108,"U"],[111,"__S"],[113,"T"],[115,""],[116,"U,T"],[118,"U"],[121,""]]}],["zabi",{"t":"FCECCFNNNNNNNNNNNNNNNNCNNNNNNNNNNNPGPPPINNNNNNNNNNNNNHH","n":["Abi","abi","keccak256","result","selector","Abi","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deref","deref_mut","deserialize","fmt","","from","","from_bytes","from_hex","from_str","hex_impl","into","selector","serialize","signature","to_bytes","to_hex","to_owned","to_string","try_from","try_into","type_id","Err","Error","Hex","Ok","Postcard","Result","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","keccak256","parse"],"q":[[0,"zabi"],[5,"zabi::abi"],[34,"zabi::result"],[53,"zabi::selector"],[55,"core::result"],[56,"serde::de"],[57,"core::fmt"],[58,"syn::item"],[59,"postcard::error"],[60,"core::convert"],[61,"serde::ser"],[62,"alloc::string"],[63,"alloc::vec"],[64,"core::any"],[65,"hex::error"],[66,"core::error"],[67,"core::option"]],"i":"``````f000000000000000`00000000000Al`Bj10`0000000000000``","f":"``````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{}f}{{{b{f}}}{{b{c}}}{}}{{{b{df}}}{{b{dc}}}{}}{c{{j{f}}}l}{{{b{f}}{b{dn}}}A`}0{cc{}}{{{b{Ab}}}f}{c{{Ad{f}}}{{Aj{{Ah{Af}}}}}}{c{{Al{f}}}{{Aj{An}}}}{{{b{An}}}{{Al{f}}}}`{{}c{}}{{{b{f}}}{{B`{Af}}}}{{{b{f}}c}jBb}{{{b{f}}}Bd}{{{b{f}}}{{Ad{{Bf{Af}}}}}}{{{b{f}}}{{Al{Bd}}}}{bc{}}{bBd}{c{{j{e}}}{}{}}{{}{{j{c}}}{}}{bBh}``````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Bj}}{b{dn}}}A`}0{BlBj}{BnBj}{cc{}}{{}c{}}{{{b{Bj}}}{{Cb{{b{C`}}}}}};:98{{{b{{Ah{Af}}}}}{{B`{Af}}}}0","D":"C`","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Abi",5],[1,"unit"],[6,"Result",55,null,1],[10,"Deserializer",56],[5,"Formatter",57],[8,"Result",57],[5,"Signature",58],[8,"Result",59],[1,"u8"],[1,"slice"],[10,"AsRef",60],[8,"Result",34],[1,"str"],[1,"array"],[10,"Serializer",61],[5,"String",62],[5,"Vec",63],[5,"TypeId",64],[6,"Error",34],[6,"Error",59],[6,"FromHexError",65],[10,"Error",66],[6,"Option",67,null,1]],"r":[[0,5],[2,53]],"b":[[15,"impl-Display-for-Abi"],[16,"impl-Debug-for-Abi"],[42,"impl-Debug-for-Error"],[43,"impl-Display-for-Error"],[44,"impl-From%3CError%3E-for-Error"],[45,"impl-From%3CFromHexError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ACAADAAAABwAKABMAAAAWAAEAGgAAAB4ABAApAAUAMQAEAA==","P":[[6,"T"],[8,""],[9,"T"],[10,""],[12,"Deref::Target"],[14,"__D"],[15,""],[17,"T"],[18,""],[19,""],[21,""],[23,"U"],[24,""],[25,"__S"],[26,""],[29,"T"],[30,""],[31,"U,T"],[32,"U"],[33,""],[40,"T"],[42,""],[46,"T"],[47,"U"],[48,""],[50,"U,T"],[51,"U"],[52,""]]}],["zingen",{"t":"PPFSPPIPFFFFGPPFPPPPGPPPFPPPIPPPPPPPPPFPPPFFPFPPIPPPPPPOOCOOCOOOCCOOOOOOOOOOCOCOCOOOOOOCOOOOOOOOOCCCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNOQNNNNOONNNNFNNNNNONNNNNNNNEEEEEECCCCFFNNNNONNNNNNNNNNNNNNNNNONNNNNONNOONNNNNNNNNFINNNNNNNNNNONNNNNNFOONNNONNONNONNNFNNNNNNNNNNNNNNNNNNNNOONNNNONNNONNNNOONONNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNONONNNNNNNNNONNNPPGEPPNNNNNNNNNNNNNNCCCNNNNHHFNNNNNNNONNNNNONONNNNNNNNNNNNNNNFGFPPNNNNNNNNNNNNNNNNNNNOONNNNNNNNNONNNNNNNONNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNCNNNNCCNNNNCNNNCNNNNONNCNONCNNNNNNNNPPPPPPPPPGPPPPPPPPPPPPPPPPPPPIPPPPPPNNNNNNNNNNNNNNFNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCQCCQPFPFPFFFFGFPPRPFKKPCNONNNNNNNNNNNNNNNNNNNNNNNNNCONNNNNNNNNNNNNONNNNNNNNNNCOCQOONNNNNNNNNNNNNNMOMNNNNNNNNNNNNNNNNNNNNONSRKKNNQMMFNNNNNNNNNNNNNNNNFFNONNNNNNNNNNNNNNNNNNNNNOPGPPGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Anyhow","Assembler","BUFFER_LIMIT","BinaryReader","Block","Buffer","BufferOverflow","Code","Constructor","ControlStack","ControlStackFrame","ControlStackFrameType","ControlStackUnderflow","DataNotFound","Dispatcher","DuplicateFunc","DuplicateJump","Else","Err","Error","ExtFuncNotFound","FuncNotFound","FuncNotImported","Function","HostFuncNotFound","If","ImportedFuncNotFound","InitStorage","InvalidDataOffset","InvalidDataSize","InvalidDepth","InvalidElseBlock","InvalidFunctionSignature","InvalidLocalIndex","InvalidMP","InvalidPC","InvalidSelector","JumpTable","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","LocalSlot","Locals","Loop","MacroAssembler","MemoryOutOfBounds","Ok","Result","SelectorNotFound","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","UnsupportedHostFunc","abi","","asm","","","backtrace","","buffer","code","codegen","control","","env","","func","funcs","","gas","inner","","is_main","jump","","local","locals","masm","","","mp","offset","original_pc_offset","original_sp","result","","sp","","stack","table","","ty","","","validator","visitor","wasm","Assembler","_add","_addmod","_address","_and","_balance","_blockhash","_byte","_call","_callcode","_calldatacopy","_calldataload","_calldatasize","_caller","_callvalue","_codecopy","_codesize","_coinbase","_create","_create2","_delegatecall","_difficulty","_div","_dup1","_dup10","_dup11","_dup12","_dup13","_dup14","_dup15","_dup16","_dup2","_dup3","_dup4","_dup5","_dup6","_dup7","_dup8","_dup9","_eq","_exp","_extcodecopy","_extcodesize","_gas","_gaslimit","_gasprice","_gt","_invalid","_iszero","_jump","_jumpdest","_jumpi","_keccak256","_log0","_log1","_log2","_log3","_log4","_lt","_mload","_mod","_msize","_mstore","_mstore8","_mul","_mulmod","_not","_number","_or","_origin","_pc","_pop","_push0","_push1","_push10","_push11","_push12","_push13","_push14","_push15","_push16","_push17","_push18","_push19","_push2","_push20","_push21","_push22","_push23","_push24","_push25","_push26","_push27","_push28","_push29","_push3","_push30","_push31","_push32","_push4","_push5","_push6","_push7","_push8","_push9","_return","_returndatacopy","_returndatasize","_revert","_sar","_sdiv","_selfdestruct","_sgt","_shl","_shr","_signextend","_sload","_slt","_smod","_sstore","_staticcall","_stop","_sub","_swap1","_swap10","_swap11","_swap12","_swap13","_swap14","_swap15","_swap16","_swap2","_swap3","_swap4","_swap5","_swap6","_swap7","_swap8","_swap9","_timestamp","_xor","borrow","borrow_mut","buffer","","buffer_mut","clone","clone_into","clone_to_uninit","decrement_mp","decrement_sp","default","emit","emit_op","emitn","fmt","from","gas","impl_opcodes","increment_gas","increment_mp","increment_sp","into","mp","sp","to_owned","try_from","try_into","type_id","Backtrace","borrow","borrow_mut","default","fmt","from","instrs","into","last","pop","popn","push","try_from","try_into","type_id","Code","Constructor","Dispatcher","ExtFunc","Function","InitStorage","code","constructor","dispatcher","function","Code","ExtFunc","borrow","","borrow_mut","","bytecode","clone","","clone_into","","clone_to_uninit","","default","eq","equivalent","","","finish","fmt","","from","","funcs","","hash","into","","new","offset","","offset_of","shift","stack_in","stack_out","to_owned","","try_add_func","try_from","","try_into","","type_id","","Constructor","InitStorage","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","finish","fmt","from","into","masm","runtime_bytcode_offset","storage","to_owned","try_from","try_into","type_id","Dispatcher","abi","asm","borrow","borrow_mut","emit_selector","env","finish","from","funcs","into","new","table","try_from","try_into","type_id","Function","_block","_br","_br_if","_br_table","_call","_call_indirect","_else","_end","_global_get","_global_set","_if","_local_get","_local_get_calldata","_local_get_var","_local_set","_local_tee","_loop","_nop","_select","_unreachable","abi","backtrace","borrow","borrow_mut","call_imported","call_internal","control","data","emit_locals","emit_operators","env","finish","from","handle_frame_popping","into","is_main","locals","log","masm","new","revert","table","try_from","try_into","ty","type_id","visit_any_convert_extern","visit_array_copy","visit_array_fill","visit_array_get","visit_array_get_s","visit_array_get_u","visit_array_init_data","visit_array_init_elem","visit_array_len","visit_array_new","visit_array_new_data","visit_array_new_default","visit_array_new_elem","visit_array_new_fixed","visit_array_set","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_cast","visit_br_on_cast_fail","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_extern_convert_any","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_ref_as_non_null","visit_ref_cast_non_null","visit_ref_cast_nullable","visit_ref_eq","visit_ref_func","visit_ref_i31","visit_ref_is_null","visit_ref_null","visit_ref_test_non_null","visit_ref_test_nullable","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_struct_get","visit_struct_get_s","visit_struct_get_u","visit_struct_new","visit_struct_new_default","visit_struct_set","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_throw_ref","visit_try","visit_try_table","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","Block","ControlStack","ControlStackFrame","ControlStackFrameType","Else","If","Loop","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","default","depth","eq","equivalent","","","fmt","from","","","into","","","label_from_depth","mark_else","new","original_pc_offset","original_sp","pc_offset","pop","push","result","","ret_ty","stack","to_owned","","try_from","","","try_into","","","ty","","type_id","","","ExtFunc","Func","Jump","JumpTable","Label","Offset","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","equivalent","","","fmt","from","into","is_label","is_offset","pc","relocate","table","to_owned","try_from","try_into","type_id","offset","pc","JumpTable","borrow","borrow_mut","call","call_offset","clone","clone_into","clone_to_uninit","code","code_offset","default","ext","fmt","from","func","into","jump","label","merge","offset","relocate","shift_func_target","shift_label_pc","shift_label_target","shift_pc","shift_target","shift_targets","target","to_owned","try_from","try_into","type_id","LocalSlot","LocalSlotType","Locals","Parameter","Variable","borrow","","","borrow_mut","","","default","eq","equivalent","","","fmt","","","from","","","get","get_mut","inner","","into","","","is_empty","len","new","offset_of","push","size","sp","try_from","","","try_into","","","ty","","type_id","","","val_ty","MacroAssembler","MemoryInfo","_abs","_ceil","_clz","_convert_i32_s","_convert_i32_u","_convert_i64_s","_convert_i64_u","_copysign","_ctz","_drop","_eqz","_f32_const","_f32_demote_f64","_f32_reinterpret_i32","_f64_const","_f64_promote_f32","_f64_reinterpret_i64","_floor","_ge","_gt","_i32_const","_i32_reinterpret_f32","_i32_wrap_i64","_i64_const","_i64_extend_i32_s","_i64_extend_i32_u","_i64_reinterpret_f64","_le","_load","_load16","_load32","_load8","_lt","_max","_memory_grow","_memory_size","_min","_ne","_nearest","_neg","_popcnt","_return","_rotl","_rotr","_sge","_sgt","_sle","_sload","_slt","_sqrt","_sstore","_store","_store16","_store32","_store8","_sub","_trunc","_trunc_f32","_trunc_f64","asm","borrow","","borrow_mut","","call_return","clone","clone_into","clone_to_uninit","cmp","default","deref","deref_mut","dup","embed","float","fmt","from","","handle_empty_return","integer","into","","main_return","memory","memory_write","memory_write_at","memory_write_bytes","mp_offset","offset","pc_offset","push","ret","shift_stack","size","sp","stack","swap","to_owned","try_from","","try_into","","type_id","","Abi","Anyhow","BinaryReader","BufferOverflow","ControlStackUnderflow","DataNotFound","DuplicateFunc","DuplicateJump","Err","Error","ExtFuncNotFound","FuncNotFound","FuncNotImported","HostFuncNotFound","ImportedFuncNotFound","InvalidDataOffset","InvalidDataSize","InvalidDepth","InvalidElseBlock","InvalidFunctionSignature","InvalidLocalIndex","InvalidMP","InvalidPC","InvalidSelector","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","MemoryOutOfBounds","Ok","Result","SelectorNotFound","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","UnsupportedHostFunc","borrow","borrow_mut","fmt","","from","","","","into","source","to_string","try_from","try_into","type_id","ValidateThenVisit","borrow","borrow_mut","from","into","try_from","try_into","type_id","validate_then_visit","visit_any_convert_extern","visit_array_copy","visit_array_fill","visit_array_get","visit_array_get_s","visit_array_get_u","visit_array_init_data","visit_array_init_elem","visit_array_len","visit_array_new","visit_array_new_data","visit_array_new_default","visit_array_new_elem","visit_array_new_fixed","visit_array_set","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_cast","visit_br_on_cast_fail","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_extern_convert_any","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_op_when_unreachable","visit_ref_as_non_null","visit_ref_cast_non_null","visit_ref_cast_nullable","visit_ref_eq","visit_ref_func","visit_ref_i31","visit_ref_is_null","visit_ref_null","visit_ref_test_non_null","visit_ref_test_nullable","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_struct_get","visit_struct_get_s","visit_struct_get_u","visit_struct_new","visit_struct_new_default","visit_struct_set","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_throw_ref","visit_try","visit_try_table","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","call","control","impl_visit_operator","local","log","map_wasm_operators","AddressEq","Data","EmitABI","Env","Evm","Exports","Funcs","Function","Functions","HostFunc","Imports","Label","NoOp","Output","Revert","Slots","ToLSBytes","Type","U256MAX","abi","alloc","body","borrow","","","","","borrow_mut","","","","","clone","","","","","clone_into","","","","","clone_to_uninit","","","","","data","","default","","","","","deref","","","","deref_mut","","","","exports","fmt","","","","","from","","","","","func","funcs","host","impl_deref","imports","index","into","","","","","is_emit_abi","is_external","is_main","load_abi","load_abis","query_func","reserved","","selectors","size","slots","to_ls_bytes","to_owned","","","","","try_from","","","","","try_into","","","","","type_id","","","","","validator","with_index","ALIGNMENT_MASK","Output","ToLSBytes","Type","align","","offset","size","to_ls_bytes","Data","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deref","deref_mut","fmt","from","into","load","to_owned","try_from","try_into","type_id","Function","Functions","add","body","borrow","","borrow_mut","","default","deref","deref_mut","drain_selectors","from","","index","into","","into_funcs","sig","try_from","","try_into","","type_id","","validator","AddressEq","CompilerLabel","EmitABI","Evm","HostFunc","Label","NoOp","ReserveMemory32","ReserveMemory64","Revert","U256MAX","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","cmp","","compare","","eq","","equivalent","","","","","","fmt","","from","","into","","partial_cmp","","stack_in","stack_out","to_owned","","try_from","","","try_into","","type_id",""],"q":[[0,"zingen"],[100,"zingen::asm"],[269,"zingen::backtrace"],[284,"zingen::codegen"],[294,"zingen::codegen::code"],[338,"zingen::codegen::constructor"],[357,"zingen::codegen::dispatcher"],[373,"zingen::codegen::function"],[992,"zingen::control"],[1049,"zingen::jump"],[1076,"zingen::jump::relocate"],[1078,"zingen::jump::table"],[1110,"zingen::local"],[1158,"zingen::masm"],[1264,"zingen::result"],[1314,"zingen::validator"],[1896,"zingen::visitor"],[1902,"zingen::wasm"],[2020,"zingen::wasm::abi"],[2029,"zingen::wasm::data"],[2046,"zingen::wasm::func"],[2072,"zingen::wasm::host"],[2124,"evm_opcodes::shanghai"],[2125,"core::fmt"],[2126,"core::result"],[2127,"core::any"],[2128,"alloc::vec"],[2129,"core::option"],[2130,"core::convert"],[2131,"core::hash"],[2132,"wasmparser::readers::core::operators"],[2133,"wasmparser::readers::core::code"],[2134,"wasmparser::validator::core"],[2135,"wasmparser::validator::func"],[2136,"wasmparser::readers::core::types"],[2137,"zabi::abi"],[2138,"smallvec"],[2139,"core::ops::function"],[2140,"wasmparser::binary_reader"],[2141,"zabi::result"],[2142,"anyhow"],[2143,"core::error"],[2144,"alloc::string"],[2145,"core::cmp"]],"i":"Hh0``0Fn`1`````11`110j`222`212`222222222`222``1`20`222222CfD``1Gn`1dCl``34304Bh2GhGd6`3`6`6Cb53Ed0`063G`:9914````7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777`7777777777`B`0000000000000````````````6Bj7007070707000077070770707777700707707070``44444444444444444`<<<<<<<<<<<<<<<````>>>>32>32>3>3>322>>>>>>32>32223333223322>3>32>3223>32Gb0``0000000000000000```0000```9999999999999999999999999999999```Gf00870877000008708777870877787788087087880878``<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<H`=0=====`====``=0==`0==`====0==`=0=`==0=0=0=Hh0000000j`1111111111111111110`11111111111111111111`Id000000``00000000000000000000000000000000000000000000000000000000000000000``````Jl`0`0``````00Jf1```1`CnChIlInJ`Jb532105321053210532105`5321053210321053210532105`5``5532105355555352Hb674321643216432164321656`7``00`07`Jh000000000000000``Cj77070000070770077070707:`::`::Jn0;;;0;0;0;0;0;0;0;0;;;000;0;0;0;0;;;0;;0;0;0","f":"`````````````````````````````````````````````````````````````````````````````````````````````````````{{{f{bd}}}{{j{h}}}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{d}}}{{f{{n{l}}}}}}`{{{f{bd}}}{{f{bA`}}}}{{{f{d}}}d}{{f{f{bc}}}h{}}{fh}{{{f{bd}}Ab}{{j{h}}}}{{{f{bd}}l}{{j{h}}}}{{}d}{{{f{bd}}l}h}{{{f{bd}}Ad}{{j{h}}}}{{{f{bd}}{f{{n{l}}}}}h}{{{f{d}}{f{bAf}}}Ah}{cc{}}``{{{f{bd}}Aj}h}87{{}c{}}``{fc{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{fAn}`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{}B`}{{{f{B`}}{f{bAf}}}Ah}:`8{{{f{B`}}}{{Bd{{Bb{l}}}}}}{{{f{bB`}}}{{Bb{l}}}}{{{f{bB`}}Ab}{{Bb{{Bb{l}}}}}}{{{f{bB`}}c}h{{Bf{{n{l}}}}}}:98````````````7766`{{{f{Bh}}}Bh}{{{f{Bj}}}Bj}{{f{f{bc}}}h{}}0{fh}0{{}Bh}{{{f{Bj}}{f{Bj}}}Bl}{{f{f{c}}}Bl{}}00{{{f{Bh}}}{{Bb{l}}}}{{{f{Bh}}{f{bAf}}}Ah}{{{f{Bj}}{f{bAf}}}Ah}{cc{}}0{{{f{Bh}}}{{Bb{Bj}}}}`{{{f{Bj}}{f{bc}}}hBn}{{}c{}}09{{{f{Bh}}}Ab}`{{{f{Bh}}{f{Bj}}}{{Bd{C`}}}}{{{f{bBh}}C`}h}``{fc{}}0{{{f{bBh}}Bj}h}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{fAn}0``{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Cb}}}Cb}{{f{f{bc}}}h{}}{fh}{{}Cb}{{{f{Cb}}A`}{{j{A`}}}}{{{f{Cb}}{f{bAf}}}Ah}{cc{}}{{}c{}}`{{AbAb}Ab}{{{f{bCb}}Cd}{{j{h}}}}{fc{}}?>=```<;{{{f{bCf}}{f{Ch}}Bl}{{j{h}}}}`{{{f{bCf}}Cj{f{bCl}}}{{j{{Bb{l}}}}}}6`5{{Cn{f{Cj}}}{{j{Cf}}}}`{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{fAn}`{{{f{bD`}}Db}{{j{h}}}}{{{f{bD`}}Dd}{{j{h}}}}0{{{f{bD`}}Df}{{j{h}}}}1{{{f{bD`}}DdDdl}{{j{h}}}}{{{f{bD`}}}{{j{h}}}}03343{{{f{bD`}}Ab}{{j{h}}}}0445111``{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}66`{{{f{bD`}}}{{j{{Dj{DhDh}}}}}}{{{f{bD`}}{f{bDl}}{f{b{E`{Dn}}}}}{{j{h}}}}{{{f{bD`}}{f{bEb}}{f{b{E`{Dn}}}}}{{j{h}}}}`{{D`{f{bCl}}C`}{{j{A`}}}}{cc{}}{{{f{bD`}}Ed}{{j{h}}}}{{}c{}}``9`{{CnEf{Bd{Eh}}Bl}{{j{D`}}}}:`{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}`{fAn}{{{f{bD`}}}c{}}{{{f{bD`}}DdDd}c{}}{{{f{bD`}}Dd}c{}}0001120101102{{{f{bD`}}Db}c{}}11{{{f{bD`}}DdEjEj}c{}}022{{{f{bD`}}Df}c{}}3{{{f{bD`}}DdDdl}c{}}4464464666666{{{f{bD`}}El}c{}}777777777777{{{f{bD`}}En}c{}}88888888808888888888{{{f{bD`}}l}c{}}9999999999999999909999999{{{f{bD`}}F`}c{}}:::::::::::2::::::::::2:::::::::1::::::::::::::::::1::::88::::::::::::::::::11:::::::::::::::::::::1:::::::::::222222222222222222222222222:{{{f{bD`}}Dh}c{}};;;;;;;;;;;;;33333;;;;;;;;;;;;;;333;;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;333333333333333333333333333333333333;{{{f{bD`}}Fb}c{}}<<<<<<<<<<<<<<<<4444444<<<<<<<<<<<<<<4444<<<<<<<<<<<<<<<<<<<<<<<3<<<<<<<<3<<<<<<<<<<<<<33<<<<<<<<<<<<<<<<<<<3<<<{{{f{bD`}}{Fd{l}}}c{}}=====:;;;:555<;;{{{f{bD`}}Ddl}c{}}=0>>{{{f{bD`}}Ff}c{}}0?=??000=?=>=?>>>==>>===>===?<{{{f{bD`}}Fh}c{}}{{{f{bD`}}Fj}c{}}{{{f{bD`}}}c{}}0000{{{f{bD`}}Fl}c{}};{{{f{bD`}}Enl}c{}}<<<0<<<<0<<0<<<22<00002```````{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{{f{Fn}}}Fn}{{{f{Ed}}}Ed}{{f{f{bc}}}h{}}0{fh}0{{}G`}{{{f{G`}}}Ab}{{{f{Fn}}{f{Fn}}}Bl}{{f{f{c}}}Bl{}}00{{{f{Fn}}{f{bAf}}}Ah}{cc{}}00{{}c{}}00{{{f{G`}}Dd}{{j{C`}}}}{{{f{bG`}}}{{j{Ed}}}}{{FnC`lDb}Ed}``{{{f{Ed}}}C`}2{{{f{bG`}}Ed}h}{{{f{Ed}}}Db}`{{{f{G`}}Ab}{{j{Db}}}}`{fc{}}0{c{{Al{e}}}{}{}}00{{}{{Al{c}}}{}}00{{{f{G`}}Ab}{{j{Fn}}}}`{fAn}00``````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Gb}}}Gb}{{f{f{bc}}}h{}}{fh}{{{f{Gb}}{f{Gb}}}Bl}{{f{f{c}}}Bl{}}00{{{f{Gb}}{f{bAf}}}Ah}{cc{}}{{}c{}}{{{f{Gb}}}Bl}0```?>=;{C`{{j{C`}}}}{{{f{bA`}}C`C`C`}{{j{h}}}}`<;{{{f{bCl}}C`Dd}h}{{{f{bCl}}DdC`}{{j{h}}}}{{{f{Cl}}}Cl}<;`{{{f{bCl}}C`}h}{{}Cl}{{{f{bCl}}C`Bj}h}{{{f{Cl}}{f{bAf}}}Ah};`:`{{{f{bCl}}C`C`}h}{{{f{bCl}}ClC`}{{j{h}}}}1{{{f{bCl}}{f{bA`}}}{{j{h}}}}{{{f{bCl}}C`C`}{{j{h}}}}0000{{{f{bCl}}}{{j{h}}}}{{{f{bCl}}{f{Gb}}}{{j{C`}}}}{fc{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{fAn}`````{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{}Gd}{{{f{Gf}}{f{Gf}}}Bl}{{f{f{c}}}Bl{}}00{{{f{Gf}}{f{bAf}}}Ah}{{{f{Gh}}{f{bAf}}}Ah}{{{f{Gd}}{f{bAf}}}Ah}{cc{}}00{{{f{Gd}}Ab}{{j{{f{Gh}}}}}}{{{f{bGd}}Ab}{{j{{f{bGh}}}}}}``{{}c{}}00{{{f{Gd}}}Bl}{{{f{Gd}}}Ab}{{FjGfAb}Gh}{{{f{Gd}}Ab}{{j{{Gj{{Fd{l}}}}}}}}{{{f{bGd}}c}h{{Gl{Gh}}}}{{{f{Gh}}}Ab}`{c{{Al{e}}}{}{}}00{{}{{Al{c}}}{}}00{{{f{Gh}}}{{f{Gf}}}}`{fAn}00{{{f{Gh}}}{{f{Fj}}}}``{{{f{bGn}}}{{j{h}}}}0000000000{{{f{bGn}}El}{{j{h}}}}11{{{f{bGn}}F`}{{j{h}}}}22222{{{f{bGn}}Dh}{{j{h}}}}33{{{f{bGn}}Fb}{{j{h}}}}4444444444{{{f{bGn}}Ddl}{{j{h}}}}055555555555555555555555`{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{bGn}}{f{{n{Fj}}}}}{{j{h}}}}{{{f{Gn}}}Gn}{{f{f{bc}}}h{}}{fh}`{{}Gn}{{{f{Gn}}}{{f{c}}}{}}{{{f{bGn}}}{{f{bc}}}{}}{{{f{bGn}}l}{{j{h}}}}``{{{f{Gn}}{f{bAf}}}Ah}{cc{}}0{{{f{bGn}}}{{j{h}}}}`{{}c{}}0;`{{{f{bGn}}c}{{j{H`}}}Hb}{{{f{bGn}}{f{{n{l}}}}}{{j{h}}}}{{{f{bGn}}{f{{n{l}}}}}{{j{H`}}}}{{{f{Gn}}c}{{j{{Gj{{Fd{l}}}}}}}{{Hf{Ab}{{Hd{{j{Ab}}}}}}}}`{{{f{Gn}}}C`}3`{{{f{bGn}}lBl}{{j{h}}}}`{{{f{Gn}}}l}`;{fc{}}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{fAn}0````````````````````````````````````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Hh}}{f{bAf}}}Ah}0{HjHh}{HlHh}{HnHh}{cc{}}{{}c{}}{{{f{Hh}}}{{Bd{{f{I`}}}}}}{fIb}<;:`9832<;:`{{{f{b{Id{c}}}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}DdDd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Dd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0001120101102{{{f{b{Id{c}}}}Db}e{{Ih{}{{Hd{{If{h}}}}}}}{}}11{{{f{b{Id{c}}}}DdEjEj}e{{Ih{}{{Hd{{If{h}}}}}}}{}}022{{{f{b{Id{c}}}}Df}e{{Ih{}{{Hd{{If{h}}}}}}}{}}3{{{f{b{Id{c}}}}DdDdl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}4464464666666{{{f{b{Id{c}}}}El}e{{Ih{}{{Hd{{If{h}}}}}}}{}}777777777777{{{f{b{Id{c}}}}En}e{{Ih{}{{Hd{{If{h}}}}}}}{}}88888888808888888888{{{f{b{Id{c}}}}l}e{{Ih{}{{Hd{{If{h}}}}}}}{}}9999999999999999909999999{{{f{b{Id{c}}}}F`}e{{Ih{}{{Hd{{If{h}}}}}}}{}}:::::::::::2::::::::::2:::::::::1::::::::::::::::::1::::88::::::::::::::::::11:::::::::::::::::::::1:::::::::::222222222222222222222222222:{{{f{b{Id{c}}}}Dh}e{{Ih{}{{Hd{{If{h}}}}}}}{}};;;;;;;;;;;;;33333;;;;;;;;;;;;;;333;;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;333333333333333333333333333333333333;{{{f{b{Id{c}}}}Fb}e{{Ih{}{{Hd{{If{h}}}}}}}{}}<<<<<<<<<<<<<<<<4444444<<<<<<<<<<<<<<4444<<<<<<<<<<<<<<<<<<<<<<<3<<<<<<<<3<<<<<<<<<<<<<33<<<<<<<<<<<<<<<<<<<3<<<{{{f{b{Id{c}}}}{Fd{l}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}=====:;;;:555<;;{{{f{b{Id{c}}}}Ddl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}=0>{IjBl}?{{{f{b{Id{c}}}}Ff}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0{{{f{b{Id{c}}}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}?00111?0?{{{f{b{Id{c}}}}DdDd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Dd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}2111001100010002{{{f{b{Id{c}}}}Db}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Fh}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Fj}e{{Ih{}{{Hd{{If{h}}}}}}}{}}55555{{{f{b{Id{c}}}}Fl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}?{{{f{b{Id{c}}}}Enl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}En}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0010000100100088011118``````````````````````````{{{f{Cn}}Dd}{{Gj{{Fd{l}}}}}}`{f{{f{c}}}{}}0000{{{f{b}}}{{f{bc}}}{}}0000{{{f{Il}}}Il}{{{f{In}}}In}{{{f{J`}}}J`}{{{f{Jb}}}Jb}{{{f{Cn}}}Cn}{{f{f{bc}}}h{}}0000{fh}0000``{{}Il}{{}In}{{}J`}{{}Jb}{{}Cn}{{{f{Il}}}{{f{c}}}{}}{{{f{In}}}{{f{c}}}{}}{{{f{J`}}}{{f{c}}}{}}{{{f{Jb}}}{{f{c}}}{}}{{{f{bIl}}}{{f{bc}}}{}}{{{f{bIn}}}{{f{bc}}}{}}{{{f{bJ`}}}{{f{bc}}}{}}{{{f{bJb}}}{{f{bc}}}{}}`{{{f{Il}}{f{bAf}}}Ah}{{{f{In}}{f{bAf}}}Ah}{{{f{J`}}{f{bAf}}}Ah}{{{f{Jb}}{f{bAf}}}Ah}{{{f{Cn}}{f{bAf}}}Ah}{cc{}}0000``````{{}c{}}0000{{{f{Il}}Dd}Bl}{{{f{Cn}}Dd}Bl}0{{{f{Cn}}{f{Ch}}}{{j{Eh}}}}{{{f{Cn}}{f{Cj}}}{{j{{Bb{Eh}}}}}}{{{f{Cn}}{f{Jd}}}{{j{Dd}}}}{{{f{Il}}}Dd}{{{f{Cn}}}Dd}{{{f{In}}}{{Bb{Dd}}}}{{{f{Hb}}}Ab}`{{{f{{Jf{}{{Hd{c}}}}}}}c{{Bf{{n{l}}}}}}{fc{}}0000{c{{Al{e}}}{}{}}0000{{}{{Al{c}}}{}}0000{fAn}0000`{{{f{Cn}}Dd}Cn}````66`65`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Jh}}}Jh}{{f{f{bc}}}h{}}{fh}{{}Jh}{{{f{Jh}}}{{f{c}}}{}}{{{f{bJh}}}{{f{bc}}}{}}{{{f{Jh}}{f{bAf}}}Ah}{cc{}}{{}c{}}{{{f{Jh}}DhAb}{{j{{Bb{l}}}}}}{fc{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{fAn}``{{{f{bCj}}{E`{Dn}}Jj}h}`{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{}Cj}{{{f{Cj}}}{{f{c}}}{}}{{{f{bCj}}}{{f{bc}}}{}}{{{f{bCj}}{f{In}}}Cj}=={{{f{Ch}}}Dd}=={Cj{{Bb{Ch}}}}{{{f{Ch}}}{{j{Ef}}}}<<;;::````````````8877{{{f{Jl}}}Jl}{{{f{Jn}}}Jn}{{f{f{bc}}}h{}}0{fh}0{{{f{Jl}}{f{Jl}}}K`}{{{f{Jn}}{f{Jn}}}K`}{{f{f{c}}}K`{}}0{{{f{Jl}}{f{Jl}}}Bl}{{{f{Jn}}{f{Jn}}}Bl}{{f{f{c}}}Bl{}}00000{{{f{Jl}}{f{bAf}}}Ah}{{{f{Jn}}{f{bAf}}}Ah}{cc{}}0{{}c{}}0{{{f{Jl}}{f{Jl}}}{{Bd{K`}}}}{{{f{Jn}}{f{Jn}}}{{Bd{K`}}}}{{{f{Jl}}}l}0{fc{}}0{{{Dj{{f{Jd}}{f{Jd}}}}}{{j{Jl}}}}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{fAn}0","D":"EBj","p":[[0,"mut"],[5,"Assembler",100],[1,"reference",null,null,1],[1,"unit"],[8,"Result",1264],[1,"u8"],[1,"slice"],[8,"Buffer",0],[1,"usize"],[6,"ShangHai",2124],[5,"Formatter",2125],[8,"Result",2125],[1,"u128"],[6,"Result",2126,null,1],[5,"TypeId",2127],[5,"Backtrace",269],[5,"Vec",2128],[6,"Option",2129,null,1],[10,"AsRef",2130],[5,"Code",294],[5,"ExtFunc",294],[1,"bool"],[10,"Hasher",2131],[1,"u16"],[5,"Constructor",338],[8,"InitStorage",338],[5,"Dispatcher",357],[5,"Function",2046],[5,"Functions",2046],[5,"JumpTable",1078],[5,"Env",1902],[5,"Function",373],[6,"BlockType",2132],[1,"u32"],[5,"BrTable",2132],[1,"i32"],[1,"tuple",null,null,1],[5,"LocalsReader",2133],[5,"ValidatorResources",2134],[5,"FuncValidator",2135],[5,"OperatorsReader",2132],[5,"ControlStackFrame",992],[5,"FuncType",2136],[5,"Abi",2137],[5,"RefType",2136],[5,"Ieee32",2132],[5,"MemArg",2132],[5,"Ieee64",2132],[1,"i64"],[1,"array"],[6,"HeapType",2136],[5,"TryTable",2132],[6,"ValType",2136],[5,"V128",2132],[6,"ControlStackFrameType",992],[5,"ControlStack",992],[6,"Jump",1049],[5,"Locals",1110],[6,"LocalSlotType",1110],[5,"LocalSlot",1110],[5,"SmallVec",2138],[10,"Into",2130],[5,"MacroAssembler",1158],[5,"MemoryInfo",1158],[10,"Type",2020],[17,"Output"],[10,"Fn",2139],[6,"Error",1264],[5,"BinaryReaderError",2140],[6,"Error",2141],[5,"Error",2142],[10,"Error",2143],[5,"String",2144],[5,"ValidateThenVisit",1314],[8,"Result",2140],[10,"VisitOperator",2132],[6,"Operator",2132],[5,"Imports",1902],[5,"Exports",1902],[5,"Slots",1902],[5,"Funcs",1902],[1,"str"],[10,"ToLSBytes",2020],[5,"Data",2029],[5,"FunctionBody",2133],[6,"HostFunc",2072],[6,"CompilerLabel",2072],[6,"Ordering",2145]],"r":[[2,100],[8,294],[9,338],[10,992],[11,992],[12,992],[15,357],[20,1264],[24,373],[28,338],[38,1078],[42,1110],[43,1110],[45,1158],[48,1264],[284,294],[285,338],[286,357],[287,294],[288,373],[289,338],[1052,1078],[1903,2029],[1909,2046],[1910,2046],[1911,2072],[1918,2020],[1919,2020]],"b":[[1302,"impl-Display-for-Error"],[1303,"impl-Debug-for-Error"],[1304,"impl-From%3CBinaryReaderError%3E-for-Error"],[1305,"impl-From%3CError%3E-for-Error"],[1306,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAALcFPwBLAAAA8gABAPcAAgD8AAAAAAEAAAMBAAAKAQMADwEDABoBCAApAQMALgEKADoBAQBAAQAASgEBAE0BBQBVAQUAXAEAAGIBAwBpAQEAcwECAI0BAQChAQEApAE8AugDDAD2AwQADQQHABcEAgAdBAAAIAQJADEEAwA4BAEAPAQCAEEEAABDBAAAUwQDAFwEDQBwBAAAeQQAAHsEBQCDBAIAxQQDAMoEBgDUBAAA2AQAAOoEBgAVBQYAHgUEACQFAQAoBUAChQcYAKAHDACuBwQAuwcAAM8HEwDrBwAA7wcIAPsHAwADCAYAEggFACAIAQAkCBcAQAgBAEQICAA=","P":[[241,"T"],[243,""],[247,"T"],[248,""],[256,"T"],[259,""],[262,"U"],[265,"T"],[266,"U,T"],[267,"U"],[268,""],[270,"T"],[272,""],[274,"T"],[276,"U"],[277,""],[280,""],[281,"U,T"],[282,"U"],[283,""],[296,"T"],[301,""],[303,"T"],[305,""],[309,"K"],[312,""],[315,"T"],[317,""],[319,"__H"],[320,"U"],[322,""],[329,"T"],[331,""],[332,"U,T"],[334,"U"],[336,""],[340,"T"],[342,""],[343,"T"],[344,""],[348,"T"],[349,"U"],[351,""],[353,"T"],[354,"U,T"],[355,"U"],[356,""],[360,"T"],[362,""],[365,"T"],[367,"U"],[368,""],[370,"U,T"],[371,"U"],[372,""],[396,"T"],[398,""],[406,"T"],[407,""],[408,"U"],[411,""],[416,"U,T"],[417,"U"],[419,""],[420,"VisitOperator::Output"],[999,"T"],[1005,""],[1007,"T"],[1009,""],[1014,"K"],[1017,""],[1018,"T"],[1021,"U"],[1024,""],[1036,"T"],[1038,"U,T"],[1041,"U"],[1044,""],[1055,"T"],[1057,""],[1058,"T"],[1059,""],[1061,"K"],[1064,""],[1065,"T"],[1066,"U"],[1067,""],[1072,"T"],[1073,"U,T"],[1074,"U"],[1075,""],[1079,"T"],[1081,""],[1084,"T"],[1085,""],[1091,"T"],[1093,"U"],[1095,""],[1106,"T"],[1107,"U,T"],[1108,"U"],[1109,""],[1115,"T"],[1121,""],[1123,"K"],[1126,""],[1129,"T"],[1132,""],[1136,"U"],[1139,""],[1143,""],[1144,""],[1146,"U,T"],[1149,"U"],[1152,""],[1220,"T"],[1224,""],[1226,"T"],[1227,""],[1230,"Deref::Target"],[1232,""],[1236,"T"],[1238,""],[1240,"U"],[1242,""],[1244,""],[1245,""],[1247,"F"],[1249,""],[1257,"T"],[1258,"U,T"],[1260,"U"],[1262,""],[1300,"T"],[1302,""],[1307,"T"],[1308,"U"],[1309,""],[1311,"U,T"],[1312,"U"],[1313,""],[1315,"T"],[1318,"U"],[1319,"U,T"],[1320,"U"],[1321,""],[1323,"T,VisitOperator::Output"],[1830,""],[1831,"T,VisitOperator::Output"],[1922,""],[1924,"T"],[1934,""],[1939,"T"],[1944,""],[1956,"Deref::Target"],[1965,""],[1970,"T"],[1981,"U"],[1986,""],[1997,"ToLSBytes::Output"],[1998,"T"],[2003,"U,T"],[2008,"U"],[2013,""],[2028,"ToLSBytes::Output"],[2030,"T"],[2032,""],[2033,"T"],[2034,""],[2036,"Deref::Target"],[2038,""],[2039,"T"],[2040,"U"],[2041,""],[2042,"T"],[2043,"U,T"],[2044,"U"],[2045,""],[2050,"T"],[2054,""],[2055,"Deref::Target"],[2057,""],[2058,"T"],[2060,""],[2061,"U"],[2063,""],[2065,"U,T"],[2067,"U"],[2069,""],[2083,"T"],[2087,""],[2089,"T"],[2091,""],[2095,"K"],[2097,""],[2099,"K"],[2105,""],[2107,"T"],[2109,"U"],[2111,""],[2115,"T"],[2117,""],[2118,"U,T"],[2120,"U"],[2122,""]]}],["zink",{"t":"KEKYETECMCXCHCMQCXHKMQMKTNNNNNNNNNNHCHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFIIIFCCFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNKRRRKTTTTKKRRRCCMMMCKRRTRNNHNNMRKTRNNHNNMTTKRNNNN","n":["Asm","DoubleKeyMapping","Event","","Mapping","NAME","Storage","asm","bytes32","event","external","ffi","keccak256","primitives","push","revert","storage","","to_bytes32","Asm","bytes32","impl_asm","push","Event","NAME","log0","","log1","","log2","","log3","","log4","","address_eq","asm","emit_abi","evm","label_reserve_mem_32","label_reserve_mem_64","u256_add","u256_lt","u256_max","u256_sub","push_address","push_i16","push_i32","push_i64","push_i8","push_u16","push_u256","push_u32","push_u64","push_u8","revert1","revert2","revert3","revert4","sload_address","sload_i16","sload_i32","sload_i64","sload_i8","sload_u16","sload_u256","sload_u32","sload_u64","sload_u8","caller","keccak256","log0","log1","log2","log3","log4","mload","mstore","mstore8","push0","push1","push10","push11","push12","push13","push14","push15","push16","push17","push18","push19","push2","push20","push21","push22","push23","push24","push25","push26","push27","push28","push29","push3","push30","push31","push32","push4","push5","push6","push7","push8","push9","sload","sstore","Address","Bytes20","Bytes32","String32","U256","address","u256","Address","borrow","borrow_mut","bytes32","caller","clone","clone_into","clone_to_uninit","empty","eq","from","into","push","sload","to_owned","try_from","try_into","type_id","U256","add","borrow","borrow_mut","bytes32","clone","clone_into","clone_to_uninit","empty","from","into","lt","max","push","sload","sub","to_owned","try_from","try_into","type_id","DoubleKeyMapping","Key","Key1","Key2","Mapping","STORAGE_KEY","STORAGE_SLOT","","","Storage","StorageValue","Value","","","dkmapping","mapping","sload","storage_key","","value","DoubleKeyMapping","Key1","Key2","STORAGE_SLOT","Value","get","","load_double_key","set","","storage_key","Key","Mapping","STORAGE_SLOT","Value","get","","load_key","set","","storage_key","STORAGE_KEY","STORAGE_SLOT","Storage","Value","get","","set",""],"q":[[0,"zink"],[19,"zink::asm"],[23,"zink::event"],[35,"zink::ffi"],[45,"zink::ffi::asm"],[69,"zink::ffi::evm"],[114,"zink::primitives"],[121,"zink::primitives::address"],[139,"zink::primitives::u256"],[159,"zink::storage"],[179,"zink::storage::dkmapping"],[190,"zink::storage::mapping"],[200,"zink::storage::value"],[208,"core::result"],[209,"core::any"],[210,"zink_codegen"]],"i":"`````n``b`````0`````0`0`11111111111```````````````````````````````````````````````````````````````````````````````````````A`0000000000000000`Af000000000000000000`BnC`0`Cb120``120``Bl23``222222`2223`3333`33311`11111","f":"````````{{{d{b}}}{{h{f}}}}```{{{d{{j{f}}}}}{{h{f}}}}`{bl}```1`2`0``{{{d{n}}}l}0{{{d{n}}{d{{j{f}}}}}l}0{{{d{n}}{d{{j{f}}}}{d{{j{f}}}}}l}0{{{d{n}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}}l}0{{{d{n}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}}l}0{{A`A`}Ab}`{{AdAd}l}`{{}l}0{{AfAf}Af}{{AfAf}Ab}{{}Af}2{A`l}{Ahl}{Ajl}{All}{Anl}{B`l}{Afl}{Adl}{Bbl}{fl}{{{d{Bd}}}l}000{{}A`}{{}Ah}{{}Aj}{{}Al}{{}An}{{}B`}{{}Af}{{}Ad}{{}Bb}{{}f}9{{}l}{{{d{{j{f}}}}}l}{{{d{{j{f}}}}{d{{j{f}}}}}l}{{{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}}l}{{{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}}l}{{{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}{d{{j{f}}}}}l}5555{Ajl}000000000000000000000000600000066````````{d{{d{c}}}{}}{{{d{Bf}}}{{d{Bfc}}}{}}{{{d{A`}}}{{h{f}}}}{{}A`}{{{d{A`}}}A`}{{d{d{Bfc}}}l{}}{dl}3{{A`A`}Ab}{cc{}}{{}c{}}{A`l}7{dc{}}{c{{Bh{e}}}{}{}}{{}{{Bh{c}}}{}}{dBj}`{{AfAf}Af}?>{{{d{Af}}}{{h{f}}}}{{{d{Af}}}Af}<;{{}Af}:9{{AfAf}Ab}1{Afl}259876````````````````{{}Bl}{{ce}{{h{f}}}{}{}}{c{{h{f}}}{}}``````{{ce}g{}{}{}}0{{ceAj}lbb}{{ceg}l{}{}{}}04````{ce{}{}}0{{cAj}lb}{{ce}l{}{}}06````{{}c{}}0{cl{}}0","D":"AAd","p":[[10,"Asm",19],[1,"reference",null,null,1],[1,"u8"],[1,"array"],[1,"slice"],[1,"unit"],[10,"Event",23],[5,"Address",121],[1,"bool"],[1,"u32"],[5,"U256",139],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u16"],[1,"u64"],[1,"str"],[0,"mut"],[6,"Result",208,null,1],[5,"TypeId",209],[10,"StorageValue",159],[10,"Mapping",190],[10,"DoubleKeyMapping",179],[10,"Storage",200]],"r":[[0,19],[1,179],[2,23],[3,210],[4,190],[6,200],[10,210],[15,210],[17,210],[114,121],[118,139],[159,179],[163,190],[168,200]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEYAFgACAAAABQACAAkAAAAVAAEAGQAKAHQAAgB4AAEAewACAH8AAgCGAAUAjgAFAJkAAQCcAAMAoQACAKUAAwCrAAIAsQABALUAAwC+AAEAwQABAMgAAgDMAAAA","P":[[122,"T"],[124,""],[127,"T"],[128,""],[131,"T"],[132,"U"],[133,""],[135,"T"],[136,"U,T"],[137,"U"],[138,""],[141,"T"],[143,""],[145,"T"],[146,""],[148,"T"],[149,"U"],[150,""],[155,"T"],[156,"U,T"],[157,"U"],[158,""],[176,"DoubleKeyMapping::Key1,DoubleKeyMapping::Key2"],[177,"Mapping::Key"],[184,"DoubleKeyMapping::Key1,DoubleKeyMapping::Key2,DoubleKeyMapping::Value"],[186,","],[187,"DoubleKeyMapping::Key1,DoubleKeyMapping::Key2,DoubleKeyMapping::Value"],[189,"DoubleKeyMapping::Key1,DoubleKeyMapping::Key2"],[194,"Mapping::Key,Mapping::Value"],[196,""],[197,"Mapping::Key,Mapping::Value"],[199,"Mapping::Key"],[204,"Storage::Value"]]}],["zink_codegen",{"t":"YCXCQCCXCHHHPPPSFGPNNNNNNNNNNNNNNNONNNHONNNNONNOOOOOKQMN","n":["Event","event","external","revert","","selector","storage","","utils","parse","","external","DoubleKeyMapping","Invalid","Mapping","STORAGE_REGISTRY","Storage","StorageType","Value","borrow","","borrow_mut","","default","expand","expand_dk_mapping","expand_mapping","expand_value","fmt","from","","","","getter","","into","","parse","storage_slot","target","try_from","","try_into","","ty","type_id","","key","key1","key2","value","","Bytes32","impl_bytes32","to_bytes32","to_vec"],"q":[[0,"zink_codegen"],[9,"zink_codegen::event"],[10,"zink_codegen::revert"],[11,"zink_codegen::selector"],[12,"zink_codegen::storage"],[47,"zink_codegen::storage::StorageType"],[52,"zink_codegen::utils"],[56,"syn::derive"],[57,"proc_macro"],[58,"syn::lit"],[59,"syn::item"],[60,"proc_macro2"],[61,"core::fmt"],[62,"core::option"],[63,"alloc::string"],[64,"core::result"],[65,"core::any"],[66,"alloc::vec"]],"i":"````````````n00```0A`101100001001100010`00101001BnC`010``Bf0","f":"`````````{bd}{fd}{hd}```````{j{{j{c}}}{}}0{{{j{l}}}{{j{lc}}}{}}0{{}n}{A`d}{{{j{lA`}}AbAbAb}d}{{{j{lA`}}AbAb}d}{{{j{lA`}}Ab}d}{{{j{n}}{j{lAd}}}Af}{{{Aj{nAh}}}A`}{cc{}}{dn}1{{{j{lA`}}}{{Al{Ab}}}}`{{}c{}}0{{nAh}d}{AnB`}`{c{{Bb{e}}}{}{}}0{{}{{Bb{c}}}{}}0`{jBd}0```````{{{j{Bf}}}{{Bj{Bh}}}}{{{j{Bf}}}{{Bl{Bh}}}}","D":"Cn","p":[[5,"DeriveInput",56],[5,"TokenStream",57],[5,"LitStr",58],[5,"ItemFn",59],[1,"reference",null,null,1],[0,"mut"],[6,"StorageType",12],[5,"Storage",12],[5,"Ident",60],[5,"Formatter",61],[8,"Result",61],[5,"ItemStruct",59],[1,"tuple",null,null,1],[6,"Option",62,null,1],[5,"String",63],[1,"i32"],[6,"Result",64,null,1],[5,"TypeId",65],[10,"Bytes32",52],[1,"u8"],[1,"array"],[5,"Vec",66],[15,"Mapping",47],[15,"DoubleKeyMapping",47]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABkABwAHAAAAEAAAABQACgAgAAAAJwAAACkAAwAuAAYA","P":[[19,"T"],[23,""],[30,"T"],[31,""],[32,"T"],[33,""],[35,"U"],[37,""],[40,"U,T"],[42,"U"],[45,""]]}],["zinkc",{"t":"PFPPPFFFPGIPPIOOCNNOCNNNCCOONONNNNOCCONONNNNCFONNONNNNNONNNNFONNNNNNONNNNNONONNNNNNFNONNNONNNONNNNNONNNFNNNNNNNNNONNNNNNNNNNNNFNNNNNONNONNNNNNNPPPPPGPPINNNNNNNNNNNNNNNNH","n":["Anyhow","Artifact","BinaryReader","BufferOverflow","Codegen","Compiler","Config","Constructor","Err","Error","InitStorage","InvalidDataOffset","Ok","Result","abi","","artifact","borrow","borrow_mut","buffer","cli","clone","clone_into","clone_to_uninit","compiler","config","","","default","dispatcher","finish","fmt","from","into","masm","parser","result","runtime_bytecode","storage","table","to_owned","try_from","try_into","type_id","utils","Artifact","abi","borrow","borrow_mut","config","default","deserialize","fmt","from","into","runtime_bytecode","serialize","try_from","try_into","type_id","Compile","abi","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","dispatcher","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Compiler","abi","","artifact","borrow","borrow_mut","buffer","compile","compile_dispatcher","compile_func","config","default","emit_buffer","from","into","new","table","try_from","try_into","type_id","Config","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","default","deserialize","dispatcher","","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","serialize","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Parser","borrow","borrow_mut","data","default","drain_selectors","env","exports","from","funcs","imports","into","parse","try_from","","try_into","type_id","Anyhow","BinaryReader","BufferOverflow","Codegen","Err","Error","InvalidDataOffset","Ok","Result","borrow","borrow_mut","fmt","","from","","","","header","in_current_span","into","source","to_string","try_from","try_into","type_id","wasm_opt"],"q":[[0,"zinkc"],[45,"zinkc::artifact"],[60,"zinkc::cli"],[83,"zinkc::compiler"],[103,"zinkc::config"],[126,"zinkc::parser"],[143,"zinkc::result"],[168,"zinkc::utils"],[169,"zingen::codegen::constructor"],[170,"smallvec"],[171,"zingen::result"],[172,"core::result"],[173,"core::fmt"],[174,"std::collections::hash::map"],[175,"core::any"],[176,"serde::de"],[177,"serde::ser"],[178,"clap_builder::builder::command"],[179,"clap_builder::parser::matches::arg_matches"],[180,"clap_builder"],[181,"clap_builder::util::id"],[182,"core::option"],[183,"anyhow"],[184,"zingen::wasm"],[185,"zabi::abi"],[186,"zingen::wasm::func"],[187,"zingen::codegen::function"],[188,"wasmparser::readers::core::data"],[189,"wasmparser::readers"],[190,"zingen::wasm::data"],[191,"wasmparser::readers::core::exports"],[192,"wasmparser::readers::core::imports"],[193,"wasmparser::binary_reader"],[194,"color_eyre::section"],[195,"core::marker"],[196,"core::error"],[197,"alloc::string"],[198,"std::path"],[199,"core::convert"]],"i":"Eh`000```Cj``10`AlCb`f01`000``210Dd11111``3121111``33333333333333`Bf000000000000000000000`3333333333333333333`1111111111111111111111`Cn00000000000000077776`76`7777777777777777`","f":"`````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}``{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}````{{}f}`{{{b{f}}{n{{l{j}}}}}{{Ab{{n{{l{j}}}}A`}}}}{{{b{f}}{b{dAd}}}{{Ab{hAf}}}}{cc{}}{{}c{}}````{{{b{df}}{Ah{{n{{l{j}}}}{n{{l{j}}}}}}}{{Ab{hA`}}}}`{bc{}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{bAj}```>=`{{}Al}{c{{Ab{Al}}}An}{{{b{Al}}{b{dAd}}}B`}98`{{{b{Al}}c}AbBb}654``{BdBd}0{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{}Bd}0`{{{b{Bf}}{b{dAd}}}B`}?{{{b{Bh}}}{{Ab{BfBj}}}}{{{b{dBh}}}{{Ab{BfBj}}}}{{}{{Bn{Bl}}}}`{{}c{}}`{{{b{Bf}}}{{C`{h}}}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{bAj}{{{b{dBf}}{b{Bh}}}{{Ab{hBj}}}}{{{b{dBf}}{b{dBh}}}{{Ab{hBj}}}}`{{{b{Cb}}{b{Cd}}Cf}{{Bn{Ch}}}}`{Cb{{Cj{Al}}}}?>`{{Cb{b{{Cl{j}}}}}{{Cj{Al}}}}{{{b{dCb}}{b{dCn}}}{{Cj{h}}}}{{{b{dCb}}CdD`}{{Cj{h}}}}`{{}Cb}{{{b{dCb}}CfDb}{{Cj{h}}}}{cc{}}>{DdCb}`=<;`{BdBd}0{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{}Bd}0{{}Dd}{c{{Ab{Dd}}}An}{{DdDf}Dd}`{{{b{Dd}}{b{dAd}}}B`}9{{{b{Bh}}}{{Ab{DdBj}}}}{{{b{dBh}}}{{Ab{DdBj}}}}{{}{{Bn{Bl}}}}{{}c{}}{{{b{Dd}}c}AbBb}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{bAj}{{{b{dDd}}{b{Bh}}}{{Ab{hBj}}}}{{{b{dDd}}{b{dBh}}}{{Ab{hBj}}}}`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{{Dj{Dh}}}}}{{Cj{Dl}}}}{{}Cn}{{{b{dCn}}}Dn}`{{{b{{Dj{E`}}}}}{{Cj{Eb}}}}{cc{}}`{{{b{{Dj{Ed}}}}}{{Cj{Ef}}}}>{{{b{dCn}}{b{{Cl{j}}}}}{{Cj{h}}}}{{{b{{Cl{j}}}}}{{Cj{Cn}}}}>=<`````````98{{{b{Eh}}{b{dAd}}}B`}04{EjEh}{ElEh}{A`Eh}{c{{En{ce}}}{F`FbFd}{}}{{}}{{}c{}}{{{b{Eh}}}{{Bn{{b{Ff}}}}}}{bFh}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{bAj}{{ce}{{C`{h}}}{{Fl{Fj}}}{{Fl{Fj}}}}","D":"Kb","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Constructor",0,169],[1,"unit"],[1,"u8"],[1,"array"],[5,"SmallVec",170],[6,"Error",171],[6,"Result",172,null,1],[5,"Formatter",173],[5,"Error",173],[5,"HashMap",174],[5,"TypeId",175],[5,"Artifact",45],[10,"Deserializer",176],[8,"Result",173],[10,"Serializer",177],[5,"Command",178],[5,"Compile",60],[5,"ArgMatches",179],[8,"Error",180],[5,"Id",181],[6,"Option",182,null,1],[8,"Result",183],[5,"Compiler",83],[5,"Env",184],[1,"u32"],[5,"Abi",185],[8,"Result",143],[1,"slice"],[5,"Parser",126],[5,"Function",186],[5,"Function",187],[5,"Config",103],[1,"bool"],[5,"Data",188],[5,"SectionLimited",189],[5,"Data",190],[5,"Functions",186],[5,"Export",191],[5,"Exports",184],[5,"Import",192],[5,"Imports",184],[6,"Error",143],[5,"Error",183],[5,"BinaryReaderError",193],[5,"IndentedSection",194],[10,"Display",173],[10,"Send",195],[10,"Sync",195],[10,"Error",196],[5,"String",197],[5,"Path",198],[10,"AsRef",199]],"r":[[1,45],[5,83],[6,103],[7,169],[9,143],[10,169],[13,143]],"b":[[154,"impl-Debug-for-Error"],[155,"impl-Display-for-Error"],[157,"impl-From%3CError%3E-for-Error"],[158,"impl-From%3CBinaryReaderError%3E-for-Error"],[159,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFAAGgASAAEAFgACAB0AAAAgAAAAIwAAACkAAwAwAAEAMwACADkAAwA/AAUARgAAAEgAAgBPAAQAWAABAF8AAABlAAIAaQAHAHMAAAB1AAIAeQAFAIAAAQCDAAAAjAADAJkAAwCeAAQApAAEAA==","P":[[17,"T"],[21,""],[22,"T"],[23,""],[32,"T"],[33,"U"],[38,""],[40,"T"],[41,"U,T"],[42,"U"],[43,""],[47,"T"],[50,""],[51,"__D"],[52,""],[53,"T"],[54,"U"],[56,"__S"],[57,"U,T"],[58,"U"],[59,""],[64,"T"],[66,""],[70,"T"],[71,""],[75,"U"],[77,""],[78,"U,T"],[79,"U"],[80,""],[87,"T"],[90,""],[96,"T"],[97,"U"],[98,""],[100,"U,T"],[101,"U"],[102,""],[106,"T"],[108,""],[111,"__D"],[112,""],[115,"T"],[116,""],[119,"U"],[120,"__S"],[121,"U,T"],[122,"U"],[123,""],[127,"T"],[129,""],[134,"T"],[136,""],[137,"U"],[138,""],[140,"U,T"],[141,"U"],[142,""],[152,"T"],[154,""],[156,"T"],[157,""],[160,"C,T"],[161,""],[162,"U"],[163,""],[165,"U,T"],[166,"U"],[167,""],[168,","]]}],["zinkc_filetests",{"t":"TTTTTTTTTTTTTTTTTTTTTTTTTTTTFNNNNNNQNNOONNNNO","n":["BR_IF_AS_BLOCK_LAST","CALL_AS_IF","CALL_DUMMY","CALL_PARAMS","I32ADD_LOCALS","I32ADD_PARAMS","I32ADD_TEE","I32SUB_LOCALS","I32SUB_PARAMS","I64ADD_LOCALS","I64ADD_PARAMS","I64ADD_TEE","I64SUB_LOCALS","I64SUB_PARAMS","IF_BASIC","IF_SINGULAR","LOG_LOG0","LOG_LOG1","LOG_LOG2","LOG_LOG3","LOG_LOG4","LOOP_AS_BR_IF","LOOP_SINGULAR","RECURSION_FIBONACCI","SELECT_PARAMS","STORAGE_BASIC","STORAGE_LOAD","STORAGE_STORE","Test","borrow","borrow_mut","clone","clone_into","clone_to_uninit","from","impl_tests","into","load","module","name","to_owned","try_from","try_into","type_id","wasm"],"q":[[0,"zinkc_filetests"],[45,"anyhow"],[46,"core::result"],[47,"core::any"]],"i":"f000000000000000000000000000`000000`000000000","f":"`````````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{cc{}}`{{}c{}}{{{b{j}}{b{j}}}{{l{f}}}}``{bc{}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bA`}`","D":"Dj","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Test",0],[1,"unit"],[1,"str"],[8,"Result",45],[6,"Result",46,null,1],[5,"TypeId",47]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAgAAgAeAAQAKQADAA==","P":[[29,"T"],[31,""],[32,"T"],[33,""],[34,"T"],[36,"U"],[37,""],[40,"T"],[41,"U,T"],[42,"U"],[43,""]]}],["zint",{"t":"PKPPFPPPPPFPPGFPPPPPPPPPPPGPPPPPPPINNOOONNNNCONNNNNNOOCONNNNNNNNCNNNNOONNEONNHEOCOOHOMNNNNNNNNOKQMNNFOONNNNNONNNONNNNNNNNNNNOSSFSFONNNNNNNONONNNNNNNNOOONNNOOONONNNNNNNNFFNNNNNNNNNNOOHHNNNNNNH","n":["Basic","Bytes32","CallNotAllowedInsideStatic","CallTooDeep","Contract","CreateCollision","CreateContractSizeLimit","CreateContractStartingWithEF","CreateInitCodeSizeLimit","EOFFunctionStackOverflow","EVM","EofAuxDataOverflow","EofAuxDataTooSmall","HaltReason","Info","InvalidEXTCALLTarget","InvalidFEOpcode","InvalidJump","InvalidOperand","Memory","MemoryLimit","NonceOverflow","NotActivated","OpcodeNotFound","OutOfFunds","OutOfGas","OutOfGasError","OutOfOffset","OverflowPayment","Precompile","PrecompileError","StackOverflow","StackUnderflow","StateChangeDuringStaticCall","U256","__clone_box","","address","","artifact","borrow","","borrow_mut","","bytes","caller","clone","","clone_into","","clone_to_uninit","","commit","constructor","contract","dispatcher","eq","","equivalent","","","","","","evm","fmt","","from","","gas","halt","hash","","hex","inner","into","","keccak256","log","logs","lookup","ret","revert","setup_logger","storage","to_bytes32","to_owned","","try_from","","try_into","","type_id","","wasm","Bytes32","impl_bytes32","to_bytes32","to_vec","","Contract","address","artifact","borrow","borrow_mut","bytecode","compile","construct","constructor","current","default","deploy","dispatcher","encode","execute","from","","into","json_abi","pure","search","try_from","try_into","type_id","wasm","ALICE","CONTRACT","EVM","GAS_LIMIT","Info","address","borrow","","borrow_mut","","call","calldata","caller","","commit","","contract","db","default","","deploy","fmt","from","","gas","halt","inner","interp","into","","logs","ret","revert","storage","","try_from","","","","try_into","","type_id","","Manifest","Package","borrow","","borrow_mut","","deserialize","","from","","into","","name","package","pkg_name","target_dir","try_from","","try_into","","type_id","","wasm"],"q":[[0,"zint"],[95,"zint::bytes"],[100,"zint::contract"],[125,"zint::evm"],[168,"zint::lookup"],[191,"dyn_clone::sealed"],[192,"revm_primitives::result"],[193,"core::fmt"],[194,"core::result"],[195,"core::hash"],[196,"core::any"],[197,"alloc::vec"],[198,"anyhow"],[199,"zingen::codegen::constructor"],[200,"core::convert"],[201,"alloc::string"],[202,"revm::db::in_memory_db"],[203,"revm_primitives::env"],[204,"serde::de"],[205,"std::path"],[206,"alloy_primitives::aliases"],[207,"zabi::selector"]],"i":"l`j0`00000`00``00011100000`0010000`01BdBn12323`Bj34343402`234333444`34341134`034``1`11`1An454545453``000`333333333333333333333333`````21212111111111212122211122221212221212``D`Dd1010101001``101010`","f":"```````````````````````````````````{{bd}f}0```{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0``{{{b{j}}}j}{{{b{l}}}l}{{b{b{hc}}}f{}}0{bf}0````{{{b{j}}{b{j}}}n}{{{b{l}}{b{l}}}n}{{b{b{c}}}n{}}00000`{{{b{j}}{b{hA`}}}{{Ad{fAb}}}}{{{b{l}}{b{hA`}}}{{Ad{fAb}}}}{cc{}}0``{{{b{j}}{b{hc}}}fAf}{{{b{l}}{b{hc}}}fAf}``{{}c{}}0{{{b{{Aj{Ah}}}}}{{Al{Ah}}}}`````{{}f}`{{{b{An}}}{{Al{Ah}}}}{bc{}}0{c{{Ad{e}}}{}{}}0{{}{{Ad{c}}}{}}0{bB`}0```4{{{b{An}}}{{Bb{Ah}}}}0```{b{{b{c}}}{}}{{{b{h}}}{{b{hc}}}{}}{{{b{Bd}}}{{Bf{{Bb{Ah}}}}}}{Bd{{Bf{Bd}}}}{{{b{hBd}}Bh}{{Bf{{b{hBd}}}}}}`{{}{{Bf{Bd}}}}{{}Bd}{{{b{hBd}}}{{Bf{Bj}}}}`{{{b{Bd}}e}{{Bf{{Bb{Ah}}}}}An{{Bl{{Aj{c}}}}}}{{{b{hBd}}e}{{Bf{Bn}}}An{{Bl{{Aj{c}}}}}}{cc{}}{cBd{{Bl{{Aj{Ah}}}}}}{{}c{}}{{{b{Bd}}}{{Bf{C`}}}}{BdBd}{{{b{Cb}}}{{Bf{Bd}}}}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{bB`}```````{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0{{{b{hBj}}{Al{Ah}}}{{Bf{Bn}}}}{{{b{hBj}}{b{{Aj{Ah}}}}}{{b{hBj}}}}{{Bj{Al{Ah}}}Bj}`{{Bjn}Bj}`{{Bj{b{{Aj{Ah}}}}}Bj}{{{b{hBj}}}{{b{hCd}}}}{{}Bj}{{}Bn}{{{b{hBj}}{b{{Aj{Ah}}}}}{{Bf{Bn}}}}{{{b{Bn}}{b{hA`}}}Cf}{cc{}}0```{{{b{{Aj{Ah}}}}{b{{Aj{Ah}}}}}{{Bf{Bn}}}}{{}c{}}0```{{{b{hBj}}{Al{Ah}}{Al{Ah}}}{{Bf{{Al{Ah}}}}}}`{c{{Ad{e}}}{}{}}{{{Cl{ChCj}}}{{Bf{Bn}}}}1{Cn{{Bf{Bn}}}}{{}{{Ad{c}}}{}}0{bB`}0``{b{{b{c}}}{}}0{{{b{h}}}{{b{hc}}}{}}0{c{{Ad{D`}}}Db}{c{{Ad{Dd}}}Db}<<::``{{}{{Bf{C`}}}}{{}{{Bf{Df}}}}::7766{{{b{Cb}}}{{Bf{Df}}}}","D":"Lf","p":[[1,"reference",null,null,1],[5,"Private",191],[1,"unit"],[0,"mut"],[6,"HaltReason",0,192],[6,"OutOfGasError",0,192],[1,"bool"],[5,"Formatter",193],[5,"Error",193],[6,"Result",194,null,1],[10,"Hasher",195],[1,"u8"],[1,"slice"],[1,"array"],[10,"Bytes32",95],[5,"TypeId",196],[5,"Vec",197],[5,"Contract",100],[8,"Result",198],[8,"InitStorage",199],[5,"EVM",125],[10,"AsRef",200],[5,"Info",125],[5,"String",201],[1,"str"],[8,"InMemoryDB",202],[8,"Result",193],[5,"ResultAndState",192],[8,"TransactTo",203],[1,"tuple",null,null,1],[6,"ExecutionResult",192],[5,"Manifest",168],[10,"Deserializer",204],[5,"Package",168],[5,"PathBuf",205]],"r":[[1,95],[4,100],[10,125],[13,192],[14,125],[26,192],[34,206],[77,207]],"b":[[161,"impl-TryFrom%3C(ResultAndState,+TxKind)%3E-for-Info"],[163,"impl-TryFrom%3CExecutionResult%3E-for-Info"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFwAFwABAAAAAwABAAYAAAARABEAJAABACkAAwAvAAUAOQAHAEIAAQBIAAMATwAAAFcABwBoAAEAbwAAAHUAAAB6AAIAhAADAI8AAgCTAAAAmAAAAKEABwCrAAUAuQAFAA==","P":[[40,"T"],[46,""],[48,"T"],[50,""],[58,"K"],[65,""],[67,"T"],[71,"__H"],[75,"U"],[77,""],[86,"T"],[88,"U,T"],[90,"U"],[92,""],[103,"T"],[105,""],[113,"Param,"],[115,"T"],[117,"U"],[118,""],[121,"U,T"],[122,"U"],[123,""],[131,"T"],[135,""],[147,"T"],[152,""],[153,"U"],[158,""],[160,"U,T"],[161,""],[162,"U,T"],[163,""],[164,"U"],[166,""],[170,"T"],[174,"__D"],[176,"T"],[178,"U"],[182,""],[184,"U,T"],[186,"U"],[188,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[6438,5750,3108,2495,53213,5124,1997,6741,1286,5493]}
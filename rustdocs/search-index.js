var searchIndex = JSON.parse('{\
"conta":{"doc":"The library of conta","t":"DDDDDMMAMAMMMMMMAMCNECDCNLLLLLLLLALLLLLLMLLLMLLLLLLLLLLLLLMALLLLLLLLLLLLLDLLLLLLLLMLLLLLLLLLLLLLLMDMLLLLLLLLMLLLLLLLLLLLLLLLDLLLLLLMLLLLRDDRRLLLLMLLMLLLLLLLMLLLLMLLLLLLL","n":["Bump","Config","Conta","Publish","Sed","allow_dirty","buf","cmd","command","config","config","dry_run","dry_run","manifest","manifest","packages","sed","version","Bump","Bump","Command","Config","Conta","Publish","Publish","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","bump","clone","clone","clone_into","clone_into","command","command","command","command_for_update","command_for_update","config","config","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","manifest","manifest","publish","run","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","Bump","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","dry_run","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","run","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verify","version","Publish","allow_dirty","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","dry_run","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","publish","run","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verify","Config","borrow","borrow_mut","deserialize","fmt","from","into","packages","serialize","try_from","try_into","type_id","PATT_VERSION","Pos","Sed","WORKSPACE_DEPENDENCIES","WORKSPACE_PACKAGE","borrow","borrow","borrow_mut","borrow_mut","buf","clone","clone_into","end","find_version","flush","fmt","from","from","into","into","manifest","new","set_dep_versions","set_version","set_workspace_version","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"conta"],[18,"conta::cmd"],[73,"conta::cmd::bump"],[98,"conta::cmd::publish"],[124,"conta::config"],[136,"conta::sed"]],"d":["Bump versions.","Conta configuration.","Modern tool for bumping crate versions and publishing them.","Publish crates.","Manifest stream editor.","If allow dirty publish.","","","The command to run.","Conta Configuration","The path of <code>Conta.toml</code>","Dry run the command and print the result.","If dry run.","","The path of the cargo manifest, if not provided, the …","The packages should be kept in order by the dependency …","Manifest reader","The version to bump.","","","Commands of this tool.","","Modern tool for bumping crate versions and publishing them.","","","","","","","","","","","Command bump","","","","","","","The command to run.","","","Parse the config from the input path.","The path of <code>Conta.toml</code>","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the manifest path.","The path of the cargo manifest, if not provided, the …","Command publish","Process commands","","","","","","","","","","","","","Bump versions.","","","","","","","","","Dry run the command and print the result.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Bumps the version to the given one.","","","","","","","Get the metadata of the workspace.","The version to bump.","Publish crates.","If allow dirty publish.","","","","","","","","","If dry run.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Publish cargo package","Run publish","","","","","","","","Conta configuration.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The packages should be kept in order by the dependency …","","","","","","Position of version field","Manifest stream editor.","","","","","","","","","","End position","Find the version field from provided context.","Flush the changes to the manifest file.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new manifest stream editor.","Set the version of the root package.","Set the version from pos.","Set the version of the root package.","Start position","","","","","","",""],"i":[0,0,0,0,0,20,25,0,3,0,3,17,20,25,3,4,0,17,0,2,0,0,0,0,2,3,3,2,2,2,3,2,3,0,2,3,2,3,2,3,3,2,3,3,3,2,3,2,3,2,3,2,3,3,2,2,3,3,3,0,3,2,3,2,3,2,3,2,3,2,3,2,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,25,23,25,23,25,23,23,23,25,25,23,25,23,25,23,25,25,25,25,25,23,23,25,23,25,23,25,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],0,[2,2],[3,3],[[]],[[]],[[],1],[[],1],0,[[],1],[[],1],[3,[[5,[4]]]],0,[[2,6],7],[[3,6],7],[[]],[[]],[8,[[10,[2,9]]]],[8,[[10,[3,9]]]],[8,[[10,[2,9]]]],[8,[[10,[3,9]]]],[[],[[12,[11]]]],[13,14],[[]],[[]],[3,15],0,0,[3,5],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],16],[[],16],[[2,8],[[10,[9]]]],[[3,8],[[10,[9]]]],[[2,8],[[10,[9]]]],[[3,8],[[10,[9]]]],0,[1,1],[1,1],[[]],[[]],[17,17],[[]],[[],1],[[],1],0,[[17,6],7],[[]],[8,[[10,[17,9]]]],[8,[[10,[17,9]]]],[[],[[12,[11]]]],[[]],[[17,15,4],5],[[]],[[],10],[[],10],[[],16],[[17,8],[[10,[9]]]],[[17,8],[[10,[9]]]],[[17,15,[19,[18]]],5],0,0,0,[1,1],[1,1],[[]],[[]],[20,20],[[]],[[],1],[[],1],0,[[20,6],7],[[]],[8,[[10,[20,9]]]],[8,[[10,[20,9]]]],[[],[[12,[11]]]],[[]],[[20,13],[[5,[14]]]],[[20,15,[19,[18]]],5],[[]],[[],10],[[],10],[[],16],[[20,8],[[10,[9]]]],[[20,8],[[10,[9]]]],[[20,15,[19,[18]]],5],0,[[]],[[]],[21,[[10,[4]]]],[[4,6],7],[[]],[[]],0,[[4,22],10],[[],10],[[],10],[[],16],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[23,23],[[]],0,[[13,24,13],[[5,[23]]]],[25,5],[[23,6],7],[[]],[[]],[[]],[[]],0,[[[27,[26]]],[[5,[25]]]],[[25,28,[19,[18]]],5],[[25,13,23],5],[[25,29],5],0,[[]],[[],10],[[],10],[[],10],[[],10],[[],16],[[],16]],"c":[],"p":[[3,"Command"],[4,"Command"],[3,"Conta"],[3,"Config"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"PathBuf"],[3,"TypeId"],[3,"Bump"],[3,"String"],[15,"slice"],[3,"Publish"],[8,"Deserializer"],[8,"Serializer"],[3,"Pos"],[15,"usize"],[3,"Sed"],[3,"Path"],[8,"AsRef"],[3,"VersionReq"],[3,"Version"]]},\
"elko":{"doc":"Zink’s package manager","t":"NEDNLLLLLLLLLMLLLLLLLLLLLLLFLLLLLLLLLLLLM","n":["Build","Command","Elko","New","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","run","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verbose"],"q":[[0,"elko"]],"d":["","elko commands","Zink’s package manager","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The main function.","","","","","","","","","","","","","Verbose mode (-v, -vv, -vvv, etc.)"],"i":[2,0,0,2,5,5,2,2,2,5,2,5,5,5,5,2,5,2,5,2,5,2,5,5,2,2,5,0,5,2,5,2,5,2,5,2,5,2,5,5,5],"f":[0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],[[2,3],4],[[5,3],4],[[]],[[]],[6,[[8,[2,7]]]],[6,[[8,[5,7]]]],[6,[[8,[2,7]]]],[6,[[8,[5,7]]]],[[],[[10,[9]]]],[11,12],[[]],[[]],[[],13],[5,14],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[2,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[[2,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[5,16],0],"c":[],"p":[[3,"Command"],[4,"Command"],[3,"Formatter"],[6,"Result"],[3,"Elko"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[6,"Result"],[6,"Result"],[3,"TypeId"],[15,"u8"]]},\
"evm_opcodes":{"doc":"Ethereum virtual machine opcode","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNENLLLLOLLKKLLOAKKKLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNLLLLLLLLLLLLLLLLL","n":["ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","Berlin","BlockInformation","Byzantium","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","ComparisonBitwiseLogic","Constantinople","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Duplication","EQ","EXP","EXTCODECOPY","EXTCODESIZE","EnvironmentalInformation","Exchange","Frontier","GAS","GASLIMIT","GASPRICE","GT","Group","INVALID","ISZERO","Istanbul","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","Logging","London","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","OpCode","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","Push","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","Sha3","ShangHai","Shanghai","StackMemoryStorageFlow","StopArithmetic","System","TIMESTAMP","Upgrade","XOR","borrow","borrow","borrow_mut","borrow_mut","for_each_shanghai_operator","from","from","gas","group","into","into","opcodes","shanghai","since","stack_in","stack_out","try_from","try_from","try_into","try_into","type_id","type_id","ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","EQ","EXP","EXTCODECOPY","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","ShangHai","TIMESTAMP","XOR","borrow","borrow_mut","clone","clone_into","fmt","from","from","gas","group","into","since","stack_in","stack_out","to_owned","try_from","try_into","type_id"],"q":[[0,"evm_opcodes"],[184,"evm_opcodes::shanghai"]],"d":["Addition operation.","Modulo addition operation.","Get address of currently executing account.","Bitwise AND operation.","Get balance of the given account.","Get the hash of one of the 256 most recent complete blocks.","Retrieve single byte from word.","Berlin","Block Information","Byzantium","Message-call into an account.","Message-call into this account with alternative …","Copy input data in current environment to memory.","Get input data of current environment.","Get size of input data in current environment.","Get caller address.","Get deposited value by the instruction/transaction …","Copy code running in current environment to memory.","Get size of code running in current environment.","Get the block’s beneficiary address.","Create a new account with associated","Create a new account with associated code at a specified …","Comparison &amp; Bitwise Logic Operations","Constantinople","Message-call into this account with an alternative …","Get the block’s difficulty.","Integer division operation.","Duplicate 1st stack item.","Duplicate 10th stack item.","Duplicate 11th stack item.","Duplicate 12th stack item.","Duplicate 13th stack item.","Duplicate 14th stack item.","Duplicate 15th stack item.","Duplicate 16th stack item.","Duplicate 2nd stack item.","Duplicate 3rd stack item.","Duplicate 4th stack item.","Duplicate 5th stack item.","Duplicate 6th stack item.","Duplicate 7th stack item.","Duplicate 8th stack item.","Duplicate 9th stack item.","Duplication Operations","Equality comparision.","Exponential operation.","Copy an account’s code to memory.","Get size of an account’s code.","Environmental Information","Exchange Operations","Frontier","Get the amount of available gas, including the …","Get the block’s gas limit.","Get price of gas in current environment","Greater-than comparision.","EVM opcode groups","Designated invalid instruction.","Simple not operator.","Istanbul","Alter the program counter.","Mark a valid destination for jumps.","Conditionally alter the program counter.","Append log record with no topics.","Append log record with one topic.","Append log record with two topics.","Append log record with three topics.","Append log record with four topics.","Less-than comparision.","Logging Operations","London","Load word from memory.","Modulo remainder operation.","Get the size of active memory in bytes.","Save word to memory.","Save byte to memory.","Multiplication operation.","Modulo multiplication operation.","Bitwise NOT operation.","Get the block’s number.","Bitwise OR operation.","Get execution origination address.","Ethereum virtual machine opcode.","Get the value of the program counter prior to the …","Remove item from stack.","Place 0 byte item on stack.","Place 1 byte item on stack.","Place 10-byte item on stack.","Place 11-byte item on stack.","Place 12-byte item on stack.","Place 13-byte item on stack.","Place 14-byte item on stack.","Place 15-byte item on stack.","Place 16-byte item on stack.","Place 17-byte item on stack.","Place 18-byte item on stack.","Place 19-byte item on stack.","Place 2-byte item on stack.","Place 20-byte item on stack.","Place 21-byte item on stack.","Place 22-byte item on stack.","Place 23-byte item on stack.","Place 24-byte item on stack.","Place 25-byte item on stack.","Place 26-byte item on stack.","Place 27-byte item on stack.","Place 28-byte item on stack.","Place 29-byte item on stack.","Place 3-byte item on stack.","Place 30-byte item on stack.","Place 31-byte item on stack.","Place 32-byte (full word) item on stack.","Place 4-byte item on stack.","Place 5-byte item on stack.","Place 6-byte item on stack.","Place 7-byte item on stack.","Place 8-byte item on stack.","Place 9-byte item on stack.","Push Operations","Halt execution returning output data.","Copy output data from the previous call to memory.","Get size of output data from the previous call from the …","Stop execution and revert state changes, without consuming …","Arithmetic (signed) right shift operation","Signed integer division operation (truncated).","Halt execution and register account for later deletion.","Signed greater-than comparision.","Compute Keccak-256 hash.","Left shift operation","Logical right shift operation","Extend length of two’s complement signed integer.","Load word from storage.","Signed less-than comparision.","Signed modulo remainder operation.","Save word to storage.","Static message-call into an account.","Halts execution.","Subtraction operation.","Exchange 1st and 2nd stack items.","Exchange 1st and 11th stack items.","Exchange 1st and 12th stack items.","Exchange 1st and 13th stack items.","Exchange 1st and 14th stack items.","Exchange 1st and 15th stack items.","Exchange 1st and 16th stack items.","Exchange 1st and 17th stack items.","Exchange 1st and 3rd stack items.","Exchange 1st and 4th stack items.","Exchange 1st and 5th stack items.","Exchange 1st and 6th stack items.","Exchange 1st and 7th stack items.","Exchange 1st and 8th stack items.","Exchange 1st and 9th stack items.","Exchange 1st and 10th stack items.","SHA3","Ethereum virtual machine opcode.","Shanghai","Stack, Memory, Storage and Flow Operations","Stop and Arithmetic Operations","System operations","Get the block’s timestamp.","Ethereum upgrades.","Bitwise XOR operation.","","","","","For each ShangHai operator.","Returns the argument unchanged.","Returns the argument unchanged.","The basic gas cost of the OpCode.","The group of the OpCode.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Ethereum virtual machine opcode generator.","Instructions for ShangHai (上海).","The OpCode is available since.","The stack input count.","The stack output count.","","","","","","","Addition operation.","Modulo addition operation.","Get address of currently executing account.","Bitwise AND operation.","Get balance of the given account.","Get the hash of one of the 256 most recent complete blocks.","Retrieve single byte from word.","Message-call into an account.","Message-call into this account with alternative …","Copy input data in current environment to memory.","Get input data of current environment.","Get size of input data in current environment.","Get caller address.","Get deposited value by the instruction/transaction …","Copy code running in current environment to memory.","Get size of code running in current environment.","Get the block’s beneficiary address.","Create a new account with associated","Create a new account with associated code at a specified …","Message-call into this account with an alternative …","Get the block’s difficulty.","Integer division operation.","Duplicate 1st stack item.","Duplicate 10th stack item.","Duplicate 11th stack item.","Duplicate 12th stack item.","Duplicate 13th stack item.","Duplicate 14th stack item.","Duplicate 15th stack item.","Duplicate 16th stack item.","Duplicate 2nd stack item.","Duplicate 3rd stack item.","Duplicate 4th stack item.","Duplicate 5th stack item.","Duplicate 6th stack item.","Duplicate 7th stack item.","Duplicate 8th stack item.","Duplicate 9th stack item.","Equality comparision.","Exponential operation.","Copy an account’s code to memory.","Get size of an account’s code.","Get the amount of available gas, including the …","Get the block’s gas limit.","Get price of gas in current environment","Greater-than comparision.","Designated invalid instruction.","Simple not operator.","Alter the program counter.","Mark a valid destination for jumps.","Conditionally alter the program counter.","Append log record with no topics.","Append log record with one topic.","Append log record with two topics.","Append log record with three topics.","Append log record with four topics.","Less-than comparision.","Load word from memory.","Modulo remainder operation.","Get the size of active memory in bytes.","Save word to memory.","Save byte to memory.","Multiplication operation.","Modulo multiplication operation.","Bitwise NOT operation.","Get the block’s number.","Bitwise OR operation.","Get execution origination address.","Get the value of the program counter prior to the …","Remove item from stack.","Place 0 byte item on stack.","Place 1 byte item on stack.","Place 10-byte item on stack.","Place 11-byte item on stack.","Place 12-byte item on stack.","Place 13-byte item on stack.","Place 14-byte item on stack.","Place 15-byte item on stack.","Place 16-byte item on stack.","Place 17-byte item on stack.","Place 18-byte item on stack.","Place 19-byte item on stack.","Place 2-byte item on stack.","Place 20-byte item on stack.","Place 21-byte item on stack.","Place 22-byte item on stack.","Place 23-byte item on stack.","Place 24-byte item on stack.","Place 25-byte item on stack.","Place 26-byte item on stack.","Place 27-byte item on stack.","Place 28-byte item on stack.","Place 29-byte item on stack.","Place 3-byte item on stack.","Place 30-byte item on stack.","Place 31-byte item on stack.","Place 32-byte (full word) item on stack.","Place 4-byte item on stack.","Place 5-byte item on stack.","Place 6-byte item on stack.","Place 7-byte item on stack.","Place 8-byte item on stack.","Place 9-byte item on stack.","Halt execution returning output data.","Copy output data from the previous call to memory.","Get size of output data from the previous call from the …","Stop execution and revert state changes, without consuming …","Arithmetic (signed) right shift operation","Signed integer division operation (truncated).","Halt execution and register account for later deletion.","Signed greater-than comparision.","Compute Keccak-256 hash.","Left shift operation","Logical right shift operation","Extend length of two’s complement signed integer.","Load word from storage.","Signed less-than comparision.","Signed modulo remainder operation.","Save word to storage.","Static message-call into an account.","Halts execution.","Subtraction operation.","Exchange 1st and 2nd stack items.","Exchange 1st and 11th stack items.","Exchange 1st and 12th stack items.","Exchange 1st and 13th stack items.","Exchange 1st and 14th stack items.","Exchange 1st and 15th stack items.","Exchange 1st and 16th stack items.","Exchange 1st and 17th stack items.","Exchange 1st and 3rd stack items.","Exchange 1st and 4th stack items.","Exchange 1st and 5th stack items.","Exchange 1st and 6th stack items.","Exchange 1st and 7th stack items.","Exchange 1st and 8th stack items.","Exchange 1st and 9th stack items.","Exchange 1st and 10th stack items.","Ethereum virtual machine opcode.","Get the block’s timestamp.","Bitwise XOR operation.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[6,6,6,6,6,6,6,3,2,3,6,6,6,6,6,6,6,6,6,6,6,6,2,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,2,2,3,6,6,6,6,0,6,6,3,6,6,6,6,6,6,6,6,6,2,3,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,0,3,2,2,2,6,0,6,2,3,2,3,0,2,3,10,10,2,3,0,0,10,10,10,2,3,2,3,2,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[],1],[[],2],[[]],[[]],0,0,[[],3],[[],1],[[],1],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[6,6],[[]],[[6,7],8],[[]],[9,6],[6,1],[6,2],[[]],[6,3],[6,1],[6,1],[[]],[[],4],[[],4],[[],5]],"c":[],"p":[[15,"u16"],[4,"Group"],[4,"Upgrade"],[4,"Result"],[3,"TypeId"],[4,"ShangHai"],[3,"Formatter"],[6,"Result"],[15,"u8"],[8,"OpCode"]]},\
"zingen":{"doc":"Code generation library for zink.","t":"DRNNGNDDDENNNNENNNNNNNDNNNDDNDNGNNNNCCAAMMAAMMMMMMMAMAMAMMMMAMMMMMMMAARQIILOKKDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMOLLLLMMLLLDLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLMLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLMLLLLLLLLLMLLLNEDNLLLLLLLLLLLLLMLLLMLLAALLLLLLLLLLLLLLLLFFDEDNNLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLLLLLMLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLALLLLALALALLLLLLLALLLLNNNNNENNNNNNNNNNGNNNNLLLLLLLLLLLLLIDLLLLKLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAOAOA","n":["Assembler","BUFFER_LIMIT","BinaryReader","Block","Buffer","BufferOverflow","CodeGen","ControlStack","ControlStackFrame","ControlStackFrameType","ControlStackUnderflow","DuplicateFunc","DuplicateJump","Else","Error","FuncNotFound","If","InvalidDepth","InvalidElseBlock","InvalidLocalIndex","InvalidMP","InvalidPC","JumpTable","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","LocalSlot","Locals","Loop","MacroAssembler","MemoryOutOfBounds","Result","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","ToLSBytes","Type","abi","asm","asm","buffer","codegen","control","control","env","func","gas","inner","inner","is_main","jump","jump","local","locals","masm","masm","mp","original_pc_offset","original_sp","result","result","sp","sp","stack","table","ty","ty","validator","visitor","ALIGNMENT_MASK","Output","ToLSBytes","Type","align","offset","size","to_ls_bytes","Assembler","_add","_addmod","_address","_and","_balance","_blockhash","_byte","_call","_callcode","_calldatacopy","_calldataload","_calldatasize","_caller","_callvalue","_codecopy","_codesize","_coinbase","_create","_create2","_delegatecall","_difficulty","_div","_dup1","_dup10","_dup11","_dup12","_dup13","_dup14","_dup15","_dup16","_dup2","_dup3","_dup4","_dup5","_dup6","_dup7","_dup8","_dup9","_eq","_exp","_extcodecopy","_extcodesize","_gas","_gaslimit","_gasprice","_gt","_invalid","_iszero","_jump","_jumpdest","_jumpi","_log0","_log1","_log2","_log3","_log4","_lt","_mload","_mod","_msize","_mstore","_mstore8","_mul","_mulmod","_not","_number","_or","_origin","_pc","_pop","_push0","_push1","_push10","_push11","_push12","_push13","_push14","_push15","_push16","_push17","_push18","_push19","_push2","_push20","_push21","_push22","_push23","_push24","_push25","_push26","_push27","_push28","_push29","_push3","_push30","_push31","_push32","_push4","_push5","_push6","_push7","_push8","_push9","_return","_returndatacopy","_returndatasize","_revert","_sar","_sdiv","_selfdestruct","_sgt","_sha3","_shl","_shr","_signextend","_sload","_slt","_smod","_sstore","_staticcall","_stop","_sub","_swap1","_swap10","_swap11","_swap12","_swap13","_swap14","_swap15","_swap16","_swap2","_swap3","_swap4","_swap5","_swap6","_swap7","_swap8","_swap9","_timestamp","_xor","borrow","borrow_mut","buffer","buffer","buffer_mut","decrement_mp","decrement_sp","default","emit","emit_op","emitn","from","gas","impl_opcodes","increment_gas","increment_mp","increment_sp","into","mp","sp","try_from","try_into","type_id","CodeGen","_block","_br","_br_if","_br_table","_call","_call_indirect","_else","_end","_global_get","_global_set","_if","_local_get","_local_get_calldata","_local_get_var","_local_set","_local_tee","_loop","_nop","_select","_unreachable","borrow","borrow_mut","control","emit_locals","emit_operators","env","finish","from","handle_call_return","handle_empty_return","handle_frame_popping","handle_jumpdest","handle_return","into","is_main","is_reachable","locals","masm","new","table","try_from","try_into","type_id","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i31_new","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_ref_as_non_null","visit_ref_func","visit_ref_is_null","visit_ref_null","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_try","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","Block","ControlStack","ControlStackFrame","ControlStackFrameType","Else","If","Loop","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","depth","eq","equivalent","equivalent","fmt","from","from","from","into","into","into","label_from_depth","mark_else","new","original_pc_offset","original_sp","pc_offset","pop","push","result","result","ret_ty","stack","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","Func","Jump","JumpTable","Label","borrow","borrow","borrow_mut","borrow_mut","call","call_offset","clone","clone_into","default","fmt","fmt","from","from","func","into","into","is_label","jump","label","merge","pc","relocate","relocate","shift_func_target","shift_label_pc","shift_label_target","shift_pc","shift_target","shift_targets","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_pc","offset","pc","LocalSlot","LocalSlotType","Locals","Parameter","Variable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get","get_mut","inner","inner","into","into","into","is_empty","len","new","offset_of","push","size","sp","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","val_ty","MacroAssembler","_abs","_ceil","_clz","_convert_i32_s","_convert_i32_u","_convert_i64_s","_convert_i64_u","_copysign","_ctz","_drop","_eqz","_f32_const","_f32_demote_f64","_f32_reinterpret_i32","_f64_const","_f64_promote_f32","_f64_reinterpret_i64","_floor","_ge","_gt","_i32_const","_i32_reinterpret_f32","_i32_wrap_i64","_i64_const","_i64_extend_i32_s","_i64_extend_i32_u","_i64_reinterpret_f64","_le","_load","_load16","_load32","_load8","_lt","_max","_memory_grow","_memory_size","_min","_ne","_nearest","_neg","_popcnt","_return","_rotl","_rotr","_sge","_sgt","_sle","_slt","_sqrt","_store","_store16","_store32","_store8","_sub","_trunc","_trunc_f32","_trunc_f64","asm","borrow","borrow_mut","cmp","default","deref","deref_mut","dup","float","from","integer","into","memory","memory_write","memory_write_at","mp_offset","pc_offset","push","shift_pc","sp","stack","swap","try_from","try_into","type_id","BinaryReader","BufferOverflow","ControlStackUnderflow","DuplicateFunc","DuplicateJump","Error","FuncNotFound","InvalidDepth","InvalidElseBlock","InvalidLocalIndex","InvalidMP","InvalidPC","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","MemoryOutOfBounds","Result","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","borrow","borrow_mut","fmt","fmt","from","from","into","provide","source","to_string","try_from","try_into","type_id","ReachableState","ValidateThenVisit","borrow","borrow_mut","from","into","is_reachable","try_from","try_into","type_id","validate_then_visit","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i31_new","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_op_when_unreachable","visit_ref_as_non_null","visit_ref_func","visit_ref_is_null","visit_ref_null","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_try","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","control","handlers","impl_visit_operator","local","map_wasm_operators","system"],"q":[[0,"zingen"],[70,"zingen::abi"],[78,"zingen::asm"],[242,"zingen::codegen"],[827,"zingen::control"],[881,"zingen::jump"],[923,"zingen::jump::relocate"],[925,"zingen::local"],[972,"zingen::masm"],[1055,"zingen::result"],[1089,"zingen::validator"],[1642,"zingen::visitor"]],"d":["Low level assembler implementation for EVM.","Maximum size of a evm bytecode in bytes.","Failed to parse WASM with binary reader.","The block control stack frame.","Code generation buffer.","Failed to push more data to the buffer.","The code generation abstraction.","The control stack.","Holds the necessary metadata to support the smission of …","The type of the control stack frame.","Failed to pop control stack frame.","Failed to register program counter to function index.","Failed to merge jump table.","The else control stack frame.","Codegen error","Failed to find function index in jump table.","The if control stack frame.","Failed to get frame info of the given depth.","Failed to mark else block for if block.","Failed to get local with given index.","Failed to get the offset of the given memory pointer.","Failed to construct program counter for jump.","Jump table implementation.","Failed to patch jump destination.","Failed to define local variable since the index is out of …","Failed to get local variables.","A local slot.","Solidity’s implementation uses 16 slots for locals. ref: …","The loop control stack frame.","EVM MacroAssembler.","Failed to index data on memory.","Codegen result","Failed to index data on stack.","Failed to pop stack.","Failed to increment stack pointer.","Failed to decrement stack pointer.","","","WASM ABI","Low level assembler implementation for EVM.","Low level assembler.","Buffer of the assembler.","Code generation implementation.","Data structures for control flow emission.","Control stack frames.","The function environment.","Function table.","Gas counter.","The type contained by this local slot.","","If this function is the main function.","Jump table implementation.","Jump table.","WASM local slot.","The defined locals for a function.","MacroAssembler used by the code generation.","The macro assembler.","Memory pointer for byte offset.","The program counter offset at the beginning of if.","Original stack pointer.","Codegen results","The return values of the block.","Stack pointer, maximum 12 items.","Stack pointer of the local slot.","Stack frames for control flow.","The jump table.","The type of the control stack frame.","The type of this local slot.","Pre-visitor for parsing WASM.","This module is the central place for machine code emission.","The alignment mask for 32 bytes (32 - 1).","Output buffer","Get the offset of this type in the lowest significant …","WASM type size for the stack representation of EVM.","Alignment the size of this type to bytes32 for the stack …","","Size in bytes.","Convert self to the lowest significant bytes.","Low level assembler implementation for EVM.","EmitADD","EmitADDMOD","EmitADDRESS","EmitAND","EmitBALANCE","EmitBLOCKHASH","EmitBYTE","EmitCALL","EmitCALLCODE","EmitCALLDATACOPY","EmitCALLDATALOAD","EmitCALLDATASIZE","EmitCALLER","EmitCALLVALUE","EmitCODECOPY","EmitCODESIZE","EmitCOINBASE","EmitCREATE","EmitCREATE2","EmitDELEGATECALL","EmitDIFFICULTY","EmitDIV","EmitDUP1","EmitDUP10","EmitDUP11","EmitDUP12","EmitDUP13","EmitDUP14","EmitDUP15","EmitDUP16","EmitDUP2","EmitDUP3","EmitDUP4","EmitDUP5","EmitDUP6","EmitDUP7","EmitDUP8","EmitDUP9","EmitEQ","EmitEXP","EmitEXTCODECOPY","EmitEXTCODESIZE","EmitGAS","EmitGASLIMIT","EmitGASPRICE","EmitGT","EmitINVALID","EmitISZERO","EmitJUMP","EmitJUMPDEST","EmitJUMPI","EmitLOG0","EmitLOG1","EmitLOG2","EmitLOG3","EmitLOG4","EmitLT","EmitMLOAD","EmitMOD","EmitMSIZE","EmitMSTORE","EmitMSTORE8","EmitMUL","EmitMULMOD","EmitNOT","EmitNUMBER","EmitOR","EmitORIGIN","EmitPC","EmitPOP","EmitPUSH0","EmitPUSH1","EmitPUSH10","EmitPUSH11","EmitPUSH12","EmitPUSH13","EmitPUSH14","EmitPUSH15","EmitPUSH16","EmitPUSH17","EmitPUSH18","EmitPUSH19","EmitPUSH2","EmitPUSH20","EmitPUSH21","EmitPUSH22","EmitPUSH23","EmitPUSH24","EmitPUSH25","EmitPUSH26","EmitPUSH27","EmitPUSH28","EmitPUSH29","EmitPUSH3","EmitPUSH30","EmitPUSH31","EmitPUSH32","EmitPUSH4","EmitPUSH5","EmitPUSH6","EmitPUSH7","EmitPUSH8","EmitPUSH9","EmitRETURN","EmitRETURNDATACOPY","EmitRETURNDATASIZE","EmitREVERT","EmitSAR","EmitSDIV","EmitSELFDESTRUCT","EmitSGT","EmitSHA3","EmitSHL","EmitSHR","EmitSIGNEXTEND","EmitSLOAD","EmitSLT","EmitSMOD","EmitSSTORE","EmitSTATICCALL","EmitSTOP","EmitSUB","EmitSWAP1","EmitSWAP10","EmitSWAP11","EmitSWAP12","EmitSWAP13","EmitSWAP14","EmitSWAP15","EmitSWAP16","EmitSWAP2","EmitSWAP3","EmitSWAP4","EmitSWAP5","EmitSWAP6","EmitSWAP7","EmitSWAP8","EmitSWAP9","EmitTIMESTAMP","EmitXOR","","","Buffer of the assembler.","Buffer of the assembler.","Mutable buffer of the assembler.","Decrement memory pointer","Decrement stack pointer","","Emit a byte.","Emit a single opcode.","Emit n bytes.","Returns the argument unchanged.","Gas counter.","","Increment the gas counter.","Increment memory pointer","Increment stack pointer","Calls <code>U::from(self)</code>.","Memory pointer for byte offset.","Stack pointer, maximum 12 items.","","","","The code generation abstraction.","The begeinning of a block construct. A sequence of …","Branch to a given label in an enclosing construct.","Performs a conditional branch if i32 is non-zero.","A jump table which jumps to a label in an enclosing …","The call instruction calls a function specified by its …","The call indirect instruction calls a function indirectly …","Marks an else block of an if.","Handle the end of instructions for different situations.","This instruction gets the value of a variable.","This instruction sets the value of a variable.","The beginning of an if construct with an implicit block.","This instruction gets the value of a variable.","Local get from calldata.","Local get for variables.","This instruction sets the value of a variable.","This _local_tee is like _local_set, but it also returns …","A block with a label which may be used to form loops.","Perform nothing in EVM bytecode.","The select instruction selects one of its first two …","Mark as invalid for now.","","","Control stack frames.","Emit function locals","Emit function operators","The function environment.","Finish code generation.","Returns the argument unchanged.","Handle the return of a call.","","Handle the popping of a frame.","Handle jumpdest.","Handle the end of the function.","Calls <code>U::from(self)</code>.","If this function is the main function.","","The defined locals for a function.","The macro assembler.","Create a new code generator.","The jump tablehe block control stack frame.","The control stack.","Holds the necessary metadata to support the smission of …","The type of the control stack frame.","The else control stack frame.","The if control stack frame.","The loop control stack frame.","","","","","","","","","","","","The total depth of the control stack.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the label of the control stack frame at given depth.","Mark the else block of an if.","Create a new control stack frame.","The program counter offset at the beginning of if.","Original stack pointer.","Get the offset of the orginal program counter.","Pop a control stack frame.","Push a control stack frame.","Get the result type of the control stack frame.","The return values of the block.","Get the return type of the control stack frame at given …","Stack frames for control flow.","","","","","","","","","Get the type of the control stack frame at given depth.","The type of the control stack frame.","","","","Jump to function.","Jump types","Jump table implementation.","Jump to the given label, the label here is the original …","","","","","Register a function.","Register program counter to the function table.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Function table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the target is a label.","Jump table.","Register a label.","Merge two jump tables.","Program counter handlers.","Program Relocations","Relocate program counter to all registered labels.","Shift program counter for functions.","Shift program counter for labels.","Shift target program counter for labels.","Shift program counter for all items.","Shift the program counter of targets with given ptr and …","Shift the target program counters.","Get the target of a jump.","","","","","","","","Update program counter for all items.","Get the offset of the program counter for relocation.","Relocate program counter to buffer.","A local slot.","The type of a local slot.","Solidity’s implementation uses 16 slots for locals. ref: …","A function parameter.","A local variable.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get local from index.","Get mutate local from index.","The type contained by this local slot.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the locals are empty.","Get the length of locals","Create a new local slot.","Get the lower significant bytes of the byte offset of a …","Push a local slot.","","Stack pointer of the local slot.","","","","","","","Get the type of this local slot.","The type of this local slot.","","","","Get the value type of this local slot.","EVM MacroAssembler.","Absolute value","Ceiling operator","sign-agnostic count leading zero bits","Convert a signed 32-bit integer to a (32-bit/64-bit) float","Convert an unsigned 32-bit integer to a (32-bit/64-bit) …","Convert a signed 32-bit integer to a (32-bit/64-bit) float","Convert a unsigned 32-bit integer to a (32-bit/64-bit) …","If z1 and z2 have the same sign, return z1, otherwise …","sign-agnostic count leading zero bits","The drop instruction simply throw away a single operand.","Simple not operator","Push a 32-bit float value on the stack.","Truncate a 64-bit float to a signed 32-bit integer.","Convert a 32-bit float to a signed 32-bit integer.","Push a 64-bit float value on the stack.","Truncate a 64-bit float to an unsigned 32-bit integer.","Convert a 64-bit float to a signed 64-bit integer.","Floor operator","Greater than or equal comparison.","Greater than comparison.","Push a 32-bit integer value on the stack.","Convert a signed 32-bit integer to a 32-bit float.","wrap a 64-bit integer to a 32-bit integer.","Push a 64-bit integer value on the stack.","Extend a signed 32-bit integer to a 64-bit integer.","Extend an unsigned 32-bit integer to a 64-bit integer.","Convert a signed 64-bit integer to a 64-bit float.","Greater than or equal comparison.","Load n bytes to extend self as another number type.","Load 2 bytes to extend self as another number type.","Load 4 bytes to extend self as another number type.","Load 1 byte to extend self as another number type.","less than comparison.","Maximum of two values","The memory grow instruction grows memory by a given delta …","The memory size instruction returns the current size of …","Minium of two values","Sign-agnostic compare unequal.","Round to nearest integer, ties to even.","Negation","sign-agnostic count number of one bits","Return zero or more values from the function.","sign-agnostic rotate left","sign-agnostic rotate right","Greater than or equal comparison.","Greater than and equal comparison.","Greater than or equal comparison.","less than or equal comparison.","Square root","Store n bytes in memory.","Wrap self to i16 and store 2 bytes","Wrap self to i32 and store 4 bytes","Wrap self to i8 and store 1 byte","Sub two numbers.","Round to nearest integer towards zero","Truncate a 32-bit float to an integer","Truncate a 64-bit float to an integer","Low level assembler.","","","","","","","Duplicate stack item by target index.","Float Instructions","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Memory Instructions","Store data in memory with at current memory byte pointer.","Store data in memory at offset.","Get byte offset of the memory pointer.","Get the current program counter offset.","Place n bytes on stack.","Shift the program counter to the bottom or the top of the …","Get the stack pointer.","Stack Instructions","Swap memory by target index.","","","","Failed to parse WASM with binary reader.","Failed to push more data to the buffer.","Failed to pop control stack frame.","Failed to register program counter to function index.","Failed to merge jump table.","Codegen error","Failed to find function index in jump table.","Failed to get frame info of the given depth.","Failed to mark else block for if block.","Failed to get local with given index.","Failed to get the offset of the given memory pointer.","Failed to construct program counter for jump.","Failed to patch jump destination.","Failed to define local variable since the index is out of …","Failed to get local variables.","Failed to index data on memory.","Codegen result","Failed to index data on stack.","Failed to pop stack.","Failed to increment stack pointer.","Failed to decrement stack pointer.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Trait to handle reachability state.","A pre-visitor that validates the WASM and then visits it.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if the current state of the program is …ontrol flow visitors","Case handlers","A macro to define unsupported WebAssembly operators.","Local instructions","Implement arithmetic operators for types.","System instructions"],"i":[0,0,46,33,0,46,0,0,0,0,46,46,46,33,0,46,33,46,46,46,46,46,0,46,46,46,0,0,33,0,46,0,46,46,46,46,0,0,0,0,43,2,0,0,11,11,19,2,40,38,11,0,19,0,11,0,11,2,21,21,0,21,2,40,34,11,21,40,0,0,0,55,0,0,44,0,44,55,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,33,0,0,0,33,33,33,33,21,34,33,21,34,33,21,33,21,34,34,33,33,33,33,33,21,34,33,21,34,34,34,21,21,21,21,34,34,21,21,34,34,33,21,33,21,34,33,21,34,34,21,33,21,34,37,0,0,37,37,19,37,19,19,19,37,37,19,37,19,37,19,19,37,19,37,19,19,19,0,0,19,19,19,19,19,19,19,19,37,37,19,37,19,37,19,19,0,0,0,0,0,39,39,39,40,38,39,40,38,38,39,39,39,39,40,38,39,40,38,38,38,40,38,39,40,38,38,38,40,38,38,40,40,39,40,38,39,40,38,40,40,39,40,38,40,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,43,43,43,43,0,43,0,43,0,43,43,43,43,43,43,43,0,43,43,43,43,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,53,53,53,53,56,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[[],1],[[]],0,[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[[]],[[]],[2,[[5,[4]]]],0,[2,6],[[2,1],3],[[2,4],3],[[],2],[[2,4]],[[2,7],3],[[2,[5,[4]]]],[[]],0,0,[[2,8]],[[2,1],3],[[2,4],3],[[]],0,0,[[],9],[[],9],[[],10],0,[[11,12],3],[[11,13],3],[[11,13],3],[[11,14],3],[[11,13],3],[[11,13,13,4],3],[11,3],[11,3],[[11,13],3],[[11,13],3],[[11,12],3],[[11,13],3],[[11,1],3],[[11,1],3],[[11,13],3],[[11,13],3],[[11,12],3],[11,3],[11,3],[11,3],[[]],[[]],0,[[11,15,[17,[16]]],3],[[11,18,[17,[16]]],3],0,[[11,19,20],[[3,[6]]]],[[]],[11,3],[11,3],[[11,21],3],[[11,20],3],[11,3],[[]],0,[11,22],0,0,[[23,22],[[3,[11]]]],0,[[],9],[[],9],[[],10],[11],[[11,12]],[[11,13]],[[11,13]],[[11,13]],[[11,13]],[[11,14]],[[11,13]],[[11,13,13,4]],[[11,13]],[[11,13]],[11],[[11,13]],[[11,13]],[11],[[11,13]],[11],[11],[11],[11],[11],[[11,24]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[[11,26]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[[11,13]],[[11,13]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[11],[[11,27]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[11],[[11,28]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[[11,4]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[11,4]],[11],[11],[11],[[11,[29,[4]]]],[11],[11],[11],[11],[11],[[11,12]],[[11,13]],[[11,13]],[[11,13]],[[11,12]],[[11,25]],[[11,25]],[[11,25]],[[11,13,13]],[[11,13]],[[11,13]],[[11,13,4]],[[11,13,13]],[[11,13,4]],[11],[11],[[11,13]],[11],[[11,30]],[[11,13]],[11],[[11,13]],[[11,13,13]],[[11,13]],[11],[[11,13,13]],[[11,13]],[[11,13]],[[11,13]],[[11,13,13]],[[11,13]],[[11,13]],[[11,13]],[[11,12]],[[11,31]],[11],[11],[11],[11],[11],[[11,32]],[[11,25]],[[11,25,4]],[[11,25]],[[11,25]],[[11,25]],[[11,25,4]],[[11,25]],[[11,25]],[[11,25]],[[11,25]],[[11,25,4]],[[11,25]],[[11,25]],[[11,25,4]],[[11,25]],[[11,25]],[[11,25]],[11],[11],[[11,25]],[[11,25,4]],[[11,25,4]],[[11,25,4]],[[11,25,4]],[11],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[21,21],[[]],[[]],[[],34],[34,1],[[33,33],22],[[],22],[[],22],[[33,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[34,13],[[3,[20]]]],[34,[[3,[21]]]],[[33,20,4,12],21],0,0,[21,20],[34,[[3,[21]]]],[[34,21]],[21,12],0,[[34,1],[[3,[12]]]],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[34,1],[[3,[33]]]],0,[[],10],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[19,20,13],3],[[19,13,20],3],[37,37],[[]],[[],19],[[37,35],36],[[19,35],36],[[]],[[]],0,[[]],[[]],[37,22],0,[[19,20,20]],[[19,19,20],3],0,0,[[19,6],3],[[19,20,20],3],[[19,20,20],3],[[19,20,20],3],[[19,20,20],3],[[19,20,20],3],[19,3],[[19,37],[[3,[20]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[19,3],[20,[[3,[20]]]],[[6,20,20,20],3],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[39,39],22],[[],22],[[],22],[[39,35],36],[[40,35],36],[[38,35],36],[[]],[[]],[[]],[[38,1],[[3,[40]]]],[[38,1],[[3,[40]]]],0,0,[[]],[[]],[[]],[38,22],[38,1],[[31,39,1],40],[[38,1],[[3,[[41,[[29,[4]]]]]]]],[[38,[42,[40]]]],[40,1],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[40,39],0,[[],10],[[],10],[[],10],[40,31],0,[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[[43,24],3],[43,3],[43,3],[[43,26],3],[43,3],[43,3],[43,3],[43,3],[43,3],[[43,27],3],[43,3],[43,3],[[43,28],3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[[43,13,4],3],[[43,13,4],3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],0,[[]],[[]],0,[[],43],[43],[43],[[43,4],3],0,[[]],0,[[]],0,[[43,44],[[3,[1]]]],[[43,[5,[4]]],3],[[43,45],[[3,[[41,[[29,[4]]]]]]]],[43,20],[[43,[5,[4]]],3],[[43,4,22],3],[43,4],0,[[43,4],3],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[46,35],36],[[46,35],36],[47,46],[[]],[[]],[48],[46,[[50,[49]]]],[[],51],[[],9],[[],9],[[],10],0,0,[[]],[[]],[[]],[[]],[[],22],[[],9],[[],9],[[],10],0,[[[53,[52]]]],[[[53,[52]],12]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],14]],[[[53,[52]],13]],[[[53,[52]],13,13,4]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],24]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],26]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]],27]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]],28]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],4]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],[29,[4]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],12]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],12]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],13,13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13,4]],[[[53,[52]],13,13]],[[[53,[52]],13,4]],[[[53,[52]]]],[54,22],[[[53,[52]]]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]],30]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]],13]],[[[53,[52]],13,13]],[[[53,[52]],13]],[[[53,[52]]]],[[[53,[52]],13,13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13,13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],13]],[[[53,[52]],12]],[[[53,[52]],31]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],32]],[[[53,[52]],25]],[[[53,[52]],25,4]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25,4]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25,4]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25,4]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]],25]],[[[53,[52]]]],[[[53,[52]]]],[[[53,[52]],25]],[[[53,[52]],25,4]],[[[53,[52]],25,4]],[[[53,[52]],25,4]],[[[53,[52]],25,4]],[[[53,[52]]]],0,0,0,0,0,0],"c":[],"p":[[15,"usize"],[3,"Assembler"],[6,"Result"],[15,"u8"],[15,"slice"],[6,"Buffer"],[4,"ShangHai"],[15,"u128"],[4,"Result"],[3,"TypeId"],[3,"CodeGen"],[4,"BlockType"],[15,"u32"],[3,"BrTable"],[3,"LocalsReader"],[3,"ValidatorResources"],[3,"FuncValidator"],[3,"OperatorsReader"],[3,"JumpTable"],[15,"u16"],[3,"ControlStackFrame"],[15,"bool"],[3,"FuncType"],[3,"Ieee32"],[3,"MemArg"],[3,"Ieee64"],[15,"i32"],[15,"i64"],[15,"array"],[4,"HeapType"],[4,"ValType"],[3,"V128"],[4,"ControlStackFrameType"],[3,"ControlStack"],[3,"Formatter"],[6,"Result"],[4,"Jump"],[3,"Locals"],[4,"LocalSlotType"],[3,"LocalSlot"],[3,"SmallVec"],[8,"Into"],[3,"MacroAssembler"],[8,"Type"],[8,"Fn"],[4,"Error"],[3,"BinaryReaderError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[8,"VisitOperator"],[3,"ValidateThenVisit"],[4,"Operator"],[8,"ToLSBytes"],[8,"ReachableState"]]},\
"zink":{"doc":"","t":"F","n":["panic"],"q":[[0,"zink"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"PanicInfo"],[15,"never"]]},\
"zinkc":{"doc":"Zink Compiler","t":"DLLLLLLMLLLLLLFLLLLLLLM","n":["Zinkc","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","compile","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbose","verbose"],"q":[[0,"zinkc"]],"d":["Zink Compiler","","","","","","","The entry of the zinkc compiler.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","The main function.","","","","","","","","Verbose mode (-v, -vv, -vvv, etc.)"],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],[[]],[[],10],[2,11],[[],7],[[],7],[[],12],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],[2,13],0],"c":[],"p":[[3,"Command"],[3,"Zinkc"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[6,"Result"],[3,"TypeId"],[15,"u8"]]},\
"zinkup":{"doc":"Zink command line tool","t":"IDDDAAAMMMAMMMMMKLAKDLLLLLLLLLLLMLMMMLLLLLLCCCDLLLLLLLLLLLMLMLLLLLLRRDRLLLLLLLLLLLLLMMLLLLLLNNNENNDENGDNLLLMLLLLLLLLMAMMMMMMALLLADDDDMLLLLLLLLLLLLLLLLMLLLLMLLLLMLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLMMNNENNGNLLLLLLLLLLLLLLLLLLLDLLLLLLMLLMLMMLLMLLLLLL","n":["App","Build","Compile","New","build","commands","compile","input","input","name","new","out_dir","output","output","path","release","run","start","utils","verbose","Build","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","out_dir","output","release","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Build","Compile","New","Compile","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","ADDITION","NAME","New","README","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","name","name","path","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Anyhow","CargoMetadata","Debug","Error","Etc","Io","Manifest","Profile","Release","Result","WasmBuilder","WasmOpt","as_ref","borrow","borrow_mut","dependencies","eq","equivalent","equivalent","equivalent","equivalent","from","from","into","lib","manifest","metadata","out_dir","output","package","package","profile","result","try_from","try_into","type_id","wasm","Dependencies","Lib","Manifest","Package","authors","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","crate_type","default","default","default","default","dependencies","deserialize","deserialize","deserialize","deserialize","edition","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","lib","name","name","package","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","zink","Anyhow","CargoMetadata","Error","Etc","Io","Result","WasmOpt","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","header","in_current_span","into","provide","source","to_string","try_from","try_into","type_id","WasmBuilder","borrow","borrow_mut","build","compile","from","into","metadata","new","out_dir","out_dir","output","output","package","post","profile","profile","try_from","try_into","type_id","with_out_dir","with_output","with_profile"],"q":[[0,"zinkup"],[20,"zinkup::build"],[43,"zinkup::commands"],[46,"zinkup::compile"],[67,"zinkup::new"],[92,"zinkup::utils"],[129,"zinkup::utils::manifest"],[199,"zinkup::utils::result"],[225,"zinkup::utils::wasm"]],"d":["Shared application interface.","Build zink project to EVM bytecode.","Compile WASM to EVM bytecode.","Create a new zink project.","Command <code>Build</code>.","","Command <code>Compile</code>.","The path of the cargo project.","The path of the wasm file.","The name of the project.","Command <code>New</code>","Write output to compiler-chosen filename in &lt;dir&gt;","Write output to &lt;filename&gt;","Write output to ","","Optimize with default optimizations","Run application.","Start application.","CLI Utils","Verbose logging level.","Build zink project to EVM bytecode.","","","","","","","","Returns the argument unchanged.","","","","The path of the cargo project.","Calls <code>U::from(self)</code>.","Write output to compiler-chosen filename in &lt;dir&gt;","Write output to &lt;filename&gt;","Optimize with default optimizations","Run build","","","","","","","","","Compile WASM to EVM bytecode.","","","","","","","","Returns the argument unchanged.","","","","The path of the wasm file.","Calls <code>U::from(self)</code>.","Write output to ","Run compile.","","","","","","","","Create a new zink project.","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Get the project name.","The name of the project.","","Create a new zink project.","","","","","","Anyhow error","Cargo metadata error","Debug profile.","Zinkc errors","Cargo package error","IO error","Cargo Manifest for the zink project.","Compliation profile.","Release profile.","Zinkc result","WASM Builder","Serde JSON error","","","","Dependencies of the cargo project.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Lib section of cargo manifest.","Cargo Manifest for the zink project.","","","","","Package section of cargo manifest.","","Zinkup result","","","","WASM Builder","Dependencies of the cargo project.","Lib section of cargo manifest.","Cargo Manifest for the zink project.","Cargo package.","Package authors.","","","","","","","","","","","","","","","","","The crate type of cargo project.","","","","","Dependencies of the cargo project.","","","","","Rust edition.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lib section of cargo manifest.","Set package name","Package name.","Package section of cargo manifest.","","","","","","","","","","","","","","","","","","","","","Package version.","Zink dependency.","Anyhow error","Cargo metadata error","Zinkc errors","Cargo package error","IO error","Zinkc result","Serde JSON error","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","WASM Builder","","","Run the WASM Builder.","Compile project to WASM.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new WASM Builder.","Get the output directory.","","Get the output filename.","","","Post processing the built WASM files.","Get the profile.","","","","","Set the output directory.","Set the output filename.","Set the profile."],"i":[0,0,0,0,0,0,0,6,15,16,0,6,6,15,16,6,42,42,0,42,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,27,27,18,0,27,27,0,0,18,0,0,27,18,18,18,24,18,18,18,18,18,18,18,18,24,0,38,38,38,38,24,38,0,18,18,18,0,0,0,0,0,21,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,22,21,22,23,24,24,21,22,23,24,21,21,22,23,24,21,22,23,24,21,22,23,24,24,24,21,24,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,21,23,27,27,0,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],3],0,[[],4],0,[5,5],[5,5],[[]],[[]],[[],5],[[],5],[[6,7],8],[[]],[9,[[2,[6,10]]]],[9,[[2,[6,10]]]],[[],[[12,[11]]]],0,[[]],0,0,0,[6,13],[[],2],[[],2],[[],14],[[6,9],[[2,[10]]]],[[6,9],[[2,[10]]]],0,0,0,0,[5,5],[5,5],[[]],[[]],[[],5],[[],5],[[15,7],8],[[]],[9,[[2,[15,10]]]],[9,[[2,[15,10]]]],[[],[[12,[11]]]],0,[[]],0,[15,13],[[],2],[[],2],[[],14],[[15,9],[[2,[10]]]],[[15,9],[[2,[10]]]],0,0,0,0,[5,5],[5,5],[[]],[[]],[[],5],[[],5],[[16,7],8],[[]],[9,[[2,[16,10]]]],[9,[[2,[16,10]]]],[[],[[12,[11]]]],[[]],[16,[[13,[17]]]],0,0,[16,13],[[],2],[[],2],[[],14],[[16,9],[[2,[10]]]],[[16,9],[[2,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[18,19],[[]],[[]],0,[[18,18],20],[[],20],[[],20],[[],20],[[],20],[19,18],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],2],[[],2],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],0,[[],21],[[],22],[[],23],[[],24],0,[25,[[2,[21]]]],[25,[[2,[22]]]],[25,[[2,[23]]]],[25,[[2,[24]]]],0,[[21,7],8],[[22,7],8],[[23,7],8],[[24,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[24,19],24],0,0,[[21,26],2],[[22,26],2],[[23,26],2],[[24,26],2],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,[[]],[[]],[[27,7],8],[[27,7],8],[28,27],[[]],[1,27],[29,27],[30,27],[31,27],[[[0,[32,33,34]]],[[35,[[0,[32,33,34]]]]]],[[]],[[]],[36],[27,[[12,[37]]]],[[],17],[[],2],[[],2],[[],14],0,[[]],[[]],[38,39],[38,39],[[]],[[]],0,[[[41,[40]]],[[39,[38]]]],[38,[[39,[40]]]],0,[38,[[39,[40]]]],0,0,[38,39],[38,18],0,[[],2],[[],2],[[],14],[[38,[41,[40]]],38],[[38,[41,[40]]],38],[[38,[41,[18]]],38]],"c":[],"p":[[3,"Error"],[4,"Result"],[6,"Result"],[15,"u8"],[3,"Command"],[3,"Build"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"],[3,"Compile"],[3,"New"],[3,"String"],[4,"Profile"],[15,"str"],[15,"bool"],[3,"Package"],[3,"Lib"],[3,"Dependencies"],[3,"Manifest"],[8,"Deserializer"],[8,"Serializer"],[4,"Error"],[4,"OptimizationError"],[4,"Error"],[4,"Error"],[3,"Error"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"Demand"],[8,"Error"],[3,"WasmBuilder"],[6,"Result"],[3,"PathBuf"],[8,"Into"],[8,"App"]]},\
"zint":{"doc":"Zink testing framework.","t":"INNNNNNNDNDENNNNNNNNNNNNNNNNNNNNNLLALLLLLALLMMMMLMKLLLLIOKNNNNNNNDNRDENNNNNNNNNNNNNNNNNNNNNLLLLLLLLMMMMLLLMLLLLLLL","n":["Bytes32","CallNotAllowedInsideStatic","CallTooDeep","Continue","CreateCollision","CreateContractSizeLimit","CreateContractStartingWithEF","CreateInitcodeSizeLimit","EVM","FatalExternalError","Info","InstructionResult","InvalidFEOpcode","InvalidJump","InvalidOperandOOG","MemoryLimitOOG","MemoryOOG","NonceOverflow","NotActivated","OpcodeNotFound","OutOfFund","OutOfGas","OutOfOffset","OverflowPayment","PrecompileError","PrecompileOOG","Return","Revert","SelfDestruct","StackOverflow","StackUnderflow","StateChangeDuringStaticCall","Stop","borrow","borrow_mut","bytes","clone","clone_into","eq","equivalent","equivalent","evm","fmt","from","gas","host","instr","interpreter","into","ret","to_bytes32","to_owned","try_from","try_into","type_id","Bytes32","impl_bytes32","to_bytes32","CallNotAllowedInsideStatic","CallTooDeep","Continue","CreateCollision","CreateContractSizeLimit","CreateContractStartingWithEF","CreateInitcodeSizeLimit","EVM","FatalExternalError","INITIAL_GAS","Info","InstructionResult","InvalidFEOpcode","InvalidJump","InvalidOperandOOG","MemoryLimitOOG","MemoryOOG","NonceOverflow","NotActivated","OpcodeNotFound","OutOfFund","OutOfGas","OutOfOffset","OverflowPayment","PrecompileError","PrecompileOOG","Return","Revert","SelfDestruct","StackOverflow","StackUnderflow","StateChangeDuringStaticCall","Stop","borrow","borrow","borrow_mut","borrow_mut","execute","fmt","from","from","gas","host","instr","interpreter","into","into","new","ret","run","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"zint"],[55,"zint::bytes"],[58,"zint::evm"]],"d":["Trait for converting type to bytes32.","","","","","Create init code size exceeds limit (runtime).","Error on created contract that begins with EF","EIP-3860: Limit and meter initcode. Initcode size limit …","EVM interpreter.","","EVM execution result info.","","","","","","","","","","","","","","","","","","","","","","","","","Utils for bytes conversion.","","","","","","Re-export REVM intepreter for testing usages.","","Returns the argument unchanged.","Gas spent.","","The last instruction.","","Calls <code>U::from(self)</code>.","Return value.","Convert type to the lowest significant bytes 32.","","","","","Trait for converting type to bytes32.","Implement Bytes32 for types.","Convert type to the lowest significant bytes 32.","","","","","Create init code size exceeds limit (runtime).","Error on created contract that begins with EF","EIP-3860: Limit and meter initcode. Initcode size limit …","EVM interpreter.","","","EVM execution result info.","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a contract.","","Returns the argument unchanged.","Returns the argument unchanged.","Gas spent.","","The last instruction.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new EVM instance.","Return value.","Run a contract.","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,10,9,10,9,1,10,13,1,1,1,1,0,0,13,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,10,9,10,9,10,9,10,10,9,10,9,9,10,9,10,9,9,10,9,10,9,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[1,1],[[]],[[1,1],2],[[],2],[[],2],0,[[1,3],[[5,[4]]]],[[]],0,0,0,0,[[]],0,[[],[[7,[6]]]],[[]],[[],5],[[],5],[[],8],0,0,[[],[[7,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[9,10],[[10,3],11],[[]],[[]],0,0,0,0,[[]],[[]],[[[12,[6]],[12,[6]]],9],0,[[[12,[6]],[12,[6]]],10],[[],5],[[],5],[[],5],[[],5],[[],8],[[],8]],"c":[],"p":[[4,"InstructionResult"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"u8"],[15,"array"],[3,"TypeId"],[3,"EVM"],[3,"Info"],[6,"Result"],[15,"slice"],[8,"Bytes32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};

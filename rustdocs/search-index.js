var searchIndex = new Map(JSON.parse('[["elko",{"t":"FFFONNNNCNNOONNNNNOONOCOOOONNNNNNCFNNNNNNONNNNNONOONNNNNNSSFSNNNNNNNNNNNNNOONNNNNNPPPGPPFPIFOOCOOOOOCCFFFFONNNNNNNNNNNNNNNNNNNNONNNNONNNNONNNNNNNNNNNNONOONNNNNNNNNNNNNNNNNNNNOOPPPGPPPINNNNNNNNNNNNNNNNNFNNNNNNONNONOONNNNNN","n":["Build","Compile","New","abi","augment_args","augment_args_for_update","borrow","borrow_mut","build","command","command_for_update","config","dispatcher","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","","into","name","new","out_dir","output","","path","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","Build","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","config","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","out_dir","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","ADDITION","NAME","New","README","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","name","","path","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Anyhow","CargoMetadata","Err","Error","Etc","Io","Manifest","Ok","Result","WasmBuilder","dependencies","lib","manifest","metadata","out_dir","output","package","","result","wasm","Dependencies","Lib","Manifest","Package","authors","borrow","","","","borrow_mut","","","","clone","","","","clone_into","","","","clone_to_uninit","","","","crate_type","default","","","","dependencies","deserialize","","","","edition","fmt","","","","from","","","","into","","","","lib","name","","package","serialize","","","","to_owned","","","","try_from","","","","try_into","","","","type_id","","","","version","zink","Anyhow","CargoMetadata","Err","Error","Etc","Io","Ok","Result","borrow","borrow_mut","fmt","","from","","","","","header","in_current_span","into","source","to_string","try_from","try_into","type_id","WasmBuilder","borrow","borrow_mut","build","compile","from","into","metadata","new","out_dir","","output","","package","post","try_from","try_into","type_id","with_out_dir","with_output"],"q":[[0,"elko"],[34,"elko::build"],[57,"elko::new"],[82,"elko::utils"],[102,"elko::utils::manifest"],[176,"elko::utils::result"],[201,"elko::utils::wasm"],[221,"clap_builder::builder::command"],[222,"zinkc::cli"],[223,"core::fmt"],[224,"core::result"],[225,"clap_builder::parser::matches::arg_matches"],[226,"clap_builder::error"],[227,"clap_builder::util::id"],[228,"core::option"],[229,"anyhow"],[230,"core::any"],[231,"clap_builder"],[232,"alloc::string"],[233,"serde::de"],[234,"serde::ser"],[235,"std::io::error"],[236,"etc::error"],[237,"cargo_metadata::errors"],[238,"color_eyre::section"],[239,"core::marker"],[240,"core::error"],[241,"std::path"],[242,"core::convert"]],"i":"```h0000`00An111111011Bf`1120222222``1111111111111111111111````000000000000000000000Ch0Dl`11`0``C`0`Dj0001``````Bj0BlBn421042104210421041210442104221042104210444242104210421042104210420665`665`66666666666666666`3333333333333333333","f":"````{bb}0{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}`{{}b}0``{{{d{h}}{d{fj}}}{{A`{ln}}}}{cc{}}{{{d{Ab}}}{{A`{hAd}}}}{{{d{fAb}}}{{A`{hAd}}}}{{}{{Ah{Af}}}}``{{}c{}}``````{{{d{h}}}{{A`{lAj}}}}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fh}}{d{Ab}}}{{A`{lAd}}}}{{{d{fh}}{d{fAb}}}{{A`{lAd}}}}``??>=<<`{{{d{An}}{d{fj}}}B`};{{{d{Ab}}}{{A`{AnBb}}}}{{{d{fAb}}}{{A`{AnBb}}}}:`9``{{{d{An}}}{{Bd{l}}}}876{{{d{fAn}}{d{Ab}}}{{A`{lBb}}}}{{{d{fAn}}{d{fAb}}}{{A`{lBb}}}}````{bb}0{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{}b}0{{{d{Bf}}{d{fj}}}B`}{cc{}}{{{d{Ab}}}{{A`{BfBb}}}}{{{d{fAb}}}{{A`{BfBb}}}}{{}{{Ah{Af}}}}{{}c{}}{{{d{Bf}}}{{Bd{Bh}}}}``{{{d{Bf}}}{{Bd{l}}}}{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fBf}}{d{Ab}}}{{A`{lBb}}}}{{{d{fBf}}{d{fAb}}}{{A`{lBb}}}}`````````````````````````????>>>>{{{d{Bj}}}Bj}{{{d{Bl}}}Bl}{{{d{Bn}}}Bn}{{{d{C`}}}C`}{{d{d{fc}}}l{}}000{dl}000`{{}Bj}{{}Bl}{{}Bn}{{}C`}`{c{{A`{Bj}}}Cb}{c{{A`{Bl}}}Cb}{c{{A`{Bn}}}Cb}{c{{A`{C`}}}Cb}`{{{d{Bj}}{d{fj}}}B`}{{{d{Bl}}{d{fj}}}B`}{{{d{Bn}}{d{fj}}}B`}{{{d{C`}}{d{fj}}}B`}{cc{}}000{{}c{}}000`{{{d{fC`}}{d{Cd}}}{{d{fC`}}}}``{{{d{Bj}}c}A`Cf}{{{d{Bl}}c}A`Cf}{{{d{Bn}}c}A`Cf}{{{d{C`}}c}A`Cf}{dc{}}000{c{{A`{e}}}{}{}}000{{}{{A`{c}}}{}}000{dAl}000``````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{{{d{Ch}}{d{fj}}}B`}0={CjCh}{ClCh}{CnCh}{AjCh}{c{{D`{ce}}}{DbDdDf}{}}{{}}{{}c{}}{{{d{Ch}}}{{Ah{{d{Dh}}}}}}{dBh}>=<`;:{{{d{Dj}}}{{Dl{l}}}}0{cc{}}4`{c{{Dl{Dj}}}{{E`{Dn}}}}{{{d{Dj}}}{{Dl{Dn}}}}`0``3{c{{A`{e}}}{}{}}{{}{{A`{c}}}{}}{dAl}{{{d{fDj}}c}{{d{fDj}}}{{E`{Dn}}}}0","D":"K`","p":[[5,"Command",221],[1,"reference"],[0,"mut"],[5,"Compile",0,222],[5,"Formatter",223],[1,"unit"],[5,"Error",223],[6,"Result",224],[5,"ArgMatches",225],[5,"Error",226],[5,"Id",227],[6,"Option",228],[5,"Error",229],[5,"TypeId",230],[5,"Build",34],[8,"Result",223],[8,"Error",231],[8,"Result",229],[5,"New",57],[5,"String",232],[5,"Package",102],[5,"Lib",102],[5,"Dependencies",102],[5,"Manifest",102],[10,"Deserializer",233],[1,"str"],[10,"Serializer",234],[6,"Error",176],[5,"Error",235],[6,"Error",236],[6,"Error",237],[5,"IndentedSection",238],[10,"Display",223],[10,"Send",239],[10,"Sync",239],[10,"Error",240],[5,"WasmBuilder",201],[8,"Result",176],[5,"PathBuf",241],[10,"Into",242]],"r":[[0,34],[1,222],[2,57],[85,176],[88,102],[90,176],[91,201]],"b":[[186,"impl-Display-for-Error"],[187,"impl-Debug-for-Error"],[189,"impl-From%3CError%3E-for-Error"],[190,"impl-From%3CError%3E-for-Error"],[191,"impl-From%3CError%3E-for-Error"],[192,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAIUAHQAEAAQACgABAA0AAQAQAAIAFAAAABoAAQAdAAQAJAAFACsAAAAtAAIANQAGAD0ABwBGAAIATAAAAE4ABABgAAMAbAATAIEAAwCGAAMAiwADAJsAEwC5AAMAvgAFAMUABADLAAEA0QAAANQAAADWAAEA2QACAA=="}],["evm_opcodes",{"t":"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPKPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPGPNNNNNNNNNNNNNNNNQNNMMNNQNNCMMMNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPNNNNNNNNNNNNNNNNNNNNNN","n":["ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","Berlin","BlockInformation","Byzantium","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","ComparisonBitwiseLogic","Constantinople","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Data","Duplication","EQ","EXP","EXTCODECOPY","EXTCODESIZE","EnvironmentalInformation","Exchange","Frontier","GAS","GASLIMIT","GASPRICE","GT","Group","INVALID","ISZERO","Istanbul","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","Logging","London","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","OpCode","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","Push","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","Sha3","ShangHai","Shanghai","StackMemoryStorageFlow","StopArithmetic","System","TIMESTAMP","Upgrade","XOR","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","cmp","","eq","","fmt","","for_each_shanghai_operator","from","","gas","group","into","","opcodes","partial_cmp","","shanghai","since","stack_in","stack_out","to_owned","","try_from","","try_into","","type_id","","ADD","ADDMOD","ADDRESS","AND","BALANCE","BLOCKHASH","BYTE","CALL","CALLCODE","CALLDATACOPY","CALLDATALOAD","CALLDATASIZE","CALLER","CALLVALUE","CODECOPY","CODESIZE","COINBASE","CREATE","CREATE2","DELEGATECALL","DIFFICULTY","DIV","DUP1","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","Data","EQ","EXP","EXTCODECOPY","EXTCODESIZE","GAS","GASLIMIT","GASPRICE","GT","INVALID","ISZERO","JUMP","JUMPDEST","JUMPI","LOG0","LOG1","LOG2","LOG3","LOG4","LT","MLOAD","MOD","MSIZE","MSTORE","MSTORE8","MUL","MULMOD","NOT","NUMBER","OR","ORIGIN","PC","POP","PUSH0","PUSH1","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH2","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH3","PUSH30","PUSH31","PUSH32","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","RETURN","RETURNDATACOPY","RETURNDATASIZE","REVERT","SAR","SDIV","SELFDESTRUCT","SGT","SHA3","SHL","SHR","SIGNEXTEND","SLOAD","SLT","SMOD","SSTORE","STATICCALL","STOP","SUB","SWAP1","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","ShangHai","TIMESTAMP","XOR","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","eq","fmt","from","","from_str","gas","group","into","partial_cmp","since","stack_in","stack_out","to_owned","try_from","try_into","type_id"],"q":[[0,"evm_opcodes"],[201,"evm_opcodes::shanghai"],[365,"core::cmp"],[366,"core::fmt"],[367,"core::option"],[368,"core::result"],[369,"core::any"]],"i":"An000000hf12222222222220122222222222222222222022220012222`2212222222220122222222222`222222222222222222222222222222222220222222222222222222222222222222222220`10002`20101010101010101`01Ad012`12`000121212123333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333`333333333333333333333333","f":"```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}0{{{b{f}}{b{f}}}l}{{{b{h}}{b{h}}}l}{{{b{f}}{b{f}}}n}{{{b{h}}{b{h}}}n}{{{b{f}}{b{dA`}}}Ab}{{{b{h}}{b{dA`}}}Ab}`{cc{}}0{{{b{Ad}}}Af}{{{b{Ad}}}f}{{}c{}}0`{{{b{f}}{b{f}}}{{Ah{l}}}}{{{b{h}}{b{h}}}{{Ah{l}}}}`{{{b{Ad}}}h}55{bc{}}0{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{bAl}0``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{An}}}An}{{b{b{dc}}}j{}}{bj}{{{b{An}}{b{An}}}l}{{{b{An}}{b{An}}}n}{{{b{An}}{b{dA`}}}Ab}{B`An}{cc{}}{{{b{Bb}}}{{Aj{Anc}}}{}}{{{b{An}}}Af}{{{b{An}}}f}{{}c{}}{{{b{An}}{b{An}}}{{Ah{l}}}}{{{b{An}}}h}44{bc{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}","D":"BH`","p":[[1,"reference"],[0,"mut"],[6,"Group",0],[6,"Upgrade",0],[1,"unit"],[6,"Ordering",365],[1,"bool"],[5,"Formatter",366],[8,"Result",366],[10,"OpCode",0],[1,"u16"],[6,"Option",367],[6,"Result",368],[5,"TypeId",369],[6,"ShangHai",201],[1,"u8"],[1,"str"]],"r":[[155,201]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC0ABgCkAA8AvAABAMIABwBYAQgAYgECAGYBBwA="}],["sol_abi",{"t":"FFPPGPPPCCOOOOOOFPPGNNNNNNNNNNNNNNNNNNNNNNONNOONNNNNNNNNONNFPPGPPPNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONN","n":["Abi","Arg","Int32","Int64","Param","UInt32","UInt64","Unknown","abi","arg","inputs","name","","outputs","ty","","Abi","Constructor","Function","Type","as_ref","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","deserialize","","fmt","","from","","","","from_str","inputs","into","","name","outputs","serialize","","to_owned","","to_string","try_from","","try_into","","ty","type_id","","Arg","Int32","Int64","Param","UInt32","UInt64","Unknown","as_ref","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","default","","deserialize","","fmt","","from","","","","from_str","into","","name","serialize","","to_owned","","to_string","try_from","","try_into","","ty","type_id",""],"q":[[0,"sol_abi"],[16,"sol_abi::abi"],[59,"sol_abi::arg"],[103,"core::result"],[104,"serde::de"],[105,"core::fmt"],[106,"syn::item"],[107,"serde::ser"],[108,"alloc::string"],[109,"core::any"],[110,"syn::ty"],[111,"alloc::boxed"]],"i":"``An0`000``j0B`110`b0`020202020202020202200022022202002020220`33`3333131313131313131313333131131331313113","f":"````````````````````{{{d{b}}}{{d{f}}}}{d{{d{c}}}{}}0{{{d{h}}}{{d{hc}}}{}}0{{{d{j}}}j}{{{d{b}}}b}{{d{d{hc}}}l{}}0{dl}0{{}j}{{}b}{c{{n{j}}}A`}{c{{n{b}}}A`}{{{d{j}}{d{hAb}}}Ad}{{{d{b}}{d{hAb}}}Ad}{{{d{Af}}}j}{cc{}}0{{{d{f}}}b}{{{d{f}}}{{n{bc}}}{}}`{{}c{}}0``{{{d{j}}c}nAh}{{{d{b}}c}nAh}{dc{}}0{{{d{b}}}Aj}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0`{dAl}0```````{{{d{An}}}{{d{f}}}}{d{{d{c}}}{}}0{{{d{h}}}{{d{hc}}}{}}0{{{d{B`}}}B`}{{{d{An}}}An}{{d{d{hc}}}l{}}0{dl}0{{}B`}{{}An}{c{{n{B`}}}A`}{c{{n{An}}}A`}{{{d{B`}}{d{hAb}}}Ad}{{{d{An}}{d{hAb}}}Ad}{cc{}}0{{{d{{Bd{Bb}}}}}An}{{{d{f}}}An}{{{d{f}}}{{n{Anc}}}{}}{{}c{}}0`{{{d{B`}}c}nAh}{{{d{An}}c}nAh}{dc{}}0{{{d{An}}}Aj}{c{{n{e}}}{}{}}0{{}{{n{c}}}{}}0`{dAl}0","D":"Ed","p":[[6,"Type",16],[1,"reference"],[1,"str"],[0,"mut"],[5,"Abi",16],[1,"unit"],[6,"Result",103],[10,"Deserializer",104],[5,"Formatter",105],[8,"Result",105],[5,"Signature",106],[10,"Serializer",107],[5,"String",108],[5,"TypeId",109],[6,"Param",59],[5,"Arg",59],[6,"Type",110],[5,"Box",111]],"r":[[0,16],[1,59],[4,59]],"b":[[85,"impl-From%3C%26Box%3CType%3E%3E-for-Param"],[86,"impl-From%3C%26str%3E-for-Param"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAD0ACAAVABEAKQABADAACAA6AAEAQwAQAFYAAgBcAAgAZgABAA=="}],["zabi",{"t":"FNNNNNNNNNNNNNNNCNCCNNNNNNNNNNPGPPPINNNNNNNNNNNNNHH","n":["Abi","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deref","deref_mut","deserialize","fmt","from","","from_bytes","from_hex","from_str","hex_impl","into","result","selector","","serialize","signature","to_bytes","to_hex","to_owned","to_string","try_from","try_into","type_id","Err","Error","Hex","Ok","Postcard","Result","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","keccak256","parse"],"q":[[0,"zabi"],[30,"zabi::result"],[49,"zabi::selector"],[51,"core::result"],[52,"serde::de"],[53,"core::fmt"],[54,"syn::item"],[55,"postcard::error"],[56,"core::convert"],[57,"serde::ser"],[58,"alloc::string"],[59,"alloc::vec"],[60,"core::any"],[61,"hex::error"],[62,"core::error"],[63,"core::option"]],"i":"`f00000000000000`0``0000000000Al`Bj10`0000000000000``","f":"`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{{}f}{{{b{f}}}{{b{c}}}{}}{{{b{df}}}{{b{dc}}}{}}{c{{j{f}}}l}{{{b{f}}{b{dn}}}A`}{cc{}}{{{b{Ab}}}f}{c{{Ad{f}}}{{Aj{{Ah{Af}}}}}}{c{{Al{f}}}{{Aj{An}}}}{{{b{An}}}{{Al{f}}}}`{{}c{}}``{{{b{f}}}{{B`{Af}}}}{{{b{f}}c}jBb}{{{b{f}}}Bd}{{{b{f}}}{{Ad{{Bf{Af}}}}}}{{{b{f}}}{{Al{Bd}}}}{bc{}}3{c{{j{e}}}{}{}}{{}{{j{c}}}{}}{bBh}``````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Bj}}{b{dn}}}A`}0{BlBj}{cc{}}{BnBj}?{{{b{Bj}}}{{Cb{{b{C`}}}}}}{bBd}:98{{{b{{Ah{Af}}}}}{{B`{Af}}}}0","D":"Bl","p":[[1,"reference"],[0,"mut"],[5,"Abi",0],[1,"unit"],[6,"Result",51],[10,"Deserializer",52],[5,"Formatter",53],[8,"Result",53],[5,"Signature",54],[8,"Result",55],[1,"u8"],[1,"slice"],[10,"AsRef",56],[8,"Result",30],[1,"str"],[1,"array"],[10,"Serializer",57],[5,"String",58],[5,"Vec",59],[5,"TypeId",60],[6,"Error",30],[6,"FromHexError",61],[6,"Error",55],[10,"Error",62],[6,"Option",63]],"r":[],"b":[[38,"impl-Debug-for-Error"],[39,"impl-Display-for-Error"],[40,"impl-From%3CFromHexError%3E-for-Error"],[42,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB0ACAACAAkADQAAABAAAQAWAAAAGgAEACUABAArAAAALQAEAA=="}],["zingen",{"t":"PFSPPIPFFFFGPPFPPPPGPPPFPPPPPPPPPPPPFPPPFFPFPPIPPPPPPOCOOCOOOCCOOOOOOOOOOOCOCOCOOOOOOCOOOOOOOOOOCCCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNOQNNNNOONNNNFNNNNNONNNNNNNEEEEECCCCFFNNNNONNNNNNNNNNNNNNNNNONNNNNONNOONNNNNNNNNFNNNNONONNONNNFOONNNONNNONNNNNONNNFNNNNNNNNNNNNNNNNNNNNONNNNONNONNNNNNNONONNONONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNONONNNNNNNNNONNNPPGEPPNNNNNNNNNNNNNNCCCNNNNHHFNNNNNNNONNNNNONONNNNNNNNNNNNNNNFGFPPNNNNNNNNNNNNNNNNNNNOONNNNNNNNNONNNNNNNONNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNCNNNNCCNNNCNNNCNNNNONNCNONCNNNNNNNPPPPPPPPGPPPPPPPPPPPPPPPPPPPIPPPPPPNNNNNNNNNNNNNKFNNNNMNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCQCCQFPFPFFFGFPRKKCONNNNNNNNNNNNNNNCONNNNNNNONNNNNNCCQONNNNNMMNNNNNNNNNNNNOSRKKNNQMMFNNNNNNNNNNNNNNNNFFNONNNNNNNNNNNNNNNNNNNNNNOPPGPNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Assembler","BUFFER_LIMIT","BinaryReader","Block","Buffer","BufferOverflow","Code","Constructor","ControlStack","ControlStackFrame","ControlStackFrameType","ControlStackUnderflow","DataNotFound","Dispatcher","DuplicateFunc","DuplicateJump","Else","Err","Error","ExtFuncNotFound","FuncNotFound","FuncNotImported","Function","HostFuncNotFound","If","ImportedFuncNotFound","InvalidDataOffset","InvalidDataSize","InvalidDepth","InvalidElseBlock","InvalidFunctionSignature","InvalidLocalIndex","InvalidMP","InvalidPC","InvalidSelector","JumpTable","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","LocalSlot","Locals","Loop","MacroAssembler","MemoryOutOfBounds","Ok","Result","SelectorNotFound","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","UnsupportedHostFunc","abi","asm","","","backtrace","","buffer","code","codegen","control","","env","","func","funcs","","gas","init_code","inner","","is_main","jump","","local","locals","masm","","","mp","offset","original_pc_offset","original_sp","result","","runtime_bytecode","sp","","stack","table","","ty","","","validator","visitor","wasm","Assembler","_add","_addmod","_address","_and","_balance","_blockhash","_byte","_call","_callcode","_calldatacopy","_calldataload","_calldatasize","_caller","_callvalue","_codecopy","_codesize","_coinbase","_create","_create2","_delegatecall","_difficulty","_div","_dup1","_dup10","_dup11","_dup12","_dup13","_dup14","_dup15","_dup16","_dup2","_dup3","_dup4","_dup5","_dup6","_dup7","_dup8","_dup9","_eq","_exp","_extcodecopy","_extcodesize","_gas","_gaslimit","_gasprice","_gt","_invalid","_iszero","_jump","_jumpdest","_jumpi","_log0","_log1","_log2","_log3","_log4","_lt","_mload","_mod","_msize","_mstore","_mstore8","_mul","_mulmod","_not","_number","_or","_origin","_pc","_pop","_push0","_push1","_push10","_push11","_push12","_push13","_push14","_push15","_push16","_push17","_push18","_push19","_push2","_push20","_push21","_push22","_push23","_push24","_push25","_push26","_push27","_push28","_push29","_push3","_push30","_push31","_push32","_push4","_push5","_push6","_push7","_push8","_push9","_return","_returndatacopy","_returndatasize","_revert","_sar","_sdiv","_selfdestruct","_sgt","_sha3","_shl","_shr","_signextend","_sload","_slt","_smod","_sstore","_staticcall","_stop","_sub","_swap1","_swap10","_swap11","_swap12","_swap13","_swap14","_swap15","_swap16","_swap2","_swap3","_swap4","_swap5","_swap6","_swap7","_swap8","_swap9","_timestamp","_xor","borrow","borrow_mut","buffer","","buffer_mut","clone","clone_into","clone_to_uninit","decrement_mp","decrement_sp","default","emit","emit_op","emitn","from","gas","impl_opcodes","increment_gas","increment_mp","increment_sp","into","mp","sp","to_owned","try_from","try_into","type_id","Backtrace","borrow","borrow_mut","default","fmt","from","instrs","into","pop","popn","push","try_from","try_into","type_id","Code","Constructor","Dispatcher","ExtFunc","Function","code","constructor","dispatcher","function","Code","ExtFunc","borrow","","borrow_mut","","bytecode","clone","","clone_into","","clone_to_uninit","","default","eq","equivalent","","","finish","fmt","","from","","funcs","","hash","into","","new","offset","","offset_of","shift","stack_in","stack_out","to_owned","","try_add_func","try_from","","try_into","","type_id","","Constructor","borrow","borrow_mut","finish","from","init_code","into","masm","new","return_instr_length","runtime_bytecode","try_from","try_into","type_id","Dispatcher","abi","asm","borrow","borrow_mut","emit_selector","env","ext_return","finish","from","funcs","into","load_abi","new","process","query_func","table","try_from","try_into","type_id","Function","_block","_br","_br_if","_br_table","_call","_call_indirect","_else","_end","_global_get","_global_set","_if","_local_get","_local_get_calldata","_local_get_var","_local_set","_local_tee","_loop","_nop","_select","_unreachable","backtrace","borrow","borrow_mut","call_imported","call_internal","control","emit_locals","emit_operators","env","finish","from","handle_call_return","handle_frame_popping","handle_jumpdest","handle_return","into","is_main","is_reachable","locals","log","log_data","masm","new","table","try_from","try_into","ty","type_id","visit_any_convert_extern","visit_array_copy","visit_array_fill","visit_array_get","visit_array_get_s","visit_array_get_u","visit_array_init_data","visit_array_init_elem","visit_array_len","visit_array_new","visit_array_new_data","visit_array_new_default","visit_array_new_elem","visit_array_new_fixed","visit_array_set","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_cast","visit_br_on_cast_fail","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_extern_convert_any","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_ref_as_non_null","visit_ref_cast_non_null","visit_ref_cast_nullable","visit_ref_eq","visit_ref_func","visit_ref_i31","visit_ref_is_null","visit_ref_null","visit_ref_test_non_null","visit_ref_test_nullable","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_struct_get","visit_struct_get_s","visit_struct_get_u","visit_struct_new","visit_struct_new_default","visit_struct_set","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_throw_ref","visit_try","visit_try_table","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","Block","ControlStack","ControlStackFrame","ControlStackFrameType","Else","If","Loop","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","default","depth","eq","equivalent","","","fmt","from","","","into","","","label_from_depth","mark_else","new","original_pc_offset","original_sp","pc_offset","pop","push","result","","ret_ty","stack","to_owned","","try_from","","","try_into","","","ty","","type_id","","","ExtFunc","Func","Jump","JumpTable","Label","Offset","borrow","borrow_mut","clone","clone_into","clone_to_uninit","eq","equivalent","","","fmt","from","into","is_label","is_offset","pc","relocate","table","to_owned","try_from","try_into","type_id","offset","pc","JumpTable","borrow","borrow_mut","call","call_offset","clone","clone_into","clone_to_uninit","code","code_offset","default","ext","fmt","from","func","into","jump","label","merge","offset","relocate","shift_func_target","shift_label_pc","shift_label_target","shift_pc","shift_target","shift_targets","target","to_owned","try_from","try_into","type_id","LocalSlot","LocalSlotType","Locals","Parameter","Variable","borrow","","","borrow_mut","","","default","eq","equivalent","","","fmt","","","from","","","get","get_mut","inner","","into","","","is_empty","len","new","offset_of","push","size","sp","try_from","","","try_into","","","ty","","type_id","","","val_ty","MacroAssembler","MemoryInfo","_abs","_ceil","_clz","_convert_i32_s","_convert_i32_u","_convert_i64_s","_convert_i64_u","_copysign","_ctz","_drop","_eqz","_f32_const","_f32_demote_f64","_f32_reinterpret_i32","_f64_const","_f64_promote_f32","_f64_reinterpret_i64","_floor","_ge","_gt","_i32_const","_i32_reinterpret_f32","_i32_wrap_i64","_i64_const","_i64_extend_i32_s","_i64_extend_i32_u","_i64_reinterpret_f64","_le","_load","_load16","_load32","_load8","_lt","_max","_memory_grow","_memory_size","_min","_ne","_nearest","_neg","_popcnt","_return","_rotl","_rotr","_sge","_sgt","_sle","_sload","_slt","_sqrt","_sstore","_store","_store16","_store32","_store8","_sub","_trunc","_trunc_f32","_trunc_f64","asm","borrow","","borrow_mut","","call_return","cmp","default","deref","deref_mut","dup","embed","float","from","","handle_empty_return","integer","into","","main_return","memory","memory_write","memory_write_at","memory_write_bytes","mp_offset","offset","pc_offset","push","ret","shift_stack","size","sp","stack","swap","try_from","","try_into","","type_id","","Abi","BinaryReader","BufferOverflow","ControlStackUnderflow","DataNotFound","DuplicateFunc","DuplicateJump","Err","Error","ExtFuncNotFound","FuncNotFound","FuncNotImported","HostFuncNotFound","ImportedFuncNotFound","InvalidDataOffset","InvalidDataSize","InvalidDepth","InvalidElseBlock","InvalidFunctionSignature","InvalidLocalIndex","InvalidMP","InvalidPC","InvalidSelector","LabelMismatch","LocalIndexOutOfRange","LocalNotOnStack","MemoryOutOfBounds","Ok","Result","SelectorNotFound","StackIndexOutOfRange","StackNotBalanced","StackOverflow","StackUnderflow","UnsupportedHostFunc","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","ReachableState","ValidateThenVisit","borrow","borrow_mut","from","into","is_reachable","try_from","try_into","type_id","validate_then_visit","visit_any_convert_extern","visit_array_copy","visit_array_fill","visit_array_get","visit_array_get_s","visit_array_get_u","visit_array_init_data","visit_array_init_elem","visit_array_len","visit_array_new","visit_array_new_data","visit_array_new_default","visit_array_new_elem","visit_array_new_fixed","visit_array_set","visit_atomic_fence","visit_block","visit_br","visit_br_if","visit_br_on_cast","visit_br_on_cast_fail","visit_br_on_non_null","visit_br_on_null","visit_br_table","visit_call","visit_call_indirect","visit_call_ref","visit_catch","visit_catch_all","visit_data_drop","visit_delegate","visit_drop","visit_elem_drop","visit_else","visit_end","visit_extern_convert_any","visit_f32_abs","visit_f32_add","visit_f32_ceil","visit_f32_const","visit_f32_convert_i32_s","visit_f32_convert_i32_u","visit_f32_convert_i64_s","visit_f32_convert_i64_u","visit_f32_copysign","visit_f32_demote_f64","visit_f32_div","visit_f32_eq","visit_f32_floor","visit_f32_ge","visit_f32_gt","visit_f32_le","visit_f32_load","visit_f32_lt","visit_f32_max","visit_f32_min","visit_f32_mul","visit_f32_ne","visit_f32_nearest","visit_f32_neg","visit_f32_reinterpret_i32","visit_f32_sqrt","visit_f32_store","visit_f32_sub","visit_f32_trunc","visit_f32x4_abs","visit_f32x4_add","visit_f32x4_ceil","visit_f32x4_convert_i32x4_s","visit_f32x4_convert_i32x4_u","visit_f32x4_demote_f64x2_zero","visit_f32x4_div","visit_f32x4_eq","visit_f32x4_extract_lane","visit_f32x4_floor","visit_f32x4_ge","visit_f32x4_gt","visit_f32x4_le","visit_f32x4_lt","visit_f32x4_max","visit_f32x4_min","visit_f32x4_mul","visit_f32x4_ne","visit_f32x4_nearest","visit_f32x4_neg","visit_f32x4_pmax","visit_f32x4_pmin","visit_f32x4_relaxed_madd","visit_f32x4_relaxed_max","visit_f32x4_relaxed_min","visit_f32x4_relaxed_nmadd","visit_f32x4_replace_lane","visit_f32x4_splat","visit_f32x4_sqrt","visit_f32x4_sub","visit_f32x4_trunc","visit_f64_abs","visit_f64_add","visit_f64_ceil","visit_f64_const","visit_f64_convert_i32_s","visit_f64_convert_i32_u","visit_f64_convert_i64_s","visit_f64_convert_i64_u","visit_f64_copysign","visit_f64_div","visit_f64_eq","visit_f64_floor","visit_f64_ge","visit_f64_gt","visit_f64_le","visit_f64_load","visit_f64_lt","visit_f64_max","visit_f64_min","visit_f64_mul","visit_f64_ne","visit_f64_nearest","visit_f64_neg","visit_f64_promote_f32","visit_f64_reinterpret_i64","visit_f64_sqrt","visit_f64_store","visit_f64_sub","visit_f64_trunc","visit_f64x2_abs","visit_f64x2_add","visit_f64x2_ceil","visit_f64x2_convert_low_i32x4_s","visit_f64x2_convert_low_i32x4_u","visit_f64x2_div","visit_f64x2_eq","visit_f64x2_extract_lane","visit_f64x2_floor","visit_f64x2_ge","visit_f64x2_gt","visit_f64x2_le","visit_f64x2_lt","visit_f64x2_max","visit_f64x2_min","visit_f64x2_mul","visit_f64x2_ne","visit_f64x2_nearest","visit_f64x2_neg","visit_f64x2_pmax","visit_f64x2_pmin","visit_f64x2_promote_low_f32x4","visit_f64x2_relaxed_madd","visit_f64x2_relaxed_max","visit_f64x2_relaxed_min","visit_f64x2_relaxed_nmadd","visit_f64x2_replace_lane","visit_f64x2_splat","visit_f64x2_sqrt","visit_f64x2_sub","visit_f64x2_trunc","visit_global_get","visit_global_set","visit_i16x8_abs","visit_i16x8_add","visit_i16x8_add_sat_s","visit_i16x8_add_sat_u","visit_i16x8_all_true","visit_i16x8_avgr_u","visit_i16x8_bitmask","visit_i16x8_eq","visit_i16x8_extadd_pairwise_i8x16_s","visit_i16x8_extadd_pairwise_i8x16_u","visit_i16x8_extend_high_i8x16_s","visit_i16x8_extend_high_i8x16_u","visit_i16x8_extend_low_i8x16_s","visit_i16x8_extend_low_i8x16_u","visit_i16x8_extmul_high_i8x16_s","visit_i16x8_extmul_high_i8x16_u","visit_i16x8_extmul_low_i8x16_s","visit_i16x8_extmul_low_i8x16_u","visit_i16x8_extract_lane_s","visit_i16x8_extract_lane_u","visit_i16x8_ge_s","visit_i16x8_ge_u","visit_i16x8_gt_s","visit_i16x8_gt_u","visit_i16x8_le_s","visit_i16x8_le_u","visit_i16x8_lt_s","visit_i16x8_lt_u","visit_i16x8_max_s","visit_i16x8_max_u","visit_i16x8_min_s","visit_i16x8_min_u","visit_i16x8_mul","visit_i16x8_narrow_i32x4_s","visit_i16x8_narrow_i32x4_u","visit_i16x8_ne","visit_i16x8_neg","visit_i16x8_q15mulr_sat_s","visit_i16x8_relaxed_dot_i8x16_i7x16_s","visit_i16x8_relaxed_laneselect","visit_i16x8_relaxed_q15mulr_s","visit_i16x8_replace_lane","visit_i16x8_shl","visit_i16x8_shr_s","visit_i16x8_shr_u","visit_i16x8_splat","visit_i16x8_sub","visit_i16x8_sub_sat_s","visit_i16x8_sub_sat_u","visit_i31_get_s","visit_i31_get_u","visit_i32_add","visit_i32_and","visit_i32_atomic_load","visit_i32_atomic_load16_u","visit_i32_atomic_load8_u","visit_i32_atomic_rmw16_add_u","visit_i32_atomic_rmw16_and_u","visit_i32_atomic_rmw16_cmpxchg_u","visit_i32_atomic_rmw16_or_u","visit_i32_atomic_rmw16_sub_u","visit_i32_atomic_rmw16_xchg_u","visit_i32_atomic_rmw16_xor_u","visit_i32_atomic_rmw8_add_u","visit_i32_atomic_rmw8_and_u","visit_i32_atomic_rmw8_cmpxchg_u","visit_i32_atomic_rmw8_or_u","visit_i32_atomic_rmw8_sub_u","visit_i32_atomic_rmw8_xchg_u","visit_i32_atomic_rmw8_xor_u","visit_i32_atomic_rmw_add","visit_i32_atomic_rmw_and","visit_i32_atomic_rmw_cmpxchg","visit_i32_atomic_rmw_or","visit_i32_atomic_rmw_sub","visit_i32_atomic_rmw_xchg","visit_i32_atomic_rmw_xor","visit_i32_atomic_store","visit_i32_atomic_store16","visit_i32_atomic_store8","visit_i32_clz","visit_i32_const","visit_i32_ctz","visit_i32_div_s","visit_i32_div_u","visit_i32_eq","visit_i32_eqz","visit_i32_extend16_s","visit_i32_extend8_s","visit_i32_ge_s","visit_i32_ge_u","visit_i32_gt_s","visit_i32_gt_u","visit_i32_le_s","visit_i32_le_u","visit_i32_load","visit_i32_load16_s","visit_i32_load16_u","visit_i32_load8_s","visit_i32_load8_u","visit_i32_lt_s","visit_i32_lt_u","visit_i32_mul","visit_i32_ne","visit_i32_or","visit_i32_popcnt","visit_i32_reinterpret_f32","visit_i32_rem_s","visit_i32_rem_u","visit_i32_rotl","visit_i32_rotr","visit_i32_shl","visit_i32_shr_s","visit_i32_shr_u","visit_i32_store","visit_i32_store16","visit_i32_store8","visit_i32_sub","visit_i32_trunc_f32_s","visit_i32_trunc_f32_u","visit_i32_trunc_f64_s","visit_i32_trunc_f64_u","visit_i32_trunc_sat_f32_s","visit_i32_trunc_sat_f32_u","visit_i32_trunc_sat_f64_s","visit_i32_trunc_sat_f64_u","visit_i32_wrap_i64","visit_i32_xor","visit_i32x4_abs","visit_i32x4_add","visit_i32x4_all_true","visit_i32x4_bitmask","visit_i32x4_dot_i16x8_s","visit_i32x4_eq","visit_i32x4_extadd_pairwise_i16x8_s","visit_i32x4_extadd_pairwise_i16x8_u","visit_i32x4_extend_high_i16x8_s","visit_i32x4_extend_high_i16x8_u","visit_i32x4_extend_low_i16x8_s","visit_i32x4_extend_low_i16x8_u","visit_i32x4_extmul_high_i16x8_s","visit_i32x4_extmul_high_i16x8_u","visit_i32x4_extmul_low_i16x8_s","visit_i32x4_extmul_low_i16x8_u","visit_i32x4_extract_lane","visit_i32x4_ge_s","visit_i32x4_ge_u","visit_i32x4_gt_s","visit_i32x4_gt_u","visit_i32x4_le_s","visit_i32x4_le_u","visit_i32x4_lt_s","visit_i32x4_lt_u","visit_i32x4_max_s","visit_i32x4_max_u","visit_i32x4_min_s","visit_i32x4_min_u","visit_i32x4_mul","visit_i32x4_ne","visit_i32x4_neg","visit_i32x4_relaxed_dot_i8x16_i7x16_add_s","visit_i32x4_relaxed_laneselect","visit_i32x4_relaxed_trunc_f32x4_s","visit_i32x4_relaxed_trunc_f32x4_u","visit_i32x4_relaxed_trunc_f64x2_s_zero","visit_i32x4_relaxed_trunc_f64x2_u_zero","visit_i32x4_replace_lane","visit_i32x4_shl","visit_i32x4_shr_s","visit_i32x4_shr_u","visit_i32x4_splat","visit_i32x4_sub","visit_i32x4_trunc_sat_f32x4_s","visit_i32x4_trunc_sat_f32x4_u","visit_i32x4_trunc_sat_f64x2_s_zero","visit_i32x4_trunc_sat_f64x2_u_zero","visit_i64_add","visit_i64_and","visit_i64_atomic_load","visit_i64_atomic_load16_u","visit_i64_atomic_load32_u","visit_i64_atomic_load8_u","visit_i64_atomic_rmw16_add_u","visit_i64_atomic_rmw16_and_u","visit_i64_atomic_rmw16_cmpxchg_u","visit_i64_atomic_rmw16_or_u","visit_i64_atomic_rmw16_sub_u","visit_i64_atomic_rmw16_xchg_u","visit_i64_atomic_rmw16_xor_u","visit_i64_atomic_rmw32_add_u","visit_i64_atomic_rmw32_and_u","visit_i64_atomic_rmw32_cmpxchg_u","visit_i64_atomic_rmw32_or_u","visit_i64_atomic_rmw32_sub_u","visit_i64_atomic_rmw32_xchg_u","visit_i64_atomic_rmw32_xor_u","visit_i64_atomic_rmw8_add_u","visit_i64_atomic_rmw8_and_u","visit_i64_atomic_rmw8_cmpxchg_u","visit_i64_atomic_rmw8_or_u","visit_i64_atomic_rmw8_sub_u","visit_i64_atomic_rmw8_xchg_u","visit_i64_atomic_rmw8_xor_u","visit_i64_atomic_rmw_add","visit_i64_atomic_rmw_and","visit_i64_atomic_rmw_cmpxchg","visit_i64_atomic_rmw_or","visit_i64_atomic_rmw_sub","visit_i64_atomic_rmw_xchg","visit_i64_atomic_rmw_xor","visit_i64_atomic_store","visit_i64_atomic_store16","visit_i64_atomic_store32","visit_i64_atomic_store8","visit_i64_clz","visit_i64_const","visit_i64_ctz","visit_i64_div_s","visit_i64_div_u","visit_i64_eq","visit_i64_eqz","visit_i64_extend16_s","visit_i64_extend32_s","visit_i64_extend8_s","visit_i64_extend_i32_s","visit_i64_extend_i32_u","visit_i64_ge_s","visit_i64_ge_u","visit_i64_gt_s","visit_i64_gt_u","visit_i64_le_s","visit_i64_le_u","visit_i64_load","visit_i64_load16_s","visit_i64_load16_u","visit_i64_load32_s","visit_i64_load32_u","visit_i64_load8_s","visit_i64_load8_u","visit_i64_lt_s","visit_i64_lt_u","visit_i64_mul","visit_i64_ne","visit_i64_or","visit_i64_popcnt","visit_i64_reinterpret_f64","visit_i64_rem_s","visit_i64_rem_u","visit_i64_rotl","visit_i64_rotr","visit_i64_shl","visit_i64_shr_s","visit_i64_shr_u","visit_i64_store","visit_i64_store16","visit_i64_store32","visit_i64_store8","visit_i64_sub","visit_i64_trunc_f32_s","visit_i64_trunc_f32_u","visit_i64_trunc_f64_s","visit_i64_trunc_f64_u","visit_i64_trunc_sat_f32_s","visit_i64_trunc_sat_f32_u","visit_i64_trunc_sat_f64_s","visit_i64_trunc_sat_f64_u","visit_i64_xor","visit_i64x2_abs","visit_i64x2_add","visit_i64x2_all_true","visit_i64x2_bitmask","visit_i64x2_eq","visit_i64x2_extend_high_i32x4_s","visit_i64x2_extend_high_i32x4_u","visit_i64x2_extend_low_i32x4_s","visit_i64x2_extend_low_i32x4_u","visit_i64x2_extmul_high_i32x4_s","visit_i64x2_extmul_high_i32x4_u","visit_i64x2_extmul_low_i32x4_s","visit_i64x2_extmul_low_i32x4_u","visit_i64x2_extract_lane","visit_i64x2_ge_s","visit_i64x2_gt_s","visit_i64x2_le_s","visit_i64x2_lt_s","visit_i64x2_mul","visit_i64x2_ne","visit_i64x2_neg","visit_i64x2_relaxed_laneselect","visit_i64x2_replace_lane","visit_i64x2_shl","visit_i64x2_shr_s","visit_i64x2_shr_u","visit_i64x2_splat","visit_i64x2_sub","visit_i8x16_abs","visit_i8x16_add","visit_i8x16_add_sat_s","visit_i8x16_add_sat_u","visit_i8x16_all_true","visit_i8x16_avgr_u","visit_i8x16_bitmask","visit_i8x16_eq","visit_i8x16_extract_lane_s","visit_i8x16_extract_lane_u","visit_i8x16_ge_s","visit_i8x16_ge_u","visit_i8x16_gt_s","visit_i8x16_gt_u","visit_i8x16_le_s","visit_i8x16_le_u","visit_i8x16_lt_s","visit_i8x16_lt_u","visit_i8x16_max_s","visit_i8x16_max_u","visit_i8x16_min_s","visit_i8x16_min_u","visit_i8x16_narrow_i16x8_s","visit_i8x16_narrow_i16x8_u","visit_i8x16_ne","visit_i8x16_neg","visit_i8x16_popcnt","visit_i8x16_relaxed_laneselect","visit_i8x16_relaxed_swizzle","visit_i8x16_replace_lane","visit_i8x16_shl","visit_i8x16_shr_s","visit_i8x16_shr_u","visit_i8x16_shuffle","visit_i8x16_splat","visit_i8x16_sub","visit_i8x16_sub_sat_s","visit_i8x16_sub_sat_u","visit_i8x16_swizzle","visit_if","visit_local_get","visit_local_set","visit_local_tee","visit_loop","visit_memory_atomic_notify","visit_memory_atomic_wait32","visit_memory_atomic_wait64","visit_memory_copy","visit_memory_discard","visit_memory_fill","visit_memory_grow","visit_memory_init","visit_memory_size","visit_nop","visit_op_when_unreachable","visit_ref_as_non_null","visit_ref_cast_non_null","visit_ref_cast_nullable","visit_ref_eq","visit_ref_func","visit_ref_i31","visit_ref_is_null","visit_ref_null","visit_ref_test_non_null","visit_ref_test_nullable","visit_rethrow","visit_return","visit_return_call","visit_return_call_indirect","visit_return_call_ref","visit_select","visit_struct_get","visit_struct_get_s","visit_struct_get_u","visit_struct_new","visit_struct_new_default","visit_struct_set","visit_table_copy","visit_table_fill","visit_table_get","visit_table_grow","visit_table_init","visit_table_set","visit_table_size","visit_throw","visit_throw_ref","visit_try","visit_try_table","visit_typed_select","visit_unreachable","visit_v128_and","visit_v128_andnot","visit_v128_any_true","visit_v128_bitselect","visit_v128_const","visit_v128_load","visit_v128_load16_lane","visit_v128_load16_splat","visit_v128_load16x4_s","visit_v128_load16x4_u","visit_v128_load32_lane","visit_v128_load32_splat","visit_v128_load32_zero","visit_v128_load32x2_s","visit_v128_load32x2_u","visit_v128_load64_lane","visit_v128_load64_splat","visit_v128_load64_zero","visit_v128_load8_lane","visit_v128_load8_splat","visit_v128_load8x8_s","visit_v128_load8x8_u","visit_v128_not","visit_v128_or","visit_v128_store","visit_v128_store16_lane","visit_v128_store32_lane","visit_v128_store64_lane","visit_v128_store8_lane","visit_v128_xor","call","control","handlers","impl_visit_operator","local","log","map_wasm_operators","Data","EmitABI","Env","Evm","Exports","Function","Functions","HostFunc","Imports","NoOp","Output","ToLSBytes","Type","abi","body","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","data","","default","","","deref","","deref_mut","","exports","fmt","","","from","","","func","host","impl_deref","imports","into","","","is_emit_abi","selectors","size","to_ls_bytes","to_owned","","","try_from","","","try_into","","","type_id","","","validator","ALIGNMENT_MASK","Output","ToLSBytes","Type","align","","offset","size","to_ls_bytes","Data","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deref","deref_mut","fmt","from","into","load","to_owned","try_from","try_into","type_id","Function","Functions","add","body","borrow","","borrow_mut","","default","deref","deref_mut","drain_selectors","from","","index","into","","into_funcs","remove_constructor","sig","try_from","","try_into","","type_id","","validator","EmitABI","Evm","HostFunc","NoOp","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","compare","eq","equivalent","","","fmt","from","into","partial_cmp","stack_in","stack_out","to_owned","try_from","","try_into","type_id"],"q":[[0,"zingen"],[99,"zingen::asm"],[267,"zingen::backtrace"],[281,"zingen::codegen"],[290,"zingen::codegen::code"],[334,"zingen::codegen::constructor"],[348,"zingen::codegen::dispatcher"],[368,"zingen::codegen::function"],[989,"zingen::control"],[1046,"zingen::jump"],[1073,"zingen::jump::relocate"],[1075,"zingen::jump::table"],[1107,"zingen::local"],[1155,"zingen::masm"],[1256,"zingen::result"],[1304,"zingen::validator"],[1888,"zingen::visitor"],[1895,"zingen::wasm"],[1965,"zingen::wasm::abi"],[1974,"zingen::wasm::data"],[1991,"zingen::wasm::func"],[2018,"zingen::wasm::host"],[2044,"evm_opcodes::shanghai"],[2045,"core::result"],[2046,"core::any"],[2047,"core::fmt"],[2048,"alloc::vec"],[2049,"core::convert"],[2050,"core::hash"],[2051,"core::option"],[2052,"wasmparser::readers::core::types"],[2053,"zabi"],[2054,"wasmparser::readers::core::operators"],[2055,"wasmparser::readers::core::code"],[2056,"wasmparser::validator::core"],[2057,"wasmparser::validator::func"],[2058,"smallvec"],[2059,"core::ops::function"],[2060,"wasmparser::binary_reader"],[2061,"zabi::result"],[2062,"core::error"],[2063,"alloc::string"],[2064,"core::cmp"]],"i":"Hh``0Fn`1`````11`110j`222`212222222222`222``1`20`222222Cf`0Gn`DfdCl``24204Bf2CbGhGd6`4`6`2653Ed0`0362G`:8813````777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777`7777777777`Al000000000000```````````6Bh7007070707000077070770707777700707707070`6666666666666`<<<<<<<<<<<<<<<<<<<````>>>>32>32>3>3>322>>>>>>32>32223333223322>3>32>3223>32Gb0``0000000000000000```0000```9999999999999999999999999999999```Gf00760766000007607666760766676677076076770767``============================================================H`>0>>`>>>>``0>>`0>>`>>>>0>>`>0>`>0>0>0>Hh000000j`1111111111111111110`1111111111111111111``Id000Ib111``11111111111111111111111111111111111111111111111111111111111111111````````Jf`0`````0J````ChIlInD`210210210210`021021210210210```021021Hb53213213213214`5``00`05`Jb000000000000000``Cj66060000060660006606060688`88888888888888888888888","f":"````````````````````````````````````````````````````````````````````````````````````````````````````{{{f{bd}}}{{j{h}}}}0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{d}}}{{f{{n{l}}}}}}`{{{f{bd}}}{{f{bA`}}}}{{{f{d}}}d}{{f{f{bc}}}h{}}{fh}{{{f{bd}}Ab}{{j{h}}}}{{{f{bd}}l}{{j{h}}}}{{}d}{{{f{bd}}l}h}{{{f{bd}}Ad}{{j{h}}}}{{{f{bd}}{f{{n{l}}}}}h}{cc{}}``{{{f{bd}}Af}h}76{{}c{}}``{fc{}}{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}{fAj}`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{}Al}{{{f{Al}}{f{bAn}}}B`}:`8{{{f{bAl}}}{{Bb{l}}}}{{{f{bAl}}Ab}{{Bb{{Bb{l}}}}}}{{{f{bAl}}c}h{{Bd{{n{l}}}}}}987```````````6655`{{{f{Bf}}}Bf}{{{f{Bh}}}Bh}{{f{f{bc}}}h{}}0{fh}0{{}Bf}{{{f{Bh}}{f{Bh}}}Bj}{{f{f{c}}}Bj{}}00{{{f{Bf}}}{{Bb{l}}}}{{{f{Bf}}{f{bAn}}}B`}{{{f{Bh}}{f{bAn}}}B`}{cc{}}0{{{f{Bf}}}{{Bb{Bh}}}}`{{{f{Bh}}{f{bc}}}hBl}{{}c{}}09{{{f{Bf}}}Ab}`{{{f{Bf}}{f{Bh}}}{{C`{Bn}}}}{{{f{bBf}}Bn}h}``{fc{}}0{{{f{bBf}}Bh}h}{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{fAj}0`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{bCb}}}{{j{A`}}}}>`;`{{{C`{Cd}}A`}{{j{Cb}}}}{{AbAb}Ab}`765```43{{{f{bCf}}{f{Ch}}Bj}{{j{h}}}}`{{{f{bCf}}{f{Cd}}}{{j{h}}}}{{{f{bCf}}Cj{f{bCl}}}{{j{{Bb{l}}}}}}{cc{}}`{{}c{}}{{{f{bCf}}{f{Ch}}}{{j{Cn}}}}{{D`{f{Cj}}}{{j{Cf}}}}{{{f{bCf}}AbBj}{{j{Bj}}}}{{{f{Cf}}{f{Db}}}{{j{Dd}}}}`{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}{fAj}`{{{f{bDf}}Dh}{{j{h}}}}{{{f{bDf}}Dd}{{j{h}}}}0{{{f{bDf}}Dj}{{j{h}}}}1{{{f{bDf}}DdDdl}{{j{h}}}}{{{f{bDf}}}{{j{h}}}}03343{{{f{bDf}}Ab}{{j{h}}}}0445111`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}66`{{{f{bDf}}{f{bDl}}{f{b{E`{Dn}}}}}{{j{h}}}}{{{f{bDf}}{f{bEb}}{f{b{E`{Dn}}}}}{{j{h}}}}`{{Df{f{bCl}}Bn}{{j{A`}}}}{cc{}}7{{{f{bDf}}Ed}{{j{h}}}}{{{f{bDf}}Bn}{{j{h}}}}9{{}c{}}`{{{f{Df}}}Bj}`:{{{f{bDf}}}{{j{{Eh{EfEf}}}}}}`{{D`CdBj}{{j{Df}}}}`{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}`{fAj}{{{f{bDf}}}c{}}{{{f{bDf}}DdDd}c{}}{{{f{bDf}}Dd}c{}}0001120101102{{{f{bDf}}Dh}c{}}11{{{f{bDf}}DdEjEj}c{}}022{{{f{bDf}}Dj}c{}}3{{{f{bDf}}DdDdl}c{}}4464464666666{{{f{bDf}}El}c{}}777777777777{{{f{bDf}}En}c{}}88888888808888888888{{{f{bDf}}l}c{}}9999999999999999909999999{{{f{bDf}}F`}c{}}:::::::::::2::::::::::2:::::::::1::::::::::::::::::1::::88::::::::::::::::::11:::::::::::::::::::::1:::::::::::222222222222222222222222222:{{{f{bDf}}Ef}c{}};;;;;;;;;;;;;33333;;;;;;;;;;;;;;333;;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;333333333333333333333333333333333333;{{{f{bDf}}Fb}c{}}<<<<<<<<<<<<<<<<4444444<<<<<<<<<<<<<<4444<<<<<<<<<<<<<<<<<<<<<<<3<<<<<<<<3<<<<<<<<<<<<<33<<<<<<<<<<<<<<<<<<<3<<<{{{f{bDf}}{Fd{l}}}c{}}=====:;;;:555<;;{{{f{bDf}}Ddl}c{}}=0>>{{{f{bDf}}Ff}c{}}0?=??000=?=>=?>>>==>>===>===?<{{{f{bDf}}Fh}c{}}{{{f{bDf}}Fj}c{}}{{{f{bDf}}}c{}}0000{{{f{bDf}}Fl}c{}};{{{f{bDf}}Enl}c{}}<<<0<<<<0<<0<<<22<00002```````{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{{f{Fn}}}Fn}{{{f{Ed}}}Ed}{{f{f{bc}}}h{}}0{fh}0{{}G`}{{{f{G`}}}Ab}{{{f{Fn}}{f{Fn}}}Bj}{{f{f{c}}}Bj{}}00{{{f{Fn}}{f{bAn}}}B`}{cc{}}00{{}c{}}00{{{f{G`}}Dd}{{j{Bn}}}}{{{f{bG`}}}{{j{Ed}}}}{{FnBnlDh}Ed}``{{{f{Ed}}}Bn}2{{{f{bG`}}Ed}h}{{{f{Ed}}}Dh}`{{{f{G`}}Ab}{{j{Dh}}}}`{fc{}}0{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{{{f{G`}}Ab}{{j{Fn}}}}`{fAj}00``````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Gb}}}Gb}{{f{f{bc}}}h{}}{fh}{{{f{Gb}}{f{Gb}}}Bj}{{f{f{c}}}Bj{}}00{{{f{Gb}}{f{bAn}}}B`}{cc{}}{{}c{}}{{{f{Gb}}}Bj}0```?>=;{Bn{{j{Bn}}}}{{{f{bA`}}BnBnBn}{{j{h}}}}`<;{{{f{bCl}}BnDd}h}{{{f{bCl}}DdBn}{{j{h}}}}{{{f{Cl}}}Cl}<;`{{{f{bCl}}Bn}h}{{}Cl}{{{f{bCl}}BnBh}h}{{{f{Cl}}{f{bAn}}}B`};`:`{{{f{bCl}}BnBn}h}{{{f{bCl}}ClBn}{{j{h}}}}1{{{f{bCl}}{f{bA`}}}{{j{h}}}}{{{f{bCl}}BnBn}{{j{h}}}}0000{{{f{bCl}}}{{j{h}}}}{{{f{bCl}}{f{Gb}}}{{j{Bn}}}}{fc{}}{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}{fAj}`````{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{}Gd}{{{f{Gf}}{f{Gf}}}Bj}{{f{f{c}}}Bj{}}00{{{f{Gf}}{f{bAn}}}B`}{{{f{Gh}}{f{bAn}}}B`}{{{f{Gd}}{f{bAn}}}B`}{cc{}}00{{{f{Gd}}Ab}{{j{{f{Gh}}}}}}{{{f{bGd}}Ab}{{j{{f{bGh}}}}}}``{{}c{}}00{{{f{Gd}}}Bj}{{{f{Gd}}}Ab}{{FjGfAb}Gh}{{{f{Gd}}Ab}{{j{{Gj{{Fd{l}}}}}}}}{{{f{bGd}}c}h{{Gl{Gh}}}}{{{f{Gh}}}Ab}`{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{{{f{Gh}}}{{f{Gf}}}}`{fAj}00{{{f{Gh}}}{{f{Fj}}}}``{{{f{bGn}}}{{j{h}}}}0000000000{{{f{bGn}}El}{{j{h}}}}11{{{f{bGn}}F`}{{j{h}}}}22222{{{f{bGn}}Ef}{{j{h}}}}33{{{f{bGn}}Fb}{{j{h}}}}4444444444{{{f{bGn}}Ddl}{{j{h}}}}055555555555555555555555`{f{{f{c}}}{}}0{{{f{b}}}{{f{bc}}}{}}0{{{f{bGn}}{f{{n{Fj}}}}}{{j{h}}}}`{{}Gn}{{{f{Gn}}}{{f{c}}}{}}{{{f{bGn}}}{{f{bc}}}{}}{{{f{bGn}}l}{{j{h}}}}``{cc{}}0=`{{}c{}}06`{{{f{bGn}}c}{{j{H`}}}Hb}{{{f{bGn}}{f{{n{l}}}}}{{j{h}}}}{{{f{bGn}}{f{{n{l}}}}}{{j{H`}}}}{{{f{Gn}}c}{{j{{Gj{{Fd{l}}}}}}}{{Hf{Ab}{{Hd{{j{Ab}}}}}}}}`{{{f{Gn}}}Bn}3`{{{f{bGn}}lBj}{{j{h}}}}`{{{f{Gn}}}l}`9{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{fAj}0```````````````````````````````````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Hh}}{f{bAn}}}B`}0{HjHh}{HlHh}{cc{}}{{}c{}}{{{f{Hh}}}{{C`{{f{Hn}}}}}}{fI`};:9``8732{{{f{Ib}}}Bj}<;:`{{{f{b{Id{c}}}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}DdDd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Dd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0001120101102{{{f{b{Id{c}}}}Dh}e{{Ih{}{{Hd{{If{h}}}}}}}{}}11{{{f{b{Id{c}}}}DdEjEj}e{{Ih{}{{Hd{{If{h}}}}}}}{}}022{{{f{b{Id{c}}}}Dj}e{{Ih{}{{Hd{{If{h}}}}}}}{}}3{{{f{b{Id{c}}}}DdDdl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}4464464666666{{{f{b{Id{c}}}}El}e{{Ih{}{{Hd{{If{h}}}}}}}{}}777777777777{{{f{b{Id{c}}}}En}e{{Ih{}{{Hd{{If{h}}}}}}}{}}88888888808888888888{{{f{b{Id{c}}}}l}e{{Ih{}{{Hd{{If{h}}}}}}}{}}9999999999999999909999999{{{f{b{Id{c}}}}F`}e{{Ih{}{{Hd{{If{h}}}}}}}{}}:::::::::::2::::::::::2:::::::::1::::::::::::::::::1::::88::::::::::::::::::11:::::::::::::::::::::1:::::::::::222222222222222222222222222:{{{f{b{Id{c}}}}Ef}e{{Ih{}{{Hd{{If{h}}}}}}}{}};;;;;;;;;;;;;33333;;;;;;;;;;;;;;333;;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;333333333333333333333333333333333333;{{{f{b{Id{c}}}}Fb}e{{Ih{}{{Hd{{If{h}}}}}}}{}}<<<<<<<<<<<<<<<<4444444<<<<<<<<<<<<<<4444<<<<<<<<<<<<<<<<<<<<<<<3<<<<<<<<3<<<<<<<<<<<<<33<<<<<<<<<<<<<<<<<<<3<<<{{{f{b{Id{c}}}}{Fd{l}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}=====:;;;:555<;;{{{f{b{Id{c}}}}Ddl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}=0>{IjBj}?{{{f{b{Id{c}}}}Ff}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0{{{f{b{Id{c}}}}}e{{Ih{}{{Hd{{If{h}}}}}}}{}}?00111?0?{{{f{b{Id{c}}}}DdDd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Dd}e{{Ih{}{{Hd{{If{h}}}}}}}{}}2111001100010002{{{f{b{Id{c}}}}Dh}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Fh}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}Fj}e{{Ih{}{{Hd{{If{h}}}}}}}{}}55555{{{f{b{Id{c}}}}Fl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}?{{{f{b{Id{c}}}}Enl}e{{Ih{}{{Hd{{If{h}}}}}}}{}}{{{f{b{Id{c}}}}En}e{{Ih{}{{Hd{{If{h}}}}}}}{}}0010000100100088011118``````````````````````{f{{f{c}}}{}}00{{{f{b}}}{{f{bc}}}{}}00{{{f{Il}}}Il}{{{f{In}}}In}{{{f{D`}}}D`}{{f{f{bc}}}h{}}00{fh}00``{{}Il}{{}In}{{}D`}{{{f{Il}}}{{f{c}}}{}}{{{f{In}}}{{f{c}}}{}}{{{f{bIl}}}{{f{bc}}}{}}{{{f{bIn}}}{{f{bc}}}{}}`{{{f{Il}}{f{bAn}}}B`}{{{f{In}}{f{bAn}}}B`}{{{f{D`}}{f{bAn}}}B`}{cc{}}00````{{}c{}}00{{{f{Il}}Dd}Bj}{{{f{In}}}{{Bb{Dd}}}}{{{f{Hb}}}Ab}{{{f{{J`{}{{Hd{c}}}}}}}c{{Bd{{n{l}}}}}}{fc{}}00{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{fAj}00`````55`54`{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Jb}}}Jb}{{f{f{bc}}}h{}}{fh}{{}Jb}{{{f{Jb}}}{{f{c}}}{}}{{{f{bJb}}}{{f{bc}}}{}}{{{f{Jb}}{f{bAn}}}B`}{cc{}}{{}c{}}{{{f{Jb}}EfAb}{{j{{Bb{l}}}}}}?>=<``{{{f{bCj}}{E`{Dn}}Jd}h}`<<;;{{}Cj}{{{f{Cj}}}{{f{c}}}{}}{{{f{bCj}}}{{f{bc}}}{}}{{{f{bCj}}{f{In}}}Cj}77{{{f{Ch}}}Dd}77{Cj{{Bb{Ch}}}}{{{f{bCj}}{f{In}}}{{C`{Cd}}}}{{{f{Ch}}}{{j{Cd}}}}{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{fAj}0`````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Jf}}}Jf}{{f{f{bc}}}h{}}{fh}{{{f{Jf}}{f{Jf}}}Jh}{{f{f{c}}}Jh{}}{{{f{Jf}}{f{Jf}}}Bj}{{f{f{c}}}Bj{}}00{{{f{Jf}}{f{bAn}}}B`}{cc{}}{{}c{}}{{{f{Jf}}{f{Jf}}}{{C`{Jh}}}}{{{f{Jf}}}l}0{fc{}}{{{Eh{{f{Db}}{f{Db}}}}}{{j{Jf}}}}{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}{fAj}","D":"DOl","p":[[0,"mut"],[5,"Assembler",99],[1,"reference"],[1,"unit"],[8,"Result",1256],[1,"u8"],[1,"slice"],[8,"Buffer",0],[1,"usize"],[6,"ShangHai",2044],[1,"u128"],[6,"Result",2045],[5,"TypeId",2046],[5,"Backtrace",267],[5,"Formatter",2047],[8,"Result",2047],[5,"Vec",2048],[10,"AsRef",2049],[5,"Code",290],[5,"ExtFunc",290],[1,"bool"],[10,"Hasher",2050],[1,"u16"],[6,"Option",2051],[5,"Constructor",334],[5,"FuncType",2052],[5,"Dispatcher",348],[5,"Function",1991],[5,"Functions",1991],[5,"JumpTable",1075],[5,"Abi",2053],[5,"Env",1895],[1,"str"],[1,"u32"],[5,"Function",368],[6,"BlockType",2054],[5,"BrTable",2054],[5,"LocalsReader",2055],[5,"ValidatorResources",2056],[5,"FuncValidator",2057],[5,"OperatorsReader",2054],[5,"ControlStackFrame",989],[1,"i32"],[1,"tuple"],[5,"RefType",2052],[5,"Ieee32",2054],[5,"MemArg",2054],[5,"Ieee64",2054],[1,"i64"],[1,"array"],[6,"HeapType",2052],[5,"TryTable",2054],[6,"ValType",2052],[5,"V128",2054],[6,"ControlStackFrameType",989],[5,"ControlStack",989],[6,"Jump",1046],[5,"Locals",1107],[6,"LocalSlotType",1107],[5,"LocalSlot",1107],[5,"SmallVec",2058],[10,"Into",2049],[5,"MacroAssembler",1155],[5,"MemoryInfo",1155],[10,"Type",1965],[17,"Output"],[10,"Fn",2059],[6,"Error",1256],[5,"BinaryReaderError",2060],[6,"Error",2061],[10,"Error",2062],[5,"String",2063],[10,"ReachableState",1304],[5,"ValidateThenVisit",1304],[8,"Result",2060],[10,"VisitOperator",2054],[6,"Operator",2054],[5,"Imports",1895],[5,"Exports",1895],[10,"ToLSBytes",1965],[5,"Data",1974],[5,"FunctionBody",2055],[6,"HostFunc",2018],[6,"Ordering",2064]],"r":[[1,99],[7,290],[8,334],[9,989],[10,989],[11,989],[14,348],[19,1256],[23,368],[36,1075],[40,1107],[41,1107],[43,1155],[46,1256],[281,290],[282,334],[283,348],[284,290],[285,368],[1049,1075],[1895,1974],[1900,1991],[1901,1991],[1902,2018],[1906,1965],[1907,1965]],"b":[[1293,"impl-Debug-for-Error"],[1294,"impl-Display-for-Error"],[1295,"impl-From%3CBinaryReaderError%3E-for-Error"],[1296,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAH4FPQBJAAAA8QABAPYAAgD7AAAAAQEAAAgBAwANAQMAFwEHACUBAwAqAQoANgEBADwBAABGAQEASQEFAFABAQBaAQIAYAEBAGsBAABuAQIAhwEBAJcBAACeAQEAoQE8AuUDDADzAwQACgQHABQEAgAaBAAAHQQJAC4EAwA1BAEAOQQCAD4EAABABAAAUAQDAFkEDQBtBAAAdgQAAHgEBQCABAIAwgQDAMcEAwDRBAAA4wQFAAwFBQAUBQQAGwUBACAFQAJ3Bw4AiAcGAJAHAgCYBwAAoQcLALQHAAC4BwgAxAcDAMwHBgDcBwUA5wcLAPUHAAD4BwQA"}],["zink",{"t":"KKYTTKCXCXCMMMCXKQMKTNNNNNNNNNNCHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHTKMCM","n":["Asm","Event","","NAME","STORAGE_KEY","Storage","asm","constructor","event","external","ffi","get","push","set","storage","","Asm","impl_asm","push","Event","NAME","log0","","log1","","log2","","log3","","log4","","asm","emit_abi","evm","push_i16","push_i32","push_i64","push_i8","push_u16","push_u32","push_u64","push_u8","sload_i16","sload_i32","sload_i64","sload_i8","sload_u16","sload_u32","sload_u64","sload_u8","log0","log1","log2","log3","log4","push0","push1","push10","push11","push12","push13","push14","push15","push16","push17","push18","push19","push2","push20","push21","push22","push23","push24","push25","push26","push27","push28","push29","push3","push30","push31","push32","push4","push5","push6","push7","push8","push9","sload","sstore","STORAGE_KEY","Storage","get","mapping","set"],"q":[[0,"zink"],[16,"zink::asm"],[19,"zink::event"],[31,"zink::ffi"],[34,"zink::ffi::asm"],[50,"zink::ffi::evm"],[90,"zink::storage"],[95,"zink_codegen"]],"i":"```fn``````0b1````0`22222222222```````````````````````````````````````````````````````````1`1`1","f":"```````````{{}cb}{bd}{cdb}````1``{{{h{f}}}d}0{{{h{f}}{h{{l{j}}}}}d}0{{{h{f}}{h{{l{j}}}}{h{{l{j}}}}}d}0{{{h{f}}{h{{l{j}}}}{h{{l{j}}}}{h{{l{j}}}}}d}0{{{h{f}}{h{{l{j}}}}{h{{l{j}}}}{h{{l{j}}}}{h{{l{j}}}}}d}0`````````````````````````````````````````````````````````````7`5","D":"Jb","p":[[10,"Asm",16],[1,"unit"],[10,"Event",19],[1,"reference"],[1,"u8"],[1,"slice"],[10,"Storage",90]],"r":[[0,16],[1,19],[2,95],[5,90],[7,95],[9,95],[15,95]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAA4ABAAEAAEAEgAAABUACgBbAAAA"}],["zink_codegen",{"t":"YCXCXCCXHHHJH","n":["Event","constructor","","event","external","selector","storage","","parse","","external","IOTA","parse"],"q":[[0,"zink_codegen"],[8,"zink_codegen::constructor"],[9,"zink_codegen::event"],[10,"zink_codegen::selector"],[11,"zink_codegen::storage"],[13,"syn::item"],[14,"proc_macro2"],[15,"syn::derive"],[16,"proc_macro"]],"i":"`````````````","f":"````````{bd}{fh}{bh}`{jd}","D":"Ah","p":[[5,"ItemFn",13],[5,"TokenStream",14],[5,"DeriveInput",15],[5,"TokenStream",16],[5,"ItemType",13]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAcADAA="}],["zinkc",{"t":"PFPPPFFPGPPIOOCOOCCCOOOCCOOCFONNOONNNNNONNNNNFONNNNNNONNNNNONONNNNNNFONNONNNONNNNNONNNFNNNNNNNNNONNNNNNNNNNNNFNNNONNONONONNNNNNNNNPPPPPGPPINNNNNNNNNNNNNNNNH","n":["Anyhow","Artifact","BinaryReader","BufferOverflow","Codegen","Compiler","Config","Err","Error","InvalidDataOffset","Ok","Result","abi","","artifact","buffer","bytecode","cli","compiler","config","","","dispatcher","parser","result","runtime_bytecode","table","utils","Artifact","abi","borrow","borrow_mut","bytecode","config","default","deserialize","fmt","from","into","runtime_bytecode","serialize","try_from","","try_into","type_id","Compile","abi","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","dispatcher","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","input","into","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Compiler","abi","borrow","borrow_mut","buffer","compile","compile_dispatcher","compile_func","config","default","emit_buffer","from","into","new","table","try_from","try_into","type_id","Config","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","default","deserialize","dispatcher","","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","serialize","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Parser","borrow","borrow_mut","data","","default","exports","","from","funcs","imports","","into","parse","remove_constructor","to_env","to_func_env","try_from","","try_into","type_id","Anyhow","BinaryReader","BufferOverflow","Codegen","Err","Error","InvalidDataOffset","Ok","Result","borrow","borrow_mut","fmt","","from","","","","header","in_current_span","into","source","to_string","try_from","try_into","type_id","wasm_opt"],"q":[[0,"zinkc"],[28,"zinkc::artifact"],[45,"zinkc::cli"],[68,"zinkc::compiler"],[86,"zinkc::config"],[109,"zinkc::parser"],[130,"zinkc::result"],[155,"zinkc::utils"],[156,"core::result"],[157,"serde::de"],[158,"core::fmt"],[159,"serde::ser"],[160,"wasmparser::readers::core::types"],[161,"core::option"],[162,"core::any"],[163,"clap_builder::builder::command"],[164,"clap_builder::parser::matches::arg_matches"],[165,"clap_builder"],[166,"clap_builder::util::id"],[167,"anyhow"],[168,"zingen::wasm"],[169,"zingen::wasm::func"],[170,"zingen::codegen::function"],[171,"wasmparser::readers::core::data"],[172,"wasmparser::readers"],[173,"zingen::wasm::data"],[174,"wasmparser::readers::core::exports"],[175,"wasmparser::readers::core::imports"],[176,"wasmparser::binary_reader"],[177,"zingen::result"],[178,"color_eyre::section"],[179,"core::marker"],[180,"core::error"],[181,"alloc::string"],[182,"std::path"],[183,"core::convert"]],"i":"Dl`000``Bn`10`fAb`01```10Cj``21``2222222222222222`An000000000000000000000`22222222222222222`1111111111111111111111`C`000000000000000000066665`65`6666666666666666`","f":"``````````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}``{{}f}{c{{h{f}}}j}{{{b{f}}{b{dl}}}n}{cc{}}{{}c{}}`{{{b{f}}c}hA`}{c{{h{e}}}{}{}}{{{Ah{Ab{Af{Ad}}}}}{{h{fc}}}{}}{{}{{h{c}}}{}}{bAj}``{AlAl}0<;{{}Al}0`{{{b{An}}{b{dl}}}n}9{{{b{B`}}}{{h{AnBb}}}}{{{b{dB`}}}{{h{AnBb}}}}{{}{{Af{Bd}}}}`;`{{{b{An}}}{{Bh{Bf}}}}:87{{{b{dAn}}{b{B`}}}{{h{BfBb}}}}{{{b{dAn}}{b{dB`}}}{{h{BfBb}}}}``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}`{{Ab{b{{Bl{Bj}}}}}{{Bn{f}}}}{{{b{dAb}}{b{dC`}}}{{Bn{Bf}}}}{{{b{dAb}}CbCd}{{Bn{Bf}}}}`{{}Ab}{{{b{dAb}}CfCh}{{Bn{Bf}}}}{cc{}}{{}c{}}{CjAb}`{c{{h{e}}}{}{}}{{}{{h{c}}}{}}{bAj}`{AlAl}0=<{{}Al}0{{}Cj}{c{{h{Cj}}}j}{{CjCl}Cj}`{{{b{Cj}}{b{dl}}}n};{{{b{B`}}}{{h{CjBb}}}}{{{b{dB`}}}{{h{CjBb}}}}{{}{{Af{Bd}}}}={{{b{Cj}}c}hA`}<;:{{{b{dCj}}{b{B`}}}{{h{BfBb}}}}{{{b{dCj}}{b{dB`}}}{{h{BfBb}}}}`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{{D`{Cn}}}}}{{Bn{Db}}}}`{{}C`}{{{b{{D`{Dd}}}}}{{Bn{Df}}}}`{cc{}}`{{{b{{D`{Dh}}}}}{{Bn{Dj}}}}`{{}c{}}{{{b{dC`}}{b{{Bl{Bj}}}}}{{Bn{Bf}}}}{{{b{dC`}}}{{Af{Ad}}}}{{{b{C`}}}Cb}0{c{{h{e}}}{}{}}{{{b{{Bl{Bj}}}}}{{Bn{C`}}}}{{}{{h{c}}}{}}{bAj}`````````>={{{b{Dl}}{b{dl}}}n}0:{DnDl}{E`Dl}{EbDl}{c{{Ed{ce}}}{EfEhEj}{}}{{}}={{{b{Dl}}}{{Af{{b{El}}}}}}{bEn};98{{ce}{{Bh{Bf}}}{{Fb{F`}}}{{Fb{F`}}}}","D":"Jf","p":[[1,"reference"],[0,"mut"],[5,"Artifact",28],[6,"Result",156],[10,"Deserializer",157],[5,"Formatter",158],[8,"Result",158],[10,"Serializer",159],[5,"Compiler",68],[5,"FuncType",160],[6,"Option",161],[1,"tuple"],[5,"TypeId",162],[5,"Command",163],[5,"Compile",45],[5,"ArgMatches",164],[8,"Error",165],[5,"Id",166],[1,"unit"],[8,"Result",167],[1,"u8"],[1,"slice"],[8,"Result",130],[5,"Parser",109],[5,"Env",168],[5,"Function",169],[1,"u32"],[5,"Function",170],[5,"Config",86],[1,"bool"],[5,"Data",171],[5,"SectionLimited",172],[5,"Data",173],[5,"Export",174],[5,"Exports",168],[5,"Import",175],[5,"Imports",168],[6,"Error",130],[5,"Error",167],[5,"BinaryReaderError",176],[6,"Error",177],[5,"IndentedSection",178],[10,"Display",158],[10,"Send",179],[10,"Sync",179],[10,"Error",180],[5,"String",181],[5,"Path",182],[10,"AsRef",183]],"r":[[1,28],[5,68],[6,86],[8,130],[11,130]],"b":[[141,"impl-Debug-for-Error"],[142,"impl-Display-for-Error"],[144,"impl-From%3CError%3E-for-Error"],[145,"impl-From%3CBinaryReaderError%3E-for-Error"],[146,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEkAFwAfAAEAIwACACkABAAwAAUANwAAADkAAgBAAAQARwABAE4AAABUAAIAWAAHAGIAAABkAAIAaAAFAG8AAQByAAEAdQAAAHcAAAB5AAAAfwADAIwAAwCRAAQAlwAEAA=="}],["zinkc_filetests",{"t":"TTTTTTTTTTTTTTTTTTTTTTTTTTTTTFNNNNNNQNNOONNNNO","n":["BR_IF_AS_BLOCK_LAST","CALL_AS_IF","CALL_DUMMY","CALL_PARAMS","I32ADD_LOCALS","I32ADD_PARAMS","I32ADD_TEE","I32SUB_LOCALS","I32SUB_PARAMS","I64ADD_LOCALS","I64ADD_PARAMS","I64ADD_TEE","I64SUB_LOCALS","I64SUB_PARAMS","IF_BASIC","IF_SINGULAR","LOG_LOG0","LOG_LOG1","LOG_LOG2","LOG_LOG3","LOG_LOG4","LOOP_AS_BR_IF","LOOP_SINGULAR","RECURSION_FIBONACCI","SELECT_PARAMS","STORAGE_BASIC","STORAGE_DISPATCHER","STORAGE_LOAD","STORAGE_STORE","Test","borrow","borrow_mut","clone","clone_into","clone_to_uninit","from","impl_tests","into","load","module","name","to_owned","try_from","try_into","type_id","wasm"],"q":[[0,"zinkc_filetests"],[46,"anyhow"],[47,"core::result"],[48,"core::any"]],"i":"f0000000000000000000000000000`000000`000000000","f":"``````````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}f}{{b{b{dc}}}h{}}{bh}{cc{}}`{{}c{}}{{{b{j}}{b{j}}}{{l{f}}}}``{bc{}}{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{bA`}`","D":"Dl","p":[[1,"reference"],[0,"mut"],[5,"Test",0],[1,"unit"],[1,"str"],[8,"Result",46],[6,"Result",47],[5,"TypeId",48]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAgAAgAfAAQAKgADAA=="}],["zint",{"t":"PKPPFPPPPFGFPPPPPPPPPPGPPPPPPPIOONNNNCNNNNNNCONNNNNNNNCNNNNOOEONNHEOCOHOMNNMNNNNNNOKQMMFONNNNNNONNNNNNNNNNNOSSFSFONNNNNNNNNNNNNNOOONNNOOONNNNNNNNFFNNNNNNNNNNOOHHNNNNNNH","n":["BasicOutOfGas","Bytes32","CallNotAllowedInsideStatic","CallTooDeep","Contract","CreateCollision","CreateContractSizeLimit","CreateContractStartingWithEF","CreateInitcodeSizeLimit","EVM","Halt","Info","InvalidFEOpcode","InvalidJump","InvalidOperand","Memory","MemoryLimit","NonceOverflow","NotActivated","OpcodeNotFound","OutOfFund","OutOfGas","OutOfGasError","OutOfOffset","OverflowPayment","Precompile","PrecompileError","StackOverflow","StackUnderflow","StateChangeDuringStaticCall","U256","address","artifact","borrow","","borrow_mut","","bytes","clone","","clone_into","","clone_to_uninit","","contract","dispatcher","eq","","equivalent","","","","","","evm","fmt","","from","","gas","halt","hex","inner","into","","keccak256","log","logs","lookup","ret","setup_logger","storage","to_bytes32","to_owned","","to_vec","try_from","","try_into","","type_id","","wasm","Bytes32","impl_bytes32","to_bytes32","to_vec","Contract","artifact","borrow","borrow_mut","bytecode","compile","current","default","dispatcher","encode","execute","from","","into","json_abi","pure","search","try_from","try_into","type_id","wasm","ALICE","CONTRACT","EVM","GAS_LIMIT","Info","address","borrow","","borrow_mut","","call","calldata","contract","db","default","","deploy","fmt","from","","gas","halt","inner","interp","into","","logs","ret","storage","try_from","","","","try_into","","type_id","","Manifest","Package","borrow","","borrow_mut","","deserialize","","from","","into","","name","package","pkg_name","target_dir","try_from","","try_into","","type_id","","wasm"],"q":[[0,"zint"],[83,"zint::bytes"],[87,"zint::contract"],[108,"zint::evm"],[145,"zint::lookup"],[168,"revm_primitives::result"],[169,"core::fmt"],[170,"core::result"],[171,"alloc::vec"],[172,"core::any"],[173,"anyhow"],[174,"core::convert"],[175,"alloc::string"],[176,"revm::db::in_memory_db"],[177,"revm_primitives::env"],[178,"serde::de"],[179,"std::path"],[180,"ruint::aliases"],[181,"zabi::selector"]],"i":"h`f0`0000```0011100000`0010000`BfB`2323`232323`023222333`232311`Bl34``2`2`2Aj4504545452``00`22222222222222222222`````31313111113131333111333313331313``CjCn1010101001``101010`","f":"`````````````````````````````````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0`{{{b{f}}}f}{{{b{h}}}h}{{b{b{dc}}}j{}}0{bj}0``{{{b{f}}{b{f}}}l}{{{b{h}}{b{h}}}l}{{b{b{c}}}l{}}00000`{{{b{f}}{b{dn}}}{{Ab{jA`}}}}{{{b{h}}{b{dn}}}{{Ab{jA`}}}}{cc{}}0````{{}c{}}0{{{b{{Af{Ad}}}}}{{Ah{Ad}}}}````{{}j}`{{{b{Aj}}}{{Ah{Ad}}}}{bc{}}0{{{b{Aj}}}{{Al{Ad}}}}{c{{Ab{e}}}{}{}}0{{}{{Ab{c}}}{}}0{bAn}0```53``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{B`}}}{{b{{Af{Ad}}}}}}{B`{{Bb{B`}}}}{{}{{Bb{B`}}}}{{}B`}`{{{b{B`}}e}{{Bb{{Al{Ad}}}}}Aj{{Bd{{Af{c}}}}}}{{{b{dB`}}e}{{Bb{Bf}}}Aj{{Bd{{Af{c}}}}}}{cB`{{Bd{{Af{Ad}}}}}}{cc{}}{{}c{}}{{{b{B`}}}{{Bb{Bh}}}}{B`B`}{{{b{Bj}}}{{Bb{B`}}}}{c{{Ab{e}}}{}{}}{{}{{Ab{c}}}{}}{bAn}```````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{dBl}}{Ah{Ad}}}{{Bb{Bf}}}}{{{b{dBl}}{b{{Af{Ad}}}}}{{b{dBl}}}}{{Bl{b{{Af{Ad}}}}}Bl}{{{b{dBl}}}{{b{dBn}}}}{{}Bl}{{}Bf}{{{b{dBl}}{b{{Af{Ad}}}}}{{Bb{Bf}}}}{{{b{Bf}}{b{dn}}}C`}{cc{}}0```{{{b{{Af{Ad}}}}{b{{Af{Ad}}}}}{{Bb{Bf}}}}{{}c{}}0```??{{{Cf{CbCd}}}{{Bb{Bf}}}}{Ch{{Bb{Bf}}}}{{}{{Ab{c}}}{}}0{bAn}0``{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{c{{Ab{Cj}}}Cl}{c{{Ab{Cn}}}Cl}::88``{{}{{Bb{Bh}}}}{{}{{Bb{D`}}}}{c{{Ab{e}}}{}{}}08877{{{b{Bj}}}{{Bb{D`}}}}","D":"J`","p":[[1,"reference"],[0,"mut"],[6,"Halt",0,168],[6,"OutOfGasError",0,168],[1,"unit"],[1,"bool"],[5,"Formatter",169],[5,"Error",169],[6,"Result",170],[1,"u8"],[1,"slice"],[1,"array"],[10,"Bytes32",83],[5,"Vec",171],[5,"TypeId",172],[5,"Contract",87],[8,"Result",173],[10,"AsRef",174],[5,"Info",108],[5,"String",175],[1,"str"],[5,"EVM",108],[8,"InMemoryDB",176],[8,"Result",169],[5,"ResultAndState",168],[6,"TransactTo",177],[1,"tuple"],[6,"ExecutionResult",168],[5,"Manifest",145],[10,"Deserializer",178],[5,"Package",145],[5,"PathBuf",179]],"r":[[1,83],[4,87],[9,108],[10,168],[11,108],[22,168],[30,180],[65,181]],"b":[[139,"impl-TryFrom%3C(ResultAndState,+TransactTo)%3E-for-Info"],[140,"impl-TryFrom%3CExecutionResult%3E-for-Info"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFgAFwABAAAAAwABAAYAAAANABEAIgADACcABQAvAAcAOAABAD4AAQBDAAAASgABAE0ABQBaAAEAXwAAAGMAAABpAAIAcwADAHoAAgB+AAAAgwAAAIoABwCUAAUAogAFAA=="}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5824,5453,2413,2072,49646,1688,597,5427,1188,4410]}
searchState.loadedDescShard("zint", 0, "Zink testing framework.\nTrait for converting type to bytes32.\nContract instance for testing.\nCreate init code size exceeds limit (runtime).\nError on created contract that begins with EF\nEIP-3860: Limit and meter initcode. Initcode size limit …\nWrapper of full REVM\nIndicates that the EVM has experienced an exceptional …\nInterp execution result info.\n<code>Uint</code> for <code>256</code> bits.\nthe created contract address if any.\nThe artifact of the contract.\nUtils for bytes conversion.\nContract Instance\nIf enable dispatcher.\nWrapper of revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas spent.\nTransaction halt reason.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a keccak hash of the input (sha3)\nExecution logs.\nBinary lookup util\nReturn value.\nSet up the logger.\nThe storage.\nConvert type to the lowest significant bytes 32.\nConvert type to vec of bytes.\nThe source WASM of the contract.\nTrait for converting type to bytes32.\nImplement Bytes32 for types.\nConvert type to the lowest significant bytes 32.\nConvert type to vec of bytes.\nContract instance for testing.\nThe artifact of the contract.\nGet the bytecode of the contract.\nCompile WASM to EVM bytecode.\nLoad zink contract defined in the current package.\nIf enable dispatcher.\nEncode call data\nExecute the contract.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the JSON ABI of the contract.\nDisable dispatcher.\nSearch for zink contract in the target directory.\nThe source WASM of the contract.\nAlice account address.\nContract address if any.\nWrapper of full REVM\nTransaction gas limit.\nInterp execution result info.\nthe created contract address if any.\nSend transaction to the provided address.\nFill the calldata of the present transaction.\nOverride the present contract\nInterpret runtime bytecode with provided arguments\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas spent.\nTransaction halt reason.\nInterpret runtime bytecode with provided arguments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecution logs.\nReturn value.\nThe storage.\nCargo Manifest for parsing package.\nCargo Package for parsing package name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackage name.\nThe package.\nGet the name of the current package.\nGet the current target directory.\nGet the wasm binary of the provided name from the target …")